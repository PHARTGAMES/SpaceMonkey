<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ScriptHookVDotNet3</name>
    </assembly>
    <members>
        <member name="T:GTA.Math.Matrix">
            <summary>
            Defines a 4x4 matrix.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M11">
            <summary>
            Gets or sets the element of the matrix that exists in the first row and first column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M12">
            <summary>
            Gets or sets the element of the matrix that exists in the first row and second column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M13">
            <summary>
            Gets or sets the element of the matrix that exists in the first row and third column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M14">
            <summary>
            Gets or sets the element of the matrix that exists in the first row and fourth column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M21">
            <summary>
            Gets or sets the element of the matrix that exists in the second row and first column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M22">
            <summary>
            Gets or sets the element of the matrix that exists in the second row and second column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M23">
            <summary>
            Gets or sets the element of the matrix that exists in the second row and third column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M24">
            <summary>
            Gets or sets the element of the matrix that exists in the second row and fourth column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M31">
            <summary>
            Gets or sets the element of the matrix that exists in the third row and first column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M32">
            <summary>
            Gets or sets the element of the matrix that exists in the third row and second column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M33">
            <summary>
            Gets or sets the element of the matrix that exists in the third row and third column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M34">
            <summary>
            Gets or sets the element of the matrix that exists in the third row and fourth column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M41">
            <summary>
            Gets or sets the element of the matrix that exists in the fourth row and first column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M42">
            <summary>
            Gets or sets the element of the matrix that exists in the fourth row and second column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M43">
            <summary>
            Gets or sets the element of the matrix that exists in the fourth row and third column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M44">
            <summary>
            Gets or sets the element of the matrix that exists in the fourth row and fourth column.
            </summary>
        </member>
        <member name="M:GTA.Math.Matrix.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Math.Matrix"/> structure.
            </summary>
            <param name="values">The values to assign to the components of the matrix. This must be an array with sixteen elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than sixteen elements.</exception>
        </member>
        <member name="P:GTA.Math.Matrix.Zero">
            <summary>
            A <see cref="T:GTA.Math.Matrix"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="P:GTA.Math.Matrix.Identity">
            <summary>
            The identity <see cref="T:GTA.Math.Matrix"/>.
            </summary>
        </member>
        <member name="P:GTA.Math.Matrix.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="index">The zero-based index of the component to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 15].</exception>
        </member>
        <member name="P:GTA.Math.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="row">The row of the matrix to access.</param>
            <param name="column">The column of the matrix to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>is out of the range [0, 3].</exception>
        </member>
        <member name="P:GTA.Math.Matrix.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is an identity matrix.
            </summary>
            <value>
            <see langword="true" /> if this instance is an identity matrix; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Math.Matrix.HasInverse">
            <summary>
            Gets a value indicating whether this instance has an inverse matrix.
            </summary>
        </member>
        <member name="M:GTA.Math.Matrix.Determinant">
            <summary>
            Calculates the determinant of the matrix.
            </summary>
            <returns>The determinant of the matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Invert">
            <summary>
            Inverts the matrix.
            </summary>
        </member>
        <member name="M:GTA.Math.Matrix.TransformPoint(GTA.Math.Vector3)">
            <summary>
            Apply the transformation matrix to a point in world space
            </summary>
            <param name="point">The original vertex location</param>
            <returns>The vertex location transformed by the given <see cref="T:GTA.Math.Matrix"/></returns>
        </member>
        <member name="M:GTA.Math.Matrix.InverseTransformPoint(GTA.Math.Vector3)">
            <summary>
            Calculates the position of a point before this transformation matrix gets applied
            </summary>
            <param name="point">The transformed vertex location</param>
            <returns>The original vertex location before being transformed by the given <see cref="T:GTA.Math.Matrix"/></returns>
        </member>
        <member name="M:GTA.Math.Matrix.Add(GTA.Math.Matrix,GTA.Math.Matrix)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Subtract(GTA.Math.Matrix,GTA.Math.Matrix)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Multiply(GTA.Math.Matrix,GTA.Math.Matrix)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Multiply(GTA.Math.Matrix,System.Single)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Divide(GTA.Math.Matrix,GTA.Math.Matrix)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Divide(GTA.Math.Matrix,System.Single)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Negate(GTA.Math.Matrix)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="matrix">The matrix to be negated.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Invert(GTA.Math.Matrix)">
            <summary>
            Calculates the inverse of a matrix if it exists.
            </summary>
            <returns>The inverse of the matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Lerp(GTA.Math.Matrix,GTA.Math.Matrix,System.Single)">
            <summary>
            Performs a linear interpolation between two matrices.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two matrices.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned.
            </remarks>
        </member>
        <member name="M:GTA.Math.Matrix.RotationX(System.Single)">
            <summary>
            Creates a matrix that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.RotationY(System.Single)">
            <summary>
            Creates a matrix that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.RotationZ(System.Single)">
            <summary>
            Creates a matrix that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.RotationAxis(GTA.Math.Vector3,System.Single)">
            <summary>
            Creates a matrix that rotates around an arbitrary axis.
            </summary>
            <param name="axis">The axis around which to rotate.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.RotationQuaternion(GTA.Math.Quaternion)">
            <summary>
            Creates a rotation matrix from a rotation.
            </summary>
            <param name="rotation">The quaternion to use to build the matrix.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a rotation matrix with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Scaling(System.Single,System.Single,System.Single)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Scaling(GTA.Math.Vector3)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Translation(System.Single,System.Single,System.Single)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Translation(GTA.Math.Vector3)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="amount">The offset for all three coordinate planes.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Transpose(GTA.Math.Matrix)">
            <summary>
            Calculates the transpose of the specified matrix.
            </summary>
            <param name="matrix">The matrix whose transpose is to be calculated.</param>
            <returns>The transpose of the specified matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.op_UnaryNegation(GTA.Math.Matrix)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="matrix">The matrix to negate.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.op_Addition(GTA.Math.Matrix,GTA.Math.Matrix)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.op_Subtraction(GTA.Math.Matrix,GTA.Math.Matrix)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.op_Division(GTA.Math.Matrix,GTA.Math.Matrix)">
            <summary>
            Divides two matrices.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.op_Division(GTA.Math.Matrix,System.Single)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.op_Multiply(GTA.Math.Matrix,GTA.Math.Matrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.op_Multiply(GTA.Math.Matrix,System.Single)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.op_Multiply(System.Single,GTA.Math.Matrix)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="right">The matrix to scale.</param>
            <param name="left">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.op_Equality(GTA.Math.Matrix,GTA.Math.Matrix)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><see langword="true" /> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.op_Inequality(GTA.Math.Matrix,GTA.Math.Matrix)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><see langword="true" /> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.ToArray">
            <summary>
            Converts the matrix to an array of floats.
            </summary>
        </member>
        <member name="M:GTA.Math.Matrix.ToString">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.ToString(System.String)">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <param name="format">The format.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns><see langword="true" /> if the current instance is equal to the specified object; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Equals(GTA.Math.Matrix)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object.
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns><see langword="true" /> if the current instance is equal to the specified object; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="F:GTA.Math.Quaternion.X">
            <summary>
            Gets or sets the X component of the quaternion.
            </summary>
            <value>The X component of the quaternion.</value>
        </member>
        <member name="F:GTA.Math.Quaternion.Y">
            <summary>
            Gets or sets the Y component of the quaternion.
            </summary>
            <value>The Y component of the quaternion.</value>
        </member>
        <member name="F:GTA.Math.Quaternion.Z">
            <summary>
            Gets or sets the Z component of the quaternion.
            </summary>
            <value>The Z component of the quaternion.</value>
        </member>
        <member name="F:GTA.Math.Quaternion.W">
            <summary>
            Gets or sets the W component of the quaternion.
            </summary>
            <value>The W component of the quaternion.</value>
        </member>
        <member name="M:GTA.Math.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Math.Quaternion"/> structure.
            </summary>
            <param name="x">The X component of the quaternion.</param>
            <param name="y">The Y component of the quaternion.</param>
            <param name="z">The Z component of the quaternion.</param>
            <param name="w">The W component of the quaternion.</param>
        </member>
        <member name="M:GTA.Math.Quaternion.#ctor(GTA.Math.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Math.Quaternion"/> structure.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation in radians.</param>
        </member>
        <member name="P:GTA.Math.Quaternion.Zero">
            <summary>
            A <see cref="T:GTA.Math.Quaternion"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="P:GTA.Math.Quaternion.One">
            <summary>
            A <see cref="T:GTA.Math.Quaternion"/> with all of its components set to one.
            </summary>
        </member>
        <member name="P:GTA.Math.Quaternion.Identity">
            <summary>
            The identity <see cref="T:GTA.Math.Quaternion"/> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="P:GTA.Math.Quaternion.Axis">
            <summary>
            Gets the axis components of the quaternion.
            </summary>
        </member>
        <member name="P:GTA.Math.Quaternion.Angle">
            <summary>
            Gets the angle of the quaternion.
            </summary>
        </member>
        <member name="M:GTA.Math.Quaternion.Length">
            <summary>
            Calculates the length of the quaternion.
            </summary>
            <returns>The length of the quaternion.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.LengthSquared">
            <summary>
            Calculates the squared length of the quaternion.
            </summary>
            <returns>The squared length of the quaternion.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Normalize">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
        </member>
        <member name="M:GTA.Math.Quaternion.Conjugate">
            <summary>
            Conjugates the quaternion.
            </summary>
        </member>
        <member name="M:GTA.Math.Quaternion.Invert">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
        </member>
        <member name="M:GTA.Math.Quaternion.Negate(GTA.Math.Quaternion)">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
            <param name="quaternion">The quaternion to negate.</param>
            <returns>A quaternion facing in the opposite direction.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Add(GTA.Math.Quaternion,GTA.Math.Quaternion)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Subtract(GTA.Math.Quaternion,GTA.Math.Quaternion)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Multiply(GTA.Math.Quaternion,GTA.Math.Quaternion)">
            <summary>
            Multiplies two Quaternions together.
            </summary>
            <param name="left">The Quaternion on the left side of the multiplication.</param>
            <param name="right">The Quaternion on the right side of the multiplication.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Multiply(GTA.Math.Quaternion,System.Single)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="quaternion">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Divide(GTA.Math.Quaternion,GTA.Math.Quaternion)">
            <summary>
            Divides a quaternion by another.
            </summary>
            <param name="left">The first quaternion to divide.</param>
            <param name="right">The second quaternion to divide.</param>
            <returns>The divided quaternion.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Normalize(GTA.Math.Quaternion)">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
            <param name="quaternion">The quaternion to normalize.</param>
            <returns>The normalized quaternion.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Conjugate(GTA.Math.Quaternion)">
            <summary>
            Creates the conjugate of a specified Quaternion.
            </summary>
            <param name="value">The Quaternion of which to return the conjugate.</param>
            <returns>A new Quaternion that is the conjugate of the specified one.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Invert(GTA.Math.Quaternion)">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
            <param name="quaternion">The quaternion to conjugate and re-normalize.</param>
            <returns>The conjugated and renormalized quaternion.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Dot(GTA.Math.Quaternion,GTA.Math.Quaternion)">
            <summary>
            Calculates the dot product of two quaternions.
            </summary>
            <param name="left">First source quaternion.</param>
            <param name="right">Second source quaternion.</param>
            <returns>The dot product of the two quaternions.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Lerp(GTA.Math.Quaternion,GTA.Math.Quaternion,System.Single)">
            <summary>
            Performs a linear interpolation between two quaternion.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two quaternions.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned.
            </remarks>
        </member>
        <member name="M:GTA.Math.Quaternion.Slerp(GTA.Math.Quaternion,GTA.Math.Quaternion,System.Single)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation..
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The spherical linear interpolation of the two quaternions.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.SlerpUnclamped(GTA.Math.Quaternion,GTA.Math.Quaternion,System.Single)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation. The parameter /t/ is not clamped.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
        </member>
        <member name="M:GTA.Math.Quaternion.LookRotation(GTA.Math.Vector3)">
            <summary>
            Creates a rotation with the specified <paramref name="forward"/> and <see cref="P:GTA.Math.Vector3.WorldUp"/> directions.
            </summary>
        </member>
        <member name="M:GTA.Math.Quaternion.LookRotation(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Creates a rotation with the specified <paramref name="forward"/> and <paramref name="up"/> directions.
            </summary>
        </member>
        <member name="M:GTA.Math.Quaternion.FromToRotation(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Creates a rotation which rotates from fromDirection to toDirection.
            </summary>
        </member>
        <member name="M:GTA.Math.Quaternion.RotateTowards(GTA.Math.Quaternion,GTA.Math.Quaternion,System.Single)">
            <summary>
            Rotates a rotation from towards to.
            </summary>
            <param name="from">From Quaternion.</param>
            <param name="to">To Quaternion.</param>
            <param name ="maxDegreesDelta"></param>
        </member>
        <member name="M:GTA.Math.Quaternion.AngleBetween(GTA.Math.Quaternion,GTA.Math.Quaternion)">
            <summary>
            Returns the angle in degrees between two rotations a and b.
            </summary>
            <param name="a">The first quaternion to calculate angle.</param>
            <param name="b">The second quaternion to calculate angle.</param>
            <returns>The angle in degrees between two rotations a and b.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Euler(System.Single,System.Single,System.Single)">
            <summary>
            Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).
            </summary>
            <param name="zaxis">Z degrees.</param>
            <param name ="xaxis">X degrees.</param>
            <param name ="yaxis">Y degrees.</param>
        </member>
        <member name="M:GTA.Math.Quaternion.Euler(GTA.Math.Vector3)">
            <summary>
            Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).
            </summary>
            <param name="euler">Euler angles in degrees. euler.X = around X axis, euler.Y = around Y axis, euler.Z = around Z axis</param>
        </member>
        <member name="M:GTA.Math.Quaternion.RotationAxis(GTA.Math.Vector3,System.Single)">
            <summary>
            Creates a quaternion given a rotation and an axis.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation in radians.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.RotationMatrix(GTA.Math.Matrix)">
            <summary>
            Creates a quaternion given a rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a Quaternion from the given yaw, pitch, and roll, in radians.
            </summary>
            <param name="yaw">The yaw angle, in radians, around the Z-axis.</param>
            <param name="pitch">The pitch angle, in radians, around the X-axis.</param>
            <param name="roll">The roll angle, in radians, around the Y-axis.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.DirectionVectors(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Creates a Quaternion from the given relative x, y, z axis
            </summary>
            The Vectors need to be perpendicular to each other
            <param name="rightVector">Relative X axis</param>
            <param name="forwardVector">Relative Y axis</param>
            <param name="upVector">Relative Z axis</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.GetDirectionVectors(GTA.Math.Quaternion,GTA.Math.Vector3@,GTA.Math.Vector3@,GTA.Math.Vector3@)">
            <summary>
            Get direction vectors from the given quaternion
            </summary>
            <param name="quaternion">The quaternion</param>
            <param name="rightVector">RightVector = relative x axis</param>
            <param name="forwardVector">ForwardVector = relative y axis</param>
            <param name="upVector">UpVector = relative z axis</param>
        </member>
        <member name="M:GTA.Math.Quaternion.op_UnaryNegation(GTA.Math.Quaternion)">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
            <param name="quaternion">The quaternion to negate.</param>
            <returns>A quaternion facing in the opposite direction.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.op_Addition(GTA.Math.Quaternion,GTA.Math.Quaternion)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.op_Subtraction(GTA.Math.Quaternion,GTA.Math.Quaternion)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.op_Multiply(GTA.Math.Quaternion,GTA.Math.Quaternion)">
            <summary>
            Multiplies a quaternion by another.
            </summary>
            <param name="left">The first quaternion to multiply.</param>
            <param name="right">The second quaternion to multiply.</param>
            <returns>The multiplied quaternion.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.op_Multiply(GTA.Math.Quaternion,System.Single)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="quaternion">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.op_Multiply(System.Single,GTA.Math.Quaternion)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="quaternion">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.op_Division(GTA.Math.Quaternion,GTA.Math.Quaternion)">
            <summary>
            Divides a Quaternion by another Quaternion.
            </summary>
            <param name="left">The source Quaternion.</param>
            <param name="right">The divisor.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.op_Equality(GTA.Math.Quaternion,GTA.Math.Quaternion)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><see langword="true" /> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.op_Inequality(GTA.Math.Quaternion,GTA.Math.Quaternion)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><see langword="true" /> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.op_Multiply(GTA.Math.Quaternion,GTA.Math.Vector3)">
            <summary>
            Rotates the point with rotation.
            </summary>
            <param name="rotation">The quaternion to rotate the vector.</param>
            <param name="point">The vector to be rotated.</param>
            <returns>The vector after rotation.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.RotateTransform(GTA.Math.Quaternion,GTA.Math.Vector3)">
            <summary>
            Rotates the point with rotation.
            </summary>
            <param name="rotation">The quaternion to rotate the vector.</param>
            <param name="point">The vector to be rotated.</param>
            <returns>The vector after rotation.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.RotateTransform(GTA.Math.Quaternion,GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Rotates the point with rotation.
            </summary>
            <param name="rotation">The quaternion to rotate the vector.</param>
            <param name="point">The vector to be rotated.</param>
            <param name="center">The vector representing the origin of the new coordinate system.</param>
            <returns>The vector after rotation in the original coordinate system.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.RotateTransform(GTA.Math.Vector3)">
            <summary>
            Rotates the point with rotation.
            </summary>
            <param name="point">The vector to be rotated.</param>
            <returns>The vector after rotation.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.RotateTransform(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Rotates the point with rotation.
            </summary>
            <param name="point">The vector to be rotated.</param>
            <param name="center">The vector representing the origin of the new coordinate system.</param>
            <returns>The vector after rotation in the original coordinate system.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.ToString">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.ToString(System.String)">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <param name="format">The format.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns><see langword="true" /> if the current instance is equal to the specified object; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Equals(GTA.Math.Quaternion)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object.
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns><see langword="true" /> if the current instance is equal to the specified object; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="F:GTA.Math.Vector2.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:GTA.Math.Vector2.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="M:GTA.Math.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Math.Vector2"/> class.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
        </member>
        <member name="P:GTA.Math.Vector2.Normalized">
            <summary>
            Returns this vector with a magnitude of 1.
            </summary>
        </member>
        <member name="P:GTA.Math.Vector2.Zero">
            <summary>
            Returns a null vector. (0,0)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector2.UnitX">
            <summary>
            The X unit <see cref="T:GTA.Math.Vector2"/> (1, 0).
            </summary>
        </member>
        <member name="P:GTA.Math.Vector2.UnitY">
            <summary>
            The Y unit <see cref="T:GTA.Math.Vector2"/> (0, 1).
            </summary>
        </member>
        <member name="P:GTA.Math.Vector2.Up">
            <summary>
            Returns the up vector. (0,1)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector2.Down">
            <summary>
            Returns the down vector. (0,-1)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector2.Right">
            <summary>
            Returns the right vector. (1,0)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector2.Left">
            <summary>
            Returns the left vector. (-1,0)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector2.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X or Y component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component and 1 for the Y component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 1].</exception>
        </member>
        <member name="M:GTA.Math.Vector2.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector2.DistanceTo(GTA.Math.Vector2)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="position">The second vector to calculate the distance to.</param>
            <returns>The distance to the other vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.DistanceToSquared(GTA.Math.Vector2)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="position">The second vector to calculate the squared distance to.</param>
            <returns>The squared distance to the other vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Distance(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="position1">The first vector to calculate the distance to the second vector.</param>
            <param name="position2">The second vector to calculate the distance to the first vector.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.DistanceSquared(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="position1">The first vector to calculate the squared distance to the second vector.</param>
            <param name="position2">The second vector to calculate the squared distance to the first vector.</param>
            <returns>The squared distance between the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Angle(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Returns the angle in degrees between from and to.
            The angle returned is always the acute angle between the two vectors.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector2.SignedAngle(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Returns the signed angle in degrees between from and to.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector2.ToHeading">
            <summary>
            Converts a vector to a heading.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector2.RandomXY">
            <summary>
            Returns a new normalized vector with random X and Y components.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector2.Add(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Subtract(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Multiply(GTA.Math.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Multiply(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Divide(GTA.Math.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Negate(GTA.Math.Vector2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Clamp(GTA.Math.Vector2,GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Lerp(GTA.Math.Vector2,GTA.Math.Vector2,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned.
            </remarks>
        </member>
        <member name="M:GTA.Math.Vector2.Normalize(GTA.Math.Vector2)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="vector">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Dot(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Reflect(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <returns>The reflected vector.</returns>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:GTA.Math.Vector2.Minimize(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Maximize(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.op_Addition(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.op_Subtraction(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.op_UnaryNegation(GTA.Math.Vector2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.op_Multiply(GTA.Math.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.op_Multiply(System.Single,GTA.Math.Vector2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.op_Division(GTA.Math.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.op_Equality(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><see langword="true" /> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.op_Inequality(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><see langword="true" /> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.op_Implicit(GTA.Math.Vector2)~GTA.Math.Vector3">
            <summary>
            Converts a Vector2 to a Vector3 implicitly.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector2.ToString">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.ToString(System.String)">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <param name="format">The format.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns><see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Equals(GTA.Math.Vector2)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object.
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns><see langword="true" /> if the current instance is equal to the specified object; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="F:GTA.Math.Vector3.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:GTA.Math.Vector3.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="F:GTA.Math.Vector3.Z">
            <summary>
            Gets or sets the Z component of the vector.
            </summary>
            <value>The Z component of the vector.</value>
        </member>
        <member name="M:GTA.Math.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Math.Vector3"/> class.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="P:GTA.Math.Vector3.Normalized">
            <summary>
            Returns this vector with a magnitude of 1.
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.Zero">
            <summary>
            Returns a null vector. (0,0,0)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.UnitX">
            <summary>
            The X unit <see cref="T:GTA.Math.Vector3"/> (1, 0, 0).
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.UnitY">
            <summary>
            The Y unit <see cref="T:GTA.Math.Vector3"/> (0, 1, 0).
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.UnitZ">
            <summary>
            The Z unit <see cref="T:GTA.Math.Vector3"/> (0, 0, 1).
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.WorldUp">
            <summary>
            Returns the world Up vector. (0,0,1)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.WorldDown">
            <summary>
            Returns the world Down vector. (0,0,-1)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.WorldNorth">
            <summary>
            Returns the world North vector. (0,1,0)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.WorldSouth">
            <summary>
            Returns the world South vector. (0,-1,0)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.WorldEast">
            <summary>
            Returns the world East vector. (1,0,0)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.WorldWest">
            <summary>
            Returns the world West vector. (-1,0,0)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.RelativeRight">
            <summary>
            Returns the relative Right vector. (1,0,0)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.RelativeLeft">
            <summary>
            Returns the relative Left vector. (-1,0,0)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.RelativeFront">
            <summary>
            Returns the relative Front vector. (0,1,0)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.RelativeBack">
            <summary>
            Returns the relative Back vector. (0,-1,0)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.RelativeTop">
            <summary>
            Returns the relative Top vector. (0,0,1)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.RelativeBottom">
            <summary>
            Returns the relative Bottom vector as used. (0,0,-1)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y or Z component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component and 2 for the Z component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 2].</exception>
        </member>
        <member name="M:GTA.Math.Vector3.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector3.DistanceTo(GTA.Math.Vector3)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="position">The second vector to calculate the distance to.</param>
            <returns>The distance to the other vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.DistanceToSquared(GTA.Math.Vector3)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="position">The second vector to calculate the distance to.</param>
            <returns>The distance to the other vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.DistanceTo2D(GTA.Math.Vector3)">
            <summary>
            Calculates the distance between two vectors, ignoring the Z-component.
            </summary>
            <param name="position">The second vector to calculate the distance to.</param>
            <returns>The distance to the other vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.DistanceToSquared2D(GTA.Math.Vector3)">
            <summary>
            Calculates the squared distance between two vectors, ignoring the Z-component.
            </summary>
            <param name="position">The second vector to calculate the squared distance to.</param>
            <returns>The distance to the other vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Distance(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="position1">The first vector to calculate the distance to the second vector.</param>
            <param name="position2">The second vector to calculate the distance to the first vector.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.DistanceSquared(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="position1">The first vector to calculate the squared distance to the second vector.</param>
            <param name="position2">The second vector to calculate the squared distance to the first vector.</param>
            <returns>The squared distance between the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Distance2D(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Calculates the distance between two vectors, ignoring the Z-component.
            </summary>
            <param name="position1">The first vector to calculate the distance to the second vector.</param>
            <param name="position2">The second vector to calculate the distance to the first vector.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.DistanceSquared2D(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Calculates the squared distance between two vectors, ignoring the Z-component.
            </summary>
            <param name="position1">The first vector to calculate the squared distance to the second vector.</param>
            <param name="position2">The second vector to calculate the squared distance to the first vector.</param>
            <returns>The squared distance between the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Angle(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Returns the angle in degrees between from and to.
            The angle returned is always the acute angle between the two vectors.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector3.SignedAngle(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Returns the signed angle in degrees between from and to.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector3.ToHeading">
            <summary>
            Converts a vector to a heading.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector3.Around(System.Single)">
            <summary>
            Creates a random vector inside the circle around this position.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector3.Round(System.Int32)">
            <summary>
            Rounds each float inside the vector to a select amount of decimal places (2 by default).
            </summary>
            <param name="decimalPlaces">Number of decimal places to round to</param>
            <returns>The vector containing rounded values</returns>
        </member>
        <member name="M:GTA.Math.Vector3.RandomXY">
            <summary>
            Returns a new normalized vector with random X and Y components.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector3.RandomXYZ">
            <summary>
            Returns a new normalized vector with random X, Y and Z components.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector3.Add(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Subtract(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Multiply(GTA.Math.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Multiply(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Multiply a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Divide(GTA.Math.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Negate(GTA.Math.Vector3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Clamp(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Lerp(GTA.Math.Vector3,GTA.Math.Vector3,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned.
            </remarks>
        </member>
        <member name="M:GTA.Math.Vector3.Normalize(GTA.Math.Vector3)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="vector">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Dot(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Cross(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Project(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Projects a vector onto another vector.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="onNormal">Vector to project onto, does not assume it is normalized.</param>
            <returns>The projected vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.ProjectOnPlane(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Projects a vector onto a plane defined by a normal orthogonal to the plane.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="planeNormal">Normal of the plane,  does not assume it is normalized.</param>
            <returns>The Projection of vector onto plane.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Reflect(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.
            </summary>
            <param name="vector">The vector to project onto the plane.</param>
            <param name="normal">Normal of the surface.</param>
            <returns>The reflected vector.</returns>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:GTA.Math.Vector3.Minimize(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Maximize(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.op_Addition(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.op_Subtraction(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.op_UnaryNegation(GTA.Math.Vector3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="vector">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.op_Multiply(GTA.Math.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.op_Multiply(System.Single,GTA.Math.Vector3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.op_Division(GTA.Math.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.op_Equality(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><see langword="true" /> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.op_Inequality(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><see langword="true" /> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.op_Implicit(GTA.Math.Vector3)~GTA.Math.Vector2">
            <summary>
            Converts a Vector3 to a Vector2 implicitly.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector3.ToArray">
            <summary>
            Converts the matrix to an array of floats.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector3.ToString">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.ToString(System.String)">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <param name="format">The number format.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns><see langword="true" /> if the current instance is equal to the specified object; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Equals(GTA.Math.Vector3)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object.
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns><see langword="true" /> if the current instance is equal to the specified object; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="T:GTA.EulerRotationOrder">
            <summary>
            Enums for the order in which to apply rotations in local space, just like how Rockstar Games define <c>EULER_ROT_ORDER</c>.
            </summary>
        </member>
        <member name="T:GTA.Native.InputArgument">
            <summary>
            An input argument passed to a script function.
            </summary>
        </member>
        <member name="M:GTA.Native.InputArgument.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Native.InputArgument"/> class to a script function input argument.
            </summary>
            <param name="value">The pointer value.</param>
        </member>
        <member name="M:GTA.Native.InputArgument.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Native.InputArgument"/> class to a script function input argument.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:GTA.Native.InputArgument.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Native.InputArgument"/> class and converts a managed object to a script function input argument.
            </summary>
            <param name="value">The object to convert.</param>
        </member>
        <member name="M:GTA.Native.InputArgument.ToString">
            <summary>
            Converts the internal value of the argument to its equivalent string representation.
            </summary>
        </member>
        <member name="T:GTA.Native.OutputArgument">
            <summary>
            An output argument passed to a script function.
            </summary>
        </member>
        <member name="M:GTA.Native.OutputArgument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Native.OutputArgument"/> class for script functions that output data into pointers.
            </summary>
        </member>
        <member name="M:GTA.Native.OutputArgument.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Native.OutputArgument"/> class with an initial value for script functions that require the pointer to data instead of the actual data.
            </summary>
            <param name="value">The value to set the data of this <see cref="T:GTA.Native.OutputArgument"/> to.</param>
        </member>
        <member name="M:GTA.Native.OutputArgument.Finalize">
            <summary>
            Frees the unmanaged resources associated with this <see cref="T:GTA.Native.OutputArgument"/>.
            </summary>
        </member>
        <member name="M:GTA.Native.OutputArgument.GetResult``1">
            <summary>
            Gets the value of data stored in this <see cref="T:GTA.Native.OutputArgument"/>.
            </summary>
        </member>
        <member name="T:GTA.Native.Function">
            <summary>
            A static class which handles script function execution.
            </summary>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument[])">
            <summary>
            Calls the specified native script function and returns its return value.
            </summary>
            <param name="hash">The hashed name of the native script function.</param>
            <param name="arguments">A list of input and output arguments to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash)">
            <summary>
            Calls the specified native script function and returns its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument">The input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <param name="argument10">The 11th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <param name="argument10">The 11th input or output argument to pass to the native script function.</param>
            <param name="argument11">The 12th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <param name="argument10">The 11th input or output argument to pass to the native script function.</param>
            <param name="argument11">The 12th input or output argument to pass to the native script function.</param>
            <param name="argument12">The 13th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <param name="argument10">The 11th input or output argument to pass to the native script function.</param>
            <param name="argument11">The 12th input or output argument to pass to the native script function.</param>
            <param name="argument12">The 13th input or output argument to pass to the native script function.</param>
            <param name="argument13">The 14th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <param name="argument10">The 11th input or output argument to pass to the native script function.</param>
            <param name="argument11">The 12th input or output argument to pass to the native script function.</param>
            <param name="argument12">The 13th input or output argument to pass to the native script function.</param>
            <param name="argument13">The 14th input or output argument to pass to the native script function.</param>
            <param name="argument14">The 15th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <param name="argument10">The 11th input or output argument to pass to the native script function.</param>
            <param name="argument11">The 12th input or output argument to pass to the native script function.</param>
            <param name="argument12">The 13th input or output argument to pass to the native script function.</param>
            <param name="argument13">The 14th input or output argument to pass to the native script function.</param>
            <param name="argument14">The 15th input or output argument to pass to the native script function.</param>
            <param name="argument15">The 16th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument[])">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="arguments">A list of input and output arguments to pass to the native script function.</param>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The input or output argument to pass to the native script function.</param>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <param name="argument10">The 11th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <param name="argument10">The 11th input or output argument to pass to the native script function.</param>
            <param name="argument11">The 12th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <param name="argument10">The 11th input or output argument to pass to the native script function.</param>
            <param name="argument11">The 12th input or output argument to pass to the native script function.</param>
            <param name="argument12">The 13th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <param name="argument10">The 11th input or output argument to pass to the native script function.</param>
            <param name="argument11">The 12th input or output argument to pass to the native script function.</param>
            <param name="argument12">The 13th input or output argument to pass to the native script function.</param>
            <param name="argument13">The 14th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <param name="argument10">The 11th input or output argument to pass to the native script function.</param>
            <param name="argument11">The 12th input or output argument to pass to the native script function.</param>
            <param name="argument12">The 13th input or output argument to pass to the native script function.</param>
            <param name="argument13">The 14th input or output argument to pass to the native script function.</param>
            <param name="argument14">The 15th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <param name="argument10">The 11th input or output argument to pass to the native script function.</param>
            <param name="argument11">The 12th input or output argument to pass to the native script function.</param>
            <param name="argument12">The 13th input or output argument to pass to the native script function.</param>
            <param name="argument13">The 14th input or output argument to pass to the native script function.</param>
            <param name="argument14">The 15th input or output argument to pass to the native script function.</param>
            <param name="argument15">The 16th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.ObjectToNative(System.Object)">
            <summary>
            Converts a managed object to a native value.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>A native value representing the input <paramref name="value"/>.</returns>
        </member>
        <member name="M:GTA.Native.Function.ObjectFromNative``1(System.UInt64*)">
            <summary>
            Converts a native value to a managed object of a value type.
            </summary>
            <typeparam name="T">The return type. The type should be a value type.</typeparam>
            <param name="value">The native value to convert.</param>
            <returns>A managed object representing the input <paramref name="value"/>.</returns>
        </member>
        <member name="M:GTA.Native.Function.ObjectFromNative(System.Type,System.UInt64*)">
            <summary>
            Converts a native value to a managed object of a reference type.
            </summary>
            <param name="type">The type to convert to. The type should be a reference type.</param>
            <param name="value">The native value to convert.</param>
            <returns>A managed object representing the input <paramref name="value"/>.</returns>
        </member>
        <member name="T:GTA.Native.GlobalVariable">
            <summary>
            A value class which handles access to global script variables.
            </summary>
        </member>
        <member name="M:GTA.Native.GlobalVariable.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Native.GlobalVariable"/> class with a variable address.
            </summary>
            <param name="address">The memory address of the global variable.</param>
        </member>
        <member name="M:GTA.Native.GlobalVariable.Get(System.Int32)">
            <summary>
            Gets the global variable at the specified index.
            </summary>
            <param name="index">The index of the global variable.</param>
            <returns>A <see cref="T:GTA.Native.GlobalVariable"/> instance representing the global variable.</returns>
        </member>
        <member name="P:GTA.Native.GlobalVariable.MemoryAddress">
            <summary>
            Gets the native memory address of the <see cref="T:GTA.Native.GlobalVariable"/>.
            </summary>
        </member>
        <member name="M:GTA.Native.GlobalVariable.Read``1">
            <summary>
            Gets the value stored in the <see cref="T:GTA.Native.GlobalVariable"/>.
            </summary>
        </member>
        <member name="M:GTA.Native.GlobalVariable.Write``1(``0)">
            <summary>
            Set the value stored in the <see cref="T:GTA.Native.GlobalVariable"/>.
            </summary>
            <param name="value">The new value to assign to the <see cref="T:GTA.Native.GlobalVariable"/>.</param>
        </member>
        <member name="M:GTA.Native.GlobalVariable.WriteString(System.String,System.Int32)">
            <summary>
            Set the value stored in the <see cref="T:GTA.Native.GlobalVariable"/> to a string.
            </summary>
            <param name="value">The string to set the <see cref="T:GTA.Native.GlobalVariable"/> to.</param>
            <param name="maxSize">The maximum size of the string. Can be found for a given global variable by checking the decompiled scripts from the game.</param>
        </member>
        <member name="M:GTA.Native.GlobalVariable.SetBit(System.Int32)">
            <summary>
            Set the value of a specific bit of the <see cref="T:GTA.Native.GlobalVariable"/> to true.
            </summary>
            <param name="index">The zero indexed bit of the <see cref="T:GTA.Native.GlobalVariable"/> to set.</param>
        </member>
        <member name="M:GTA.Native.GlobalVariable.ClearBit(System.Int32)">
            <summary>
            Set the value of a specific bit of the <see cref="T:GTA.Native.GlobalVariable"/> to false.
            </summary>
            <param name="index">The zero indexed bit of the <see cref="T:GTA.Native.GlobalVariable"/> to clear.</param>
        </member>
        <member name="M:GTA.Native.GlobalVariable.IsBitSet(System.Int32)">
            <summary>
            Gets a value indicating whether a specific bit of the <see cref="T:GTA.Native.GlobalVariable"/> is set.
            </summary>
            <param name="index">The zero indexed bit of the <see cref="T:GTA.Native.GlobalVariable"/> to check.</param>
        </member>
        <member name="M:GTA.Native.GlobalVariable.GetStructField(System.Int32)">
            <summary>
            Gets the <see cref="T:GTA.Native.GlobalVariable"/> stored at a given offset in a global structure.
            </summary>
            <param name="index">The index the <see cref="T:GTA.Native.GlobalVariable"/> is stored in the structure. For example the Y component of a Vector3 is at index 1.</param>
            <returns>The <see cref="T:GTA.Native.GlobalVariable"/> at the index given.</returns>
        </member>
        <member name="M:GTA.Native.GlobalVariable.GetArray(System.Int32)">
            <summary>
            Returns an array of all <see cref="T:GTA.Native.GlobalVariable"/>s in a global array.
            </summary>
            <param name="itemSize">The number of items stored in each array index. For example an array of Vector3s takes up 3 items.</param>
            <returns>The array of <see cref="T:GTA.Native.GlobalVariable"/>s.</returns>
        </member>
        <member name="M:GTA.Native.GlobalVariable.GetArrayItem(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:GTA.Native.GlobalVariable"/> stored at a specific index in a global array.
            </summary>
            <param name="index">The array index.</param>
            <param name="itemSize">The number of items stored in each array index. For example an array of Vector3s takes up 3 items.</param>
            <returns>The <see cref="T:GTA.Native.GlobalVariable"/> at the index given.</returns>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ActivePose">
            <summary>
            Gets a ActivePose Helper class for sending ActivePose <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ApplyImpulse">
            <summary>
            Gets a ApplyImpulse Helper class for sending ApplyImpulse <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ApplyBulletImpulse">
            <summary>
            Gets a ApplyBulletImpulse Helper class for sending ApplyBulletImpulse <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.BodyRelax">
            <summary>
            Gets a BodyRelax Helper class for sending BodyRelax <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Set the amount of relaxation across the whole body; Used to collapse the character into a rag-doll-like state.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ConfigureBalance">
            <summary>
            Gets a ConfigureBalance Helper class for sending ConfigureBalance <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            This single message allows you to configure various parameters used on any behavior that uses the dynamic balance.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ConfigureBalanceReset">
            <summary>
            Gets a ConfigureBalanceReset Helper class for sending ConfigureBalanceReset <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            reset the values configurable by the Configure Balance message to their defaults.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ConfigureSelfAvoidance">
            <summary>
            Gets a ConfigureSelfAvoidance Helper class for sending ConfigureSelfAvoidance <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            this single message allows to configure self avoidance for the character.BBDD Self avoidance tech.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ConfigureBullets">
            <summary>
            Gets a ConfigureBullets Helper class for sending ConfigureBullets <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ConfigureBulletsExtra">
            <summary>
            Gets a ConfigureBulletsExtra Helper class for sending ConfigureBulletsExtra <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ConfigureLimits">
            <summary>
            Gets a ConfigureLimits Helper class for sending ConfigureLimits <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Enable/disable/edit character limits in real time.  This adjusts limits in RAGE-native space and will *not* reorient the joint.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ConfigureSoftLimit">
            <summary>
            Gets a ConfigureSoftLimit Helper class for sending ConfigureSoftLimit <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ConfigureShotInjuredArm">
            <summary>
            Gets a ConfigureShotInjuredArm Helper class for sending ConfigureShotInjuredArm <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            This single message allows you to configure the injured arm reaction during shot
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ConfigureShotInjuredLeg">
            <summary>
            Gets a ConfigureShotInjuredLeg Helper class for sending ConfigureShotInjuredLeg <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            This single message allows you to configure the injured leg reaction during shot
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.DefineAttachedObject">
            <summary>
            Gets a DefineAttachedObject Helper class for sending DefineAttachedObject <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ForceToBodyPart">
            <summary>
            Gets a ForceToBodyPart Helper class for sending ForceToBodyPart <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Apply an impulse to a named body part
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.LeanInDirection">
            <summary>
            Gets a LeanInDirection Helper class for sending LeanInDirection <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.LeanRandom">
            <summary>
            Gets a LeanRandom Helper class for sending LeanRandom <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.LeanToPosition">
            <summary>
            Gets a LeanToPosition Helper class for sending LeanToPosition <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.LeanTowardsObject">
            <summary>
            Gets a LeanTowardsObject Helper class for sending LeanTowardsObject <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.HipsLeanInDirection">
            <summary>
            Gets a HipsLeanInDirection Helper class for sending HipsLeanInDirection <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.HipsLeanRandom">
            <summary>
            Gets a HipsLeanRandom Helper class for sending HipsLeanRandom <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.HipsLeanToPosition">
            <summary>
            Gets a HipsLeanToPosition Helper class for sending HipsLeanToPosition <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.HipsLeanTowardsObject">
            <summary>
            Gets a HipsLeanTowardsObject Helper class for sending HipsLeanTowardsObject <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ForceLeanInDirection">
            <summary>
            Gets a ForceLeanInDirection Helper class for sending ForceLeanInDirection <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ForceLeanRandom">
            <summary>
            Gets a ForceLeanRandom Helper class for sending ForceLeanRandom <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ForceLeanToPosition">
            <summary>
            Gets a ForceLeanToPosition Helper class for sending ForceLeanToPosition <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ForceLeanTowardsObject">
            <summary>
            Gets a ForceLeanTowardsObject Helper class for sending ForceLeanTowardsObject <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.SetStiffness">
            <summary>
            Gets a SetStiffness Helper class for sending SetStiffness <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Use this message to manually set the body stiffness values -before using Active Pose to drive to an animated pose, for example.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.SetMuscleStiffness">
            <summary>
            Gets a SetMuscleStiffness Helper class for sending SetMuscleStiffness <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Use this message to manually set the muscle stiffness values -before using Active Pose to drive to an animated pose, for example.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.SetWeaponMode">
            <summary>
            Gets a SetWeaponMode Helper class for sending SetWeaponMode <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Use this message to set the character's weapon mode. This is an alternative to the setWeaponMode public function.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.RegisterWeapon">
            <summary>
            Gets a RegisterWeapon Helper class for sending RegisterWeapon <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Use this message to register weapon. This is an alternative to the registerWeapon public function.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ShotRelax">
            <summary>
            Gets a ShotRelax Helper class for sending ShotRelax <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.FireWeapon">
            <summary>
            Gets a FireWeapon Helper class for sending FireWeapon <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            One shot message apply a force to the hand as we fire the gun that should be in this hand
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ConfigureConstraints">
            <summary>
            Gets a ConfigureConstraints Helper class for sending ConfigureConstraints <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            One shot to give state of constraints on character and response to constraints
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.StayUpright">
            <summary>
            Gets a StayUpright Helper class for sending StayUpright <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.StopAllBehaviors">
            <summary>
            Gets a StopAllBehaviors Helper class for sending StopAllBehaviors <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Send this message to immediately stop all behaviors from executing.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.SetCharacterStrength">
            <summary>
            Gets a SetCharacterStrength Helper class for sending SetCharacterStrength <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Sets character's strength on the dead-granny-to-healthy-terminator scale: [0..1]
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.SetCharacterHealth">
            <summary>
            Gets a SetCharacterHealth Helper class for sending SetCharacterHealth <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Sets character's health on the dead-to-alive scale: [0..1]
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.SetFallingReaction">
            <summary>
            Gets a SetFallingReaction Helper class for sending SetFallingReaction <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Sets the type of reaction if catchFall is called
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.SetCharacterUnderwater">
            <summary>
            Gets a SetCharacterUnderwater Helper class for sending SetCharacterUnderwater <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Sets viscosity applied to damping limbs
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.SetCharacterCollisions">
            <summary>
            Gets a SetCharacterCollisions Helper class for sending SetCharacterCollisions <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            setCharacterCollisions:
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.SetCharacterDamping">
            <summary>
            Gets a SetCharacterDamping Helper class for sending SetCharacterDamping <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Damp out cartwheeling and somersaulting above a certain threshold
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.SetFrictionScale">
            <summary>
            Gets a SetFrictionScale Helper class for sending SetFrictionScale <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            setFrictionScale:
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.AnimPose">
            <summary>
            Gets a AnimPose Helper class for sending AnimPose <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ArmsWindmill">
            <summary>
            Gets a ArmsWindmill Helper class for sending ArmsWindmill <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ArmsWindmillAdaptive">
            <summary>
            Gets a ArmsWindmillAdaptive Helper class for sending ArmsWindmillAdaptive <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.BalancerCollisionsReaction">
            <summary>
            Gets a BalancerCollisionsReaction Helper class for sending BalancerCollisionsReaction <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.BodyBalance">
            <summary>
            Gets a BodyBalance Helper class for sending BodyBalance <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.BodyFoetal">
            <summary>
            Gets a BodyFoetal Helper class for sending BodyFoetal <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.BodyRollUp">
            <summary>
            Gets a BodyRollUp Helper class for sending BodyRollUp <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.BodyWrithe">
            <summary>
            Gets a BodyWrithe Helper class for sending BodyWrithe <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.BraceForImpact">
            <summary>
            Gets a BraceForImpact Helper class for sending BraceForImpact <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.Buoyancy">
            <summary>
            Gets a Buoyancy Helper class for sending Buoyancy <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Simple buoyancy model.  No character movement just fluid forces/torques added to parts.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.CatchFall">
            <summary>
            Gets a CatchFall Helper class for sending CatchFall <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.Electrocute">
            <summary>
            Gets a Electrocute Helper class for sending Electrocute <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.FallOverWall">
            <summary>
            Gets a FallOverWall Helper class for sending FallOverWall <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.Grab">
            <summary>
            Gets a Grab Helper class for sending Grab <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.HeadLook">
            <summary>
            Gets a HeadLook Helper class for sending HeadLook <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.HighFall">
            <summary>
            Gets a HighFall Helper class for sending HighFall <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.IncomingTransforms">
            <summary>
            Gets a IncomingTransforms Helper class for sending IncomingTransforms <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.InjuredOnGround">
            <summary>
            Gets a InjuredOnGround Helper class for sending InjuredOnGround <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            InjuredOnGround
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.Carried">
            <summary>
            Gets a Carried Helper class for sending Carried <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Carried
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.Dangle">
            <summary>
            Gets a Dangle Helper class for sending Dangle <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Dangle
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.OnFire">
            <summary>
            Gets a OnFire Helper class for sending OnFire <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.PedalLegs">
            <summary>
            Gets a PedalLegs Helper class for sending PedalLegs <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.PointArm">
            <summary>
            Gets a PointArm Helper class for sending PointArm <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            BEHAVIOURS REFERENCED: AnimPose - allows animPose to overridebodyParts: Arms (useLeftArm, useRightArm)
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.PointGun">
            <summary>
            Gets a PointGun Helper class for sending PointGun <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.PointGunExtra">
            <summary>
            Gets a PointGunExtra Helper class for sending PointGunExtra <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Seldom set parameters for pointGun - just to keep number of parameters in any message less than or equal to 64
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.RollDownStairs">
            <summary>
            Gets a RollDownStairs Helper class for sending RollDownStairs <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.Shot">
            <summary>
            Gets a Shot Helper class for sending Shot <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ShotNewBullet">
            <summary>
            Gets a ShotNewBullet Helper class for sending ShotNewBullet <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Send new wound information to the shot.  Can cause shot to restart it's performance in part or in whole.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ShotSnap">
            <summary>
            Gets a ShotSnap Helper class for sending ShotSnap <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ShotShockSpin">
            <summary>
            Gets a ShotShockSpin Helper class for sending ShotShockSpin <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            configure the shockSpin effect in shot.  Spin/Lift the character using cheat torques/forces
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ShotFallToKnees">
            <summary>
            Gets a ShotFallToKnees Helper class for sending ShotFallToKnees <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            configure the fall to knees shot.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ShotFromBehind">
            <summary>
            Gets a ShotFromBehind Helper class for sending ShotFromBehind <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            configure the shot from behind reaction
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ShotInGuts">
            <summary>
            Gets a ShotInGuts Helper class for sending ShotInGuts <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            configure the shot in guts reaction
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ShotHeadLook">
            <summary>
            Gets a ShotHeadLook Helper class for sending ShotHeadLook <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ShotConfigureArms">
            <summary>
            Gets a ShotConfigureArms Helper class for sending ShotConfigureArms <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            configure the arm reactions in shot
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.SmartFall">
            <summary>
            Gets a SmartFall Helper class for sending SmartFall <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Clone of High Fall with a wider range of operating conditions.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.StaggerFall">
            <summary>
            Gets a StaggerFall Helper class for sending StaggerFall <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.Teeter">
            <summary>
            Gets a Teeter Helper class for sending Teeter <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.UpperBodyFlinch">
            <summary>
            Gets a UpperBodyFlinch Helper class for sending UpperBodyFlinch <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.Yanked">
            <summary>
            Gets a Yanked Helper class for sending Yanked <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="T:GTA.NaturalMotion.Message">
            <summary>
            A base class for manually building a <see cref="T:GTA.NaturalMotion.Message"/>.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.Message.#ctor(System.String)">
            <summary>
            Creates a class to manually build <see cref="T:GTA.NaturalMotion.Message"/>s that can be sent to any <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="message">The name of the natural motion message.</param>
        </member>
        <member name="M:GTA.NaturalMotion.Message.Abort(GTA.Ped)">
            <summary>
            Stops this Natural Motion behavior on the given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="target">The <see cref="T:GTA.Ped"/> to send the Abort <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="M:GTA.NaturalMotion.Message.SendTo(GTA.Ped)">
            <summary>
            Starts this Natural Motion behavior on the <see cref="T:GTA.Ped"/> that will loop until manually aborted.
            </summary>
            <param name="target">The <see cref="T:GTA.Ped"/> to send the <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="M:GTA.NaturalMotion.Message.SendTo(GTA.Ped,System.Int32)">
            <summary>
            Starts this Natural Motion behavior on the <see cref="T:GTA.Ped"/> for a specified duration.
            </summary>
            <param name="target">The <see cref="T:GTA.Ped"/> to send the <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <param name="duration">How long to apply the behavior for (-1 for looped).</param>
        </member>
        <member name="M:GTA.NaturalMotion.Message.SetArgument(System.String,System.Boolean)">
            <summary>
            Sets a <see cref="T:GTA.NaturalMotion.Message"/> argument to a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="argName">The argument name.</param>
            <param name="value">The value to set the argument to.</param>
        </member>
        <member name="M:GTA.NaturalMotion.Message.SetArgument(System.String,System.Int32)">
            <summary>
            Sets a <see cref="T:GTA.NaturalMotion.Message"/> argument to a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="argName">The argument name.</param>
            <param name="value">The value to set the argument to.</param>
        </member>
        <member name="M:GTA.NaturalMotion.Message.SetArgument(System.String,System.Single)">
            <summary>
            Sets a <see cref="T:GTA.NaturalMotion.Message"/> argument to a <see cref="T:System.Single"/> value.
            </summary>
            <param name="argName">The argument name.</param>
            <param name="value">The value to set the argument to.</param>
        </member>
        <member name="M:GTA.NaturalMotion.Message.SetArgument(System.String,System.String)">
            <summary>
            Sets a <see cref="T:GTA.NaturalMotion.Message"/> argument to a <see cref="T:System.String"/> value.
            </summary>
            <param name="argName">The argument name.</param>
            <param name="value">The value to set the argument to.</param>
        </member>
        <member name="M:GTA.NaturalMotion.Message.SetArgument(System.String,GTA.Math.Vector3)">
            <summary>
            Sets a <see cref="T:GTA.NaturalMotion.Message"/> argument to a <see cref="T:GTA.Math.Vector3"/> value.
            </summary>
            <param name="argName">The argument name.</param>
            <param name="value">The value to set the argument to.</param>
        </member>
        <member name="M:GTA.NaturalMotion.Message.ResetArguments">
            <summary>
            Resets all arguments to their default values.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.Message.ToString">
            <summary>
            Returns the internal message name.
            </summary>
        </member>
        <member name="T:GTA.NaturalMotion.CustomHelper">
            <summary>
            A helper class for building a <seealso cref="T:GTA.NaturalMotion.Message" /> and sending it to a given <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.CustomHelper.#ctor(GTA.Ped,System.String)">
            <summary>
            Creates a helper class for building Natural Motion messages to send to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="target">The <see cref="T:GTA.Ped"/> that the message will be applied to.</param>
            <param name="message">The name of the natural motion message.</param>
        </member>
        <member name="M:GTA.NaturalMotion.CustomHelper.Start">
            <summary>
            Starts this Natural Motion behavior on the <see cref="T:GTA.Ped"/> that will loop until manually aborted.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.CustomHelper.Start(System.Int32)">
            <summary>
            Starts this Natural Motion behavior on the <see cref="T:GTA.Ped"/> for a specified duration.
            </summary>
            <param name="duration">How long to apply the behavior for (-1 for looped).</param>
        </member>
        <member name="M:GTA.NaturalMotion.CustomHelper.Stop">
            <summary>
            Stops this Natural Motion behavior on the <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.CustomHelper.SetArgument(System.String,System.Boolean)">
            <summary>
            Sets a <see cref="T:GTA.NaturalMotion.Message"/> argument to a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="argName">The argument name.</param>
            <param name="value">The value to set the argument to.</param>
        </member>
        <member name="M:GTA.NaturalMotion.CustomHelper.SetArgument(System.String,System.Int32)">
            <summary>
            Sets a <see cref="T:GTA.NaturalMotion.Message"/> argument to a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="argName">The argument name.</param>
            <param name="value">The value to set the argument to.</param>
        </member>
        <member name="M:GTA.NaturalMotion.CustomHelper.SetArgument(System.String,System.Single)">
            <summary>
            Sets a <see cref="T:GTA.NaturalMotion.Message"/> argument to a <see cref="T:System.Single"/> value.
            </summary>
            <param name="argName">The argument name.</param>
            <param name="value">The value to set the argument to.</param>
        </member>
        <member name="M:GTA.NaturalMotion.CustomHelper.SetArgument(System.String,System.String)">
            <summary>
            Sets a <see cref="T:GTA.NaturalMotion.Message"/> argument to a <see cref="T:System.String"/> value.
            </summary>
            <param name="argName">The argument name.</param>
            <param name="value">The value to set the argument to.</param>
        </member>
        <member name="M:GTA.NaturalMotion.CustomHelper.SetArgument(System.String,GTA.Math.Vector3)">
            <summary>
            Sets a <see cref="T:GTA.NaturalMotion.Message"/> argument to a <see cref="T:GTA.Math.Vector3"/> value.
            </summary>
            <param name="argName">The argument name.</param>
            <param name="value">The value to set the argument to.</param>
        </member>
        <member name="M:GTA.NaturalMotion.CustomHelper.ResetArguments">
            <summary>
            Resets all arguments to their default values.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.CustomHelper.ToString">
            <summary>
            Returns the internal message name.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ActivePoseHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ActivePoseHelper for sending a ActivePose <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ActivePose <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ActivePoseHelper.Mask">
            <summary>
            Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  (see notes for explanation).
            </summary>
            <remarks>
            Default value = "fb".
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ActivePoseHelper.UseGravityCompensation">
            <summary>
            Apply gravity compensation.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ActivePoseHelper.AnimSource">
            <summary>
            Animation source.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ApplyImpulseHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ApplyImpulseHelper for sending a ApplyImpulse <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ApplyImpulse <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ApplyImpulseHelper.EqualizeAmount">
            <summary>
            0 means straight impulse, 1 means multiply by the mass (change in velocity).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ApplyImpulseHelper.PartIndex">
            <summary>
            Index of part being hit. -1 apply impulse to COM.
            </summary>
            <remarks>
            Default value = 0.
            Min value = -1.
            Max value = 28.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ApplyImpulseHelper.Impulse">
            <summary>
            Impulse vector (impulse is change in momentum).
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            Min value = -4500.0f.
            Max value = 4500.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ApplyImpulseHelper.HitPoint">
            <summary>
            Optional point on part where hit. If not supplied then the impulse is applied at the part center.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ApplyImpulseHelper.LocalHitPointInfo">
            <summary>
            Hit point in local coordinates of body part.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ApplyImpulseHelper.LocalImpulseInfo">
            <summary>
            Impulse in local coordinates of body part.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ApplyImpulseHelper.AngularImpulse">
            <summary>
            Impulse should be considered an angular impulse.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ApplyBulletImpulseHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ApplyBulletImpulseHelper for sending a ApplyBulletImpulse <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ApplyBulletImpulse <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ApplyBulletImpulseHelper.EqualizeAmount">
            <summary>
            0 means straight impulse, 1 means multiply by the mass (change in velocity).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ApplyBulletImpulseHelper.PartIndex">
            <summary>
            Index of part being hit.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 28.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ApplyBulletImpulseHelper.Impulse">
            <summary>
            Impulse vector (impulse is change in momentum).
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            Min value = -1000.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ApplyBulletImpulseHelper.HitPoint">
            <summary>
            Optional point on part where hit.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ApplyBulletImpulseHelper.LocalHitPointInfo">
            <summary>
            True = hitPoint is in local coordinates of bodyPart, false = hit point is in world coordinates.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ApplyBulletImpulseHelper.ExtraShare">
            <summary>
            If not 0.0 then have an extra bullet applied to spine0 (approximates the COM).  Uses setup from configureBulletsExtra.  0-1 shared 0.0 = no extra bullet, 0.5 = impulse split equally between extra and bullet,  1.0 only extra bullet.  LT 0.0 then bullet + scaled extra bullet.  Eg.-0.5 = bullet + 0.5 impulse extra bullet.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -2.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.BodyRelaxHelper">
            <summary>
            Set the amount of relaxation across the whole body; Used to collapse the character into a rag-doll-like state.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.BodyRelaxHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the BodyRelaxHelper for sending a BodyRelax <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the BodyRelax <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Set the amount of relaxation across the whole body; Used to collapse the character into a rag-doll-like state.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRelaxHelper.Relaxation">
            <summary>
            How relaxed the body becomes, in percentage relaxed. 100 being totally rag-dolled, 0 being very stiff and rigid.
            </summary>
            <remarks>
            Default value = 50.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRelaxHelper.Damping">
            <summary>
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRelaxHelper.Mask">
            <summary>
            Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  (see Active Pose notes for possible values).
            </summary>
            <remarks>
            Default value = "fb.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRelaxHelper.HoldPose">
            <summary>
            Automatically hold the current pose as the character relaxes - can be used to avoid relaxing into a t-pose.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRelaxHelper.DisableJointDriving">
            <summary>
            Sets the drive state to free - this reduces drifting on the ground.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ConfigureBalanceHelper">
            <summary>
            This single message allows you to configure various parameters used on any behavior that uses the dynamic balance.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ConfigureBalanceHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ConfigureBalanceHelper for sending a ConfigureBalance <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ConfigureBalance <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            This single message allows you to configure various parameters used on any behavior that uses the dynamic balance.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.StepHeight">
            <summary>
            Maximum height that character steps vertically (above 0.2 is high ... But OK underwater).
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 0.4f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.StepHeightInc4Step">
            <summary>
            Added to stepHeight if going up steps.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 0.4f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.LegsApartRestep">
            <summary>
            If the legs end up more than (legsApartRestep + hipwidth) apart even though balanced, take another step.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.LegsTogetherRestep">
            <summary>
            Mmmm0.1 for drunk if the legs end up less than (hipwidth - legsTogetherRestep) apart even though balanced, take another step.  A value of 1 will turn off this feature and the max value is hipWidth = 0.23f by default but is model dependent.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.LegsApartMax">
            <summary>
            FRICTION WORKAROUND: if the legs end up more than (legsApartMax + hipwidth) apart when balanced, adjust the feet positions to slide back so they are legsApartMax + hipwidth apart.  Needs to be less than legsApartRestep to see any effect.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.TaperKneeStrength">
            <summary>
            Does the knee strength reduce with angle.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.LegStiffness">
            <summary>
            Stiffness of legs.
            </summary>
            <remarks>
            Default value = 12.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.LeftLegSwingDamping">
            <summary>
            Damping of left leg during swing phase (mmmmDrunk used 1.25 to slow legs movement).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.2f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.RightLegSwingDamping">
            <summary>
            Damping of right leg during swing phase (mmmmDrunk used 1.25 to slow legs movement).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.2f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.OpposeGravityLegs">
            <summary>
            Gravity opposition applied to hips and knees.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.OpposeGravityAnkles">
            <summary>
            Gravity opposition applied to ankles.  General balancer likes 1.0.  StaggerFall likes 0.1.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.LeanAcc">
            <summary>
            Multiplier on the floorAcceleration added to the lean.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.HipLeanAcc">
            <summary>
            Multiplier on the floorAcceleration added to the leanHips.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.LeanAccMax">
            <summary>
            Max floorAcceleration allowed for lean and leanHips.
            </summary>
            <remarks>
            Default value = 5.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.ResistAcc">
            <summary>
            Level of cheat force added to character to resist the effect of floorAcceleration (anti-Acceleration) - added to upperbody.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.ResistAccMax">
            <summary>
            Max floorAcceleration allowed for anti-Acceleration. If  GT 20.0 then it is probably in a crash.
            </summary>
            <remarks>
            Default value = 3.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.FootSlipCompOnMovingFloor">
            <summary>
            This parameter will be removed when footSlipCompensation preserves the foot angle on a moving floor]. If the character detects a moving floor and footSlipCompOnMovingFloor is false then it will turn off footSlipCompensation - at footSlipCompensation preserves the global heading of the feet.  If footSlipCompensation is off then the character usually turns to the side in the end although when turning the vehicle turns it looks promising for a while.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.AnkleEquilibrium">
            <summary>
            Ankle equilibrium angle used when static balancing.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.ExtraFeetApart">
            <summary>
            Additional feet apart setting.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.DontStepTime">
            <summary>
            Amount of time at the start of a balance before the character is allowed to start stepping.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.BalanceAbortThreshold">
            <summary>
            When the character gives up and goes into a fall.  Larger values mean that the balancer can lean more before failing.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.GiveUpHeight">
            <summary>
            Height between lowest foot and COM below which balancer will give up.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.StepClampScale">
            <summary>
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.StepClampScaleVariance">
            <summary>
            Variance in clamp scale every step. If negative only takes away from clampScale.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.PredictionTimeHip">
            <summary>
            Amount of time (seconds) into the future that the character tries to move hip to (kind of).  Will be controlled by balancer in future but can help recover spine quicker from bending forwards to much.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.PredictionTime">
            <summary>
            Amount of time (seconds) into the future that the character tries to step to. Bigger values try to recover with fewer, bigger steps. Smaller values recover with smaller steps, and generally recover less.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.PredictionTimeVariance">
            <summary>
            Variance in predictionTime every step. If negative only takes away from predictionTime.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.MaxSteps">
            <summary>
            Maximum number of steps that the balancer will take.
            </summary>
            <remarks>
            Default value = 100.
            Min value = 1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.MaxBalanceTime">
            <summary>
            Maximum time(seconds) that the balancer will balance for.
            </summary>
            <remarks>
            Default value = 50.0f.
            Min value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.ExtraSteps">
            <summary>
            Allow the balancer to take this many more steps before hitting maxSteps. If negative nothing happens(safe default).
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.ExtraTime">
            <summary>
            Allow the balancer to balance for this many more seconds before hitting maxBalanceTime.  If negative nothing happens(safe default).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.FallType">
            <summary>
            How to fall after maxSteps or maxBalanceTime.
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.FallType.RampDownStiffness"/>.
            If <see cref="F:GTA.NaturalMotion.FallType.Slump"/> BCR has to be active.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.FallMult">
            <summary>
            Multiply the rampDown of stiffness on falling by this amount ( GT 1 fall quicker).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.FallReduceGravityComp">
            <summary>
            Reduce gravity compensation as the legs weaken on falling.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.RampHipPitchOnFail">
            <summary>
            Bend over when falling after maxBalanceTime.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.StableLinSpeedThresh">
            <summary>
            Linear speed threshold for successful balance.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.StableRotSpeedThresh">
            <summary>
            Rotational speed threshold for successful balance.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.FailMustCollide">
            <summary>
            The upper body of the character must be colliding and other failure conditions met to fail.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.IgnoreFailure">
            <summary>
            Ignore maxSteps and maxBalanceTime and try to balance forever.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.ChangeStepTime">
            <summary>
            Time not in contact (airborne) before step is changed. If -ve don't change step.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.BalanceIndefinitely">
            <summary>
            Ignore maxSteps and maxBalanceTime and try to balance forever.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.MovingFloor">
            <summary>
            Temporary variable to ignore movingFloor code that generally causes the character to fall over if the feet probe a moving object e.g. treading on a gun.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.AirborneStep">
            <summary>
            When airborne try to step.  Set to false for e.g. shotGun reaction.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.UseComDirTurnVelThresh">
            <summary>
            Velocity below which the balancer turns in the direction of the COM forward instead of the ComVel - for use with shot from running with high upright constraint use 1.9.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.MinKneeAngle">
            <summary>
            Minimum knee angle (-ve value will mean this functionality is not applied).  0.4 seems a good value.
            </summary>
            <remarks>
            Default value = -0.5f.
            Min value = -0.5f.
            Max value = 1.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.FlatterSwingFeet">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.FlatterStaticFeet">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.AvoidLeg">
            <summary>
            If true then balancer tries to avoid leg2leg collisions/avoid crossing legs. Avoid tries to not step across a line of the inside of the stance leg's foot.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.AvoidFootWidth">
            <summary>
            NB. Very sensitive. Avoid tries to not step across a line of the inside of the stance leg's foot. AvoidFootWidth = how much inwards from the ankle this line is in (m).
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.AvoidFeedback">
            <summary>
            NB. Very sensitive. Avoid tries to not step across a line of the inside of the stance leg's foot. Avoid doesn't allow the desired stepping foot to cross the line.  avoidFeedback = how much of the actual crossing of that line is fedback as an error.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.LeanAgainstVelocity">
            <summary>
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.StepDecisionThreshold">
            <summary>
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.StepIfInSupport">
            <summary>
            The balancer sometimes decides to step even if balanced.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.AlwaysStepWithFarthest">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.StandUp">
            <summary>
            Standup more with increased velocity.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.DepthFudge">
            <summary>
            Supposed to increase foot friction: Impact depth of a collision with the foot is changed when the balancer is running - impact.SetDepth(impact.GetDepth() - depthFudge).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.DepthFudgeStagger">
            <summary>
            Supposed to increase foot friction: Impact depth of a collision with the foot is changed when staggerFall is running - impact.SetDepth(impact.GetDepth() - depthFudgeStagger).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.FootFriction">
            <summary>
            Foot friction multiplier is multiplied by this amount if balancer is running.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 40.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.FootFrictionStagger">
            <summary>
            Foot friction multiplier is multiplied by this amount if staggerFall is running.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 40.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.BackwardsLeanCutoff">
            <summary>
            Backwards lean threshold to cut off stay upright forces. 0.0 Vertical - 1.0 horizontal.  0.6 is a sensible value.  NB: the balancer does not fail in order to give stagger that extra step as it falls.  A backwards lean of GT 0.6 will generally mean the balancer will soon fail without stayUpright forces.
            </summary>
            <remarks>
            Default value = 1.1f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.GiveUpHeightEnd">
            <summary>
            If this value is different from giveUpHeight, actual giveUpHeight will be ramped toward this value.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.BalanceAbortThresholdEnd">
            <summary>
            If this value is different from balanceAbortThreshold, actual balanceAbortThreshold will be ramped toward this value.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.GiveUpRampDuration">
            <summary>
            Duration of ramp from start of behavior for above two parameters. If smaller than 0, no ramp is applied.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.LeanToAbort">
            <summary>
            Lean at which to send abort message when maxSteps or maxBalanceTime is reached.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ConfigureBalanceResetHelper">
            <summary>
            Reset the values configurable by the Configure Balance message to their defaults.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ConfigureBalanceResetHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ConfigureBalanceResetHelper for sending a ConfigureBalanceReset <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ConfigureBalanceReset <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Reset the values configurable by the Configure Balance message to their defaults.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ConfigureSelfAvoidanceHelper">
            <summary>
            This single message allows to configure self avoidance for the character.BBDD Self avoidance tech.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ConfigureSelfAvoidanceHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ConfigureSelfAvoidanceHelper for sending a ConfigureSelfAvoidance <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ConfigureSelfAvoidance <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            This single message allows to configure self avoidance for the character.BBDD Self avoidance tech.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSelfAvoidanceHelper.UseSelfAvoidance">
            <summary>
            Enable or disable self avoidance tech.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSelfAvoidanceHelper.OverwriteDragReduction">
            <summary>
            Specify whether self avoidance tech should use original IK input target or the target that has been already modified by getStabilisedPos() tech i.e. function that compensates for rotational and linear velocity of shoulder/thigh.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSelfAvoidanceHelper.TorsoSwingFraction">
            <summary>
            Place the adjusted target this much along the arc between effector (wrist) and target, value in range [0,1].
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSelfAvoidanceHelper.MaxTorsoSwingAngleRad">
            <summary>
            Max value on the effector (wrist) to adjusted target offset.
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = 0.0f.
            Max value = 1.6f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSelfAvoidanceHelper.SelfAvoidIfInSpineBoundsOnly">
            <summary>
            Restrict self avoidance to operate on targets that are within character torso bounds only.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSelfAvoidanceHelper.SelfAvoidAmount">
            <summary>
            Amount of self avoidance offset applied when angle from effector (wrist) to target is greater then right angle i.e. when total offset is a blend between where effector currently is to value that is a product of total arm length and selfAvoidAmount. SelfAvoidAmount is in a range between [0, 1].
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSelfAvoidanceHelper.OverwriteTwist">
            <summary>
            Overwrite desired IK twist with self avoidance procedural twist.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSelfAvoidanceHelper.UsePolarPathAlgorithm">
            <summary>
            Use the alternative self avoidance algorithm that is based on linear and polar target blending. WARNING: It only requires "radius" in terms of parametrization.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSelfAvoidanceHelper.Radius">
            <summary>
            Self avoidance radius, measured out from the spine axis along the plane perpendicular to that axis. The closer is the proximity of reaching target to that radius, the more polar (curved) motion is used for offsetting the target. WARNING: Parameter only used by the alternative algorithm that is based on linear and polar target blending.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ConfigureBulletsHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ConfigureBulletsHelper for sending a ConfigureBullets <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ConfigureBullets <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseSpreadOverParts">
            <summary>
            Spreads impulse across parts. Currently only for spine parts, not limbs.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseLeakageStrengthScaled">
            <summary>
            For weaker characters subsequent impulses remain strong.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulsePeriod">
            <summary>
            Duration that impulse is spread over (triangular shaped).
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseTorqueScale">
            <summary>
            An impulse applied at a point on a body equivalent to an impulse at the center of the body and a torque.  This parameter scales the torque component. (The torque component seems to be excite the rage looseness bug which sends the character in a sometimes wildly different direction to an applied impulse).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.LoosenessFix">
            <summary>
            Fix the rage looseness bug by applying only the impulse at the center of the body unless it is a spine part then apply the twist component only of the torque as well.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseDelay">
            <summary>
            Time from hit before impulses are being applied.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseReductionPerShot">
            <summary>
            By how much are subsequent impulses reduced (e.g. 0.0: no reduction, 0.1: 10% reduction each new hit).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseRecovery">
            <summary>
            Recovery rate of impulse strength per second (impulse strength from 0.0:1.0).  At 60fps a impulseRecovery=60.0 will recover in 1 frame.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 60.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseMinLeakage">
            <summary>
            The minimum amount of impulse leakage allowed.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.TorqueMode">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.TorqueMode.Disabled"/>.
            If <see cref="F:GTA.NaturalMotion.TorqueMode.Proportional"/> - proportional to character strength, can reduce impulse amount.
            If <see cref="F:GTA.NaturalMotion.TorqueMode.Additive"/> - no reduction of impulse and not proportional to character strength.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.TorqueSpinMode">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.TorqueSpinMode.FromImpulse"/>.
            If <see cref="F:GTA.NaturalMotion.TorqueSpinMode.Flipping"/> a burst effect is achieved.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.TorqueFilterMode">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.TorqueFilterMode.ApplyEveryBullet"/>.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.TorqueAlwaysSpine3">
            <summary>
            Always apply torques to spine3 instead of actual part hit.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.TorqueDelay">
            <summary>
            Time from hit before torques are being applied.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.TorquePeriod">
            <summary>
            Duration of torque.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.TorqueGain">
            <summary>
            Multiplies impulse magnitude to arrive at torque that is applied.
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.TorqueCutoff">
            <summary>
            Minimum ratio of impulse that remains after converting to torque (if in strength-proportional mode).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.TorqueReductionPerTick">
            <summary>
            Ratio of torque for next tick (e.g. 1.0: not reducing over time, 0.9: each tick torque is reduced by 10%).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.LiftGain">
            <summary>
            Amount of lift (directly multiplies torque axis to give lift force).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.CounterImpulseDelay">
            <summary>
            Time after impulse is applied that counter impulse is applied.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.CounterImpulseMag">
            <summary>
            Amount of the original impulse that is countered.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.CounterAfterMagReached">
            <summary>
            Applies the counter impulse counterImpulseDelay(secs) after counterImpulseMag of the Impulse has been applied.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.DoCounterImpulse">
            <summary>
            Add a counter impulse to the pelvis.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.CounterImpulse2Hips">
            <summary>
            Amount of the counter impulse applied to hips - the rest is applied to the part originally hit.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseNoBalMult">
            <summary>
            Amount to scale impulse by if the dynamicBalance is not OK.  1.0 means this functionality is not applied.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseBalStabStart">
            <summary>
            100% LE Start to impulseBalStabMult*100% GT End. NB: Start LT End.
            </summary>
            <remarks>
            Default value = 3.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseBalStabEnd">
            <summary>
            100% LE Start to impulseBalStabMult*100% GT End. NB: Start LT End.
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseBalStabMult">
            <summary>
            100% LE Start to impulseBalStabMult*100% GT End. NB: leaving this as 1.0 means this functionality is not applied and Start and End have no effect.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseSpineAngStart">
            <summary>
            100% GE Start to impulseSpineAngMult*100% LT End. NB: Start GT End.  This the dot of hip2Head with up.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseSpineAngEnd">
            <summary>
            100% GE Start to impulseSpineAngMult*100% LT End. NB: Start GT End.  This the dot of hip2Head with up.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseSpineAngMult">
            <summary>
            100% GE Start to impulseSpineAngMult*100% LT End. NB: leaving this as 1.0 means this functionality is not applied and Start and End have no effect.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseVelStart">
            <summary>
            100% LE Start to impulseVelMult*100% GT End. NB: Start LT End.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseVelEnd">
            <summary>
            100% LE Start to impulseVelMult*100% GT End. NB: Start LT End.
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseVelMult">
            <summary>
            100% LE Start to impulseVelMult*100% GT End. NB: leaving this as 1.0 means this functionality is not applied and Start and End have no effect.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseAirMult">
            <summary>
            Amount to scale impulse by if the character is airborne and dynamicBalance is OK and impulse is above impulseAirMultStart.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseAirMultStart">
            <summary>
            If impulse is above this value scale it by impulseAirMult.
            </summary>
            <remarks>
            Default value = 100.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseAirMax">
            <summary>
            Amount to clamp impulse to if character is airborne  and dynamicBalance is OK.
            </summary>
            <remarks>
            Default value = 100.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseAirApplyAbove">
            <summary>
            If impulse is above this amount then do not scale/clamp just let it through as is - it's a shotgun or cannon.
            </summary>
            <remarks>
            Default value = 399.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseAirOn">
            <summary>
            Scale and/or clamp impulse if the character is airborne and dynamicBalance is OK.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseOneLegMult">
            <summary>
            Amount to scale impulse by if the character is contacting with one foot only and dynamicBalance is OK and impulse is above impulseAirMultStart.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseOneLegMultStart">
            <summary>
            If impulse is above this value scale it by impulseOneLegMult.
            </summary>
            <remarks>
            Default value = 100.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseOneLegMax">
            <summary>
            Amount to clamp impulse to if character is contacting with one foot only  and dynamicBalance is OK.
            </summary>
            <remarks>
            Default value = 100.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseOneLegApplyAbove">
            <summary>
            If impulse is above this amount then do not scale/clamp just let it through as is - it's a shotgun or cannon.
            </summary>
            <remarks>
            Default value = 399.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseOneLegOn">
            <summary>
            Scale and/or clamp impulse if the character is contacting with one leg only and dynamicBalance is OK.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbRatio">
            <summary>
            0.0 no rigidBody response, 0.5 half partForce half rigidBody, 1.0 = no partForce full rigidBody.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbLowerShare">
            <summary>
            Rigid body response is shared between the upper and lower body (rbUpperShare = 1-rbLowerShare). RbLowerShare=0.5 gives upper and lower share scaled by mass.  i.e. if 70% ub mass and 30% lower mass then rbLowerShare=0.5 gives actualrbShare of 0.7ub and 0.3lb. rbLowerShare GT 0.5 scales the ub share down from 0.7 and the lb up from 0.3.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbMoment">
            <summary>
            0.0 only force, 0.5 = force and half the rigid body moment applied, 1.0 = force and full rigidBody moment.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbMaxTwistMomentArm">
            <summary>
            Maximum twist arm moment of bullet applied.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbMaxBroomMomentArm">
            <summary>
            Maximum broom((everything but the twist) arm moment of bullet applied.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbRatioAirborne">
            <summary>
            If Airborne: 0.0 no rigidBody response, 0.5 half partForce half rigidBody, 1.0 = no partForce full rigidBody.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbMomentAirborne">
            <summary>
            If Airborne: 0.0 only force, 0.5 = force and half the rigid body moment applied, 1.0 = force and full rigidBody moment.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbMaxTwistMomentArmAirborne">
            <summary>
            If Airborne: Maximum twist arm moment of bullet applied.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbMaxBroomMomentArmAirborne">
            <summary>
            If Airborne: Maximum broom((everything but the twist) arm moment of bullet applied.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbRatioOneLeg">
            <summary>
            If only one leg in contact: 0.0 no rigidBody response, 0.5 half partForce half rigidBody, 1.0 = no partForce full rigidBody.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbMomentOneLeg">
            <summary>
            If only one leg in contact: 0.0 only force, 0.5 = force and half the rigid body moment applied, 1.0 = force and full rigidBody moment.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbMaxTwistMomentArmOneLeg">
            <summary>
            If only one leg in contact: Maximum twist arm moment of bullet applied.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbMaxBroomMomentArmOneLeg">
            <summary>
            If only one leg in contact: Maximum broom((everything but the twist) arm moment of bullet applied.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbTwistAxis">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.RbTwistAxis.WorldUp"/>.
            </remarks>.
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbPivot">
            <summary>
            If false pivot around COM always, if true change pivot depending on foot contact:  to feet center if both feet in contact, or foot position if 1 foot in contact or COM position if no feet in contact.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ConfigureBulletsExtraHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ConfigureBulletsExtraHelper for sending a ConfigureBulletsExtra <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ConfigureBulletsExtra <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseSpreadOverParts">
            <summary>
            Spreads impulse across parts. Currently only for spine parts, not limbs.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulsePeriod">
            <summary>
            Duration that impulse is spread over (triangular shaped).
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseTorqueScale">
            <summary>
            An impulse applied at a point on a body equivalent to an impulse at the center of the body and a torque.  This parameter scales the torque component. (The torque component seems to be excite the rage looseness bug which sends the character in a sometimes wildly different direction to an applied impulse).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.LoosenessFix">
            <summary>
            Fix the rage looseness bug by applying only the impulse at the center of the body unless it is a spine part then apply the twist component only of the torque as well.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseDelay">
            <summary>
            Time from hit before impulses are being applied.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.TorqueMode">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.TorqueMode.Disabled"/>.
            If <see cref="F:GTA.NaturalMotion.TorqueMode.Proportional"/> - proportional to character strength, can reduce impulse amount.
            If <see cref="F:GTA.NaturalMotion.TorqueMode.Additive"/> - no reduction of impulse and not proportional to character strength.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.TorqueSpinMode">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.TorqueSpinMode.FromImpulse"/>.
            If <see cref="F:GTA.NaturalMotion.TorqueSpinMode.Flipping"/> a burst effect is achieved.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.TorqueFilterMode">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.TorqueFilterMode.ApplyEveryBullet"/>.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.TorqueAlwaysSpine3">
            <summary>
            Always apply torques to spine3 instead of actual part hit.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.TorqueDelay">
            <summary>
            Time from hit before torques are being applied.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.TorquePeriod">
            <summary>
            Duration of torque.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.TorqueGain">
            <summary>
            Multiplies impulse magnitude to arrive at torque that is applied.
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.TorqueCutoff">
            <summary>
            Minimum ratio of impulse that remains after converting to torque (if in strength-proportional mode).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.TorqueReductionPerTick">
            <summary>
            Ratio of torque for next tick (e.g. 1.0: not reducing over time, 0.9: each tick torque is reduced by 10%).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.LiftGain">
            <summary>
            Amount of lift (directly multiplies torque axis to give lift force).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.CounterImpulseDelay">
            <summary>
            Time after impulse is applied that counter impulse is applied.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.CounterImpulseMag">
            <summary>
            Amount of the original impulse that is countered.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.CounterAfterMagReached">
            <summary>
            Applies the counter impulse counterImpulseDelay(secs) after counterImpulseMag of the Impulse has been applied.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.DoCounterImpulse">
            <summary>
            Add a counter impulse to the pelvis.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.CounterImpulse2Hips">
            <summary>
            Amount of the counter impulse applied to hips - the rest is applied to the part originally hit.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseNoBalMult">
            <summary>
            Amount to scale impulse by if the dynamicBalance is not OK.  1.0 means this functionality is not applied.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseBalStabStart">
            <summary>
            100% LE Start to impulseBalStabMult*100% GT End. NB: Start LT End.
            </summary>
            <remarks>
            Default value = 3.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseBalStabEnd">
            <summary>
            100% LE Start to impulseBalStabMult*100% GT End. NB: Start LT End.
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseBalStabMult">
            <summary>
            100% LE Start to impulseBalStabMult*100% GT End. NB: leaving this as 1.0 means this functionality is not applied and Start and End have no effect.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseSpineAngStart">
            <summary>
            100% GE Start to impulseSpineAngMult*100% LT End. NB: Start GT End.  This the dot of hip2Head with up.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseSpineAngEnd">
            <summary>
            100% GE Start to impulseSpineAngMult*100% LT End. NB: Start GT End.  This the dot of hip2Head with up.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseSpineAngMult">
            <summary>
            100% GE Start to impulseSpineAngMult*100% LT End. NB: leaving this as 1.0 means this functionality is not applied and Start and End have no effect.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseVelStart">
            <summary>
            100% LE Start to impulseVelMult*100% GT End. NB: Start LT End.
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseVelEnd">
            <summary>
            100% LE Start to impulseVelMult*100% GT End. NB: Start LT End.
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseVelMult">
            <summary>
            100% LE Start to impulseVelMult*100% GT End. NB: leaving this as 1.0 means this functionality is not applied and Start and End have no effect.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseAirMult">
            <summary>
            Amount to scale impulse by if the character is airborne and dynamicBalance is OK and impulse is above impulseAirMultStart.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseAirMultStart">
            <summary>
            If impulse is above this value scale it by impulseAirMult.
            </summary>
            <remarks>
            Default value = 100.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseAirMax">
            <summary>
            Amount to clamp impulse to if character is airborne  and dynamicBalance is OK.
            </summary>
            <remarks>
            Default value = 100.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseAirApplyAbove">
            <summary>
            If impulse is above this amount then do not scale/clamp just let it through as is - it's a shotgun or cannon.
            </summary>
            <remarks>
            Default value = 399.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseAirOn">
            <summary>
            Scale and/or clamp impulse if the character is airborne and dynamicBalance is OK.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseOneLegMult">
            <summary>
            Amount to scale impulse by if the character is contacting with one foot only and dynamicBalance is OK and impulse is above impulseAirMultStart.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseOneLegMultStart">
            <summary>
            If impulse is above this value scale it by impulseOneLegMult.
            </summary>
            <remarks>
            Default value = 100.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseOneLegMax">
            <summary>
            Amount to clamp impulse to if character is contacting with one foot only  and dynamicBalance is OK.
            </summary>
            <remarks>
            Default value = 100.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseOneLegApplyAbove">
            <summary>
            If impulse is above this amount then do not scale/clamp just let it through as is - it's a shotgun or cannon.
            </summary>
            <remarks>
            Default value = 399.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseOneLegOn">
            <summary>
            Scale and/or clamp impulse if the character is contacting with one leg only and dynamicBalance is OK.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbRatio">
            <summary>
            0.0 no rigidBody response, 0.5 half partForce half rigidBody, 1.0 = no partForce full rigidBody.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbLowerShare">
            <summary>
            Rigid body response is shared between the upper and lower body (rbUpperShare = 1-rbLowerShare). RbLowerShare=0.5 gives upper and lower share scaled by mass.  i.e. if 70% ub mass and 30% lower mass then rbLowerShare=0.5 gives actualrbShare of 0.7ub and 0.3lb. rbLowerShare GT 0.5 scales the ub share down from 0.7 and the lb up from 0.3.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbMoment">
            <summary>
            0.0 only force, 0.5 = force and half the rigid body moment applied, 1.0 = force and full rigidBody moment.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbMaxTwistMomentArm">
            <summary>
            Maximum twist arm moment of bullet applied.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbMaxBroomMomentArm">
            <summary>
            Maximum broom((everything but the twist) arm moment of bullet applied.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbRatioAirborne">
            <summary>
            If Airborne: 0.0 no rigidBody response, 0.5 half partForce half rigidBody, 1.0 = no partForce full rigidBody.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbMomentAirborne">
            <summary>
            If Airborne: 0.0 only force, 0.5 = force and half the rigid body moment applied, 1.0 = force and full rigidBody moment.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbMaxTwistMomentArmAirborne">
            <summary>
            If Airborne: Maximum twist arm moment of bullet applied.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbMaxBroomMomentArmAirborne">
            <summary>
            If Airborne: Maximum broom((everything but the twist) arm moment of bullet applied.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbRatioOneLeg">
            <summary>
            If only one leg in contact: 0.0 no rigidBody response, 0.5 half partForce half rigidBody, 1.0 = no partForce full rigidBody.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbMomentOneLeg">
            <summary>
            If only one leg in contact: 0.0 only force, 0.5 = force and half the rigid body moment applied, 1.0 = force and full rigidBody moment.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbMaxTwistMomentArmOneLeg">
            <summary>
            If only one leg in contact: Maximum twist arm moment of bullet applied.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbMaxBroomMomentArmOneLeg">
            <summary>
            If only one leg in contact: Maximum broom((everything but the twist) arm moment of bullet applied.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbTwistAxis">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.RbTwistAxis.WorldUp"/>.
            </remarks>.
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbPivot">
            <summary>
            If false pivot around COM always, if true change pivot depending on foot contact:  to feet center if both feet in contact, or foot position if 1 foot in contact or COM position if no feet in contact.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ConfigureLimitsHelper">
            <summary>
            Enable/disable/edit character limits in real time.  This adjusts limits in RAGE-native space and will *not* reorient the joint.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ConfigureLimitsHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ConfigureLimitsHelper for sending a ConfigureLimits <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ConfigureLimits <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Enable/disable/edit character limits in real time.  This adjusts limits in RAGE-native space and will *not* reorient the joint.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureLimitsHelper.Mask">
            <summary>
            Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  for joint limits to configure. Ignored if index != -1.
            </summary>
            <remarks>
            Default value = "fb".
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureLimitsHelper.Enable">
            <summary>
            If false, disable (set all to PI, -PI) limits.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureLimitsHelper.ToDesired">
            <summary>
            If true, set limits to accommodate current desired angles.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureLimitsHelper.Restore">
            <summary>
            Return to cached defaults?.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureLimitsHelper.ToCurAnimation">
            <summary>
            If true, set limits to the current animated limits.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureLimitsHelper.Index">
            <summary>
            Index of effector to configure.  Set to -1 to use mask.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureLimitsHelper.Lean1">
            <summary>
            Custom limit values to use if not setting limits to desired. Limits are RAGE-native, not NM-wrapper-native.
            </summary>
            <remarks>
            Default value = 1.6f.
            Min value = 0.0f.
            Max value = 3.1f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureLimitsHelper.Lean2">
            <summary>
            </summary>
            <remarks>
            Default value = 1.6f.
            Min value = 0.0f.
            Max value = 3.1f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureLimitsHelper.Twist">
            <summary>
            </summary>
            <remarks>
            Default value = 1.6f.
            Min value = 0.0f.
            Max value = 3.1f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureLimitsHelper.Margin">
            <summary>
            Joint limit margin to add to current animation limits when using those to set runtime limits.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 3.1f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ConfigureSoftLimitHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ConfigureSoftLimitHelper for sending a ConfigureSoftLimit <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ConfigureSoftLimit <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSoftLimitHelper.Index">
            <summary>
            Select limb that the soft limit is going to be applied to.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 3.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSoftLimitHelper.Stiffness">
            <summary>
            Stiffness of the soft limit.
            Parameter is used to calculate spring term that contributes to the desired acceleration.
            </summary>
            <remarks>
            Default value = 15.0f.
            Min value = 0.0f.
            Max value = 30.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSoftLimitHelper.Damping">
            <summary>
            Damping of the soft limit.
            Parameter is used to calculate damper term that contributes to the desired acceleration.
            To have the system critically dampened set it to 1.0.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.9f.
            Max value = 1.1f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSoftLimitHelper.LimitAngle">
            <summary>
            Soft limit angle.
            Positive angle in RAD, measured relatively either from hard limit maxAngle (approach direction = -1) or minAngle (approach direction = 1).
            This angle will be clamped if outside the joint hard limit range.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 6.3f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSoftLimitHelper.ApproachDirection">
            <summary>
            Limit angle can be measured relatively to joints hard limit minAngle or maxAngle.
            Set it to +1 to measure soft limit angle relatively to hard limit minAngle that corresponds to the maximum stretch of the elbow.
            Set it to -1 to measure soft limit angle relatively to hard limit maxAngle that corresponds to the maximum stretch of the knee.
            </summary>
            <remarks>
            Default value = 1.
            Min value = -1.
            Max value = 1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSoftLimitHelper.VelocityScaled">
            <summary>
            Scale stiffness based on character angular velocity.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ConfigureShotInjuredArmHelper">
            <summary>
            This single message allows you to configure the injured arm reaction during shot.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ConfigureShotInjuredArmHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ConfigureShotInjuredArmHelper for sending a ConfigureShotInjuredArm <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ConfigureShotInjuredArm <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            This single message allows you to configure the injured arm reaction during shot.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredArmHelper.InjuredArmTime">
            <summary>
            Length of the reaction.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredArmHelper.HipYaw">
            <summary>
            Amount of hip twist.  (Negative values twist into bullet direction - probably not what is wanted).
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = -2.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredArmHelper.HipRoll">
            <summary>
            Amount of hip roll.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -2.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredArmHelper.ForceStepExtraHeight">
            <summary>
            Additional height added to stepping foot.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 0.7f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredArmHelper.ForceStep">
            <summary>
            Force a step to be taken whether pushed out of balance or not.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredArmHelper.StepTurn">
            <summary>
            Turn the character using the balancer.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredArmHelper.VelMultiplierStart">
            <summary>
            Start velocity where parameters begin to be ramped down to zero linearly.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredArmHelper.VelMultiplierEnd">
            <summary>
            End velocity of ramp where parameters are scaled to zero.
            </summary>
            <remarks>
            Default value = 5.0f.
            Min value = 1.0f.
            Max value = 40.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredArmHelper.VelForceStep">
            <summary>
            Velocity above which a step is not forced.
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredArmHelper.VelStepTurn">
            <summary>
            Velocity above which a stepTurn is not asked for.
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredArmHelper.VelScales">
            <summary>
            Use the velocity scaling parameters.
            Tune for standing still then use velocity scaling to make sure a running character stays balanced (the turning tends to make the character fall over more at speed).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ConfigureShotInjuredLegHelper">
            <summary>
            This single message allows you to configure the injured leg reaction during shot.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ConfigureShotInjuredLegHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ConfigureShotInjuredLegHelper for sending a ConfigureShotInjuredLeg <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ConfigureShotInjuredLeg <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            This single message allows you to configure the injured leg reaction during shot.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredLegHelper.TimeBeforeCollapseWoundLeg">
            <summary>
            Time before a wounded leg is set to be weak and cause the character to collapse.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredLegHelper.LegInjuryTime">
            <summary>
            Leg injury duration (reaction to being shot in leg).
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredLegHelper.LegForceStep">
            <summary>
            Force a step to be taken whether pushed out of balance or not.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredLegHelper.LegLimpBend">
            <summary>
            Bend the legs via the balancer by this amount if stepping on the injured leg.
            0.2 seems a good default.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredLegHelper.LegLiftTime">
            <summary>
            Leg lift duration (reaction to being shot in leg).
            (Lifting happens when not stepping with other leg).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredLegHelper.LegInjury">
            <summary>
            Leg injury - leg strength is reduced.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredLegHelper.LegInjuryHipPitch">
            <summary>
            Leg injury bend forwards amount when not lifting leg.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredLegHelper.LegInjuryLiftHipPitch">
            <summary>
            Leg injury bend forwards amount when lifting leg.
            (Lifting happens when not stepping with other leg).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredLegHelper.LegInjurySpineBend">
            <summary>
            Leg injury bend forwards amount when not lifting leg.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredLegHelper.LegInjuryLiftSpineBend">
            <summary>
            Leg injury bend forwards amount when lifting leg.
            (Lifting happens when not stepping with other leg).
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.DefineAttachedObjectHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the DefineAttachedObjectHelper for sending a DefineAttachedObject <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the DefineAttachedObject <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.DefineAttachedObjectHelper.PartIndex">
            <summary>
            Index of part to attach to.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            Max value = 21.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.DefineAttachedObjectHelper.ObjectMass">
            <summary>
            Mass of the attached object.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.DefineAttachedObjectHelper.WorldPos">
            <summary>
            World position of attached object's center of mass. Must be updated each frame.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ForceToBodyPartHelper">
            <summary>
            Apply an impulse to a named body part.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ForceToBodyPartHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ForceToBodyPartHelper for sending a ForceToBodyPart <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ForceToBodyPart <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Apply an impulse to a named body part.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceToBodyPartHelper.PartIndex">
            <summary>
            Part or link or bound index.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 28.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceToBodyPartHelper.Force">
            <summary>
            Force to apply.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, -50.0f, 0.0f).
            Min value = -100000.0f.
            Max value = 100000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceToBodyPartHelper.ForceDefinedInPartSpace">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.LeanInDirectionHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the LeanInDirectionHelper for sending a LeanInDirection <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the LeanInDirection <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.LeanInDirectionHelper.LeanAmount">
            <summary>
            Amount of lean, 0 to about 0.5. -ve will move away from the target.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.LeanInDirectionHelper.Dir">
            <summary>
            Direction to lean in.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 1.0f).
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.LeanRandomHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the LeanRandomHelper for sending a LeanRandom <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the LeanRandom <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.LeanRandomHelper.LeanAmountMin">
            <summary>
            Minimum amount of lean.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.LeanRandomHelper.LeanAmountMax">
            <summary>
            Maximum amount of lean.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.LeanRandomHelper.ChangeTimeMin">
            <summary>
            Minimum time until changing direction.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.LeanRandomHelper.ChangeTimeMax">
            <summary>
            Maximum time until changing direction.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.LeanToPositionHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the LeanToPositionHelper for sending a LeanToPosition <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the LeanToPosition <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.LeanToPositionHelper.LeanAmount">
            <summary>
            Amount of lean, 0 to about 0.5. -ve will move away from the target.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -0.5f.
            Max value = 0.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.LeanToPositionHelper.Pos">
            <summary>
            Position to head towards.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.LeanTowardsObjectHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the LeanTowardsObjectHelper for sending a LeanTowardsObject <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the LeanTowardsObject <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.LeanTowardsObjectHelper.LeanAmount">
            <summary>
            Amount of lean, 0 to about 0.5. -ve will move away from the target.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -0.5f.
            Max value = 0.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.LeanTowardsObjectHelper.Offset">
            <summary>
            Offset from instance position added when calculating position to lean to.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            Min value = -100.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.LeanTowardsObjectHelper.InstanceIndex">
            <summary>
            LevelIndex of object to lean towards.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.LeanTowardsObjectHelper.BoundIndex">
            <summary>
            BoundIndex of object to lean towards (0 = just use instance coordinates).
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.HipsLeanInDirectionHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the HipsLeanInDirectionHelper for sending a HipsLeanInDirection <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the HipsLeanInDirection <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.HipsLeanInDirectionHelper.LeanAmount">
            <summary>
            Amount of lean, 0 to about 0.5. -ve will move away from the target.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HipsLeanInDirectionHelper.Dir">
            <summary>
            Direction to lean in.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 1.0f).
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.HipsLeanRandomHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the HipsLeanRandomHelper for sending a HipsLeanRandom <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the HipsLeanRandom <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.HipsLeanRandomHelper.LeanAmountMin">
            <summary>
            Minimum amount of lean.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HipsLeanRandomHelper.LeanAmountMax">
            <summary>
            Maximum amount of lean.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HipsLeanRandomHelper.ChangeTimeMin">
            <summary>
            Min time until changing direction.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HipsLeanRandomHelper.ChangeTimeMax">
            <summary>
            Maximum time until changing direction.
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.HipsLeanToPositionHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the HipsLeanToPositionHelper for sending a HipsLeanToPosition <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the HipsLeanToPosition <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.HipsLeanToPositionHelper.LeanAmount">
            <summary>
            Amount of lean, 0 to about 0.5. -ve will move away from the target.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -0.5f.
            Max value = 0.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HipsLeanToPositionHelper.Pos">
            <summary>
            Position to head towards.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.HipsLeanTowardsObjectHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the HipsLeanTowardsObjectHelper for sending a HipsLeanTowardsObject <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the HipsLeanTowardsObject <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.HipsLeanTowardsObjectHelper.LeanAmount">
            <summary>
            Amount of lean, 0 to about 0.5. -ve will move away from the target.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -0.5f.
            Max value = 0.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HipsLeanTowardsObjectHelper.Offset">
            <summary>
            Offset from instance position added when calculating position to lean to.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            Min value = -100.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HipsLeanTowardsObjectHelper.InstanceIndex">
            <summary>
            LevelIndex of object to lean hips towards.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HipsLeanTowardsObjectHelper.BoundIndex">
            <summary>
            BoundIndex of object to lean hips towards (0 = just use instance coordinates).
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ForceLeanInDirectionHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ForceLeanInDirectionHelper for sending a ForceLeanInDirection <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ForceLeanInDirection <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanInDirectionHelper.LeanAmount">
            <summary>
            Amount of lean, 0 to about 0.5. -ve will move away from the target.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanInDirectionHelper.Dir">
            <summary>
            Direction to lean in.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 1.0f).
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanInDirectionHelper.BodyPart">
            <summary>
            Body part that the force is applied to.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 21.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ForceLeanRandomHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ForceLeanRandomHelper for sending a ForceLeanRandom <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ForceLeanRandom <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanRandomHelper.LeanAmountMin">
            <summary>
            Minimum amount of lean.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanRandomHelper.LeanAmountMax">
            <summary>
            Maximum amount of lean.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanRandomHelper.ChangeTimeMin">
            <summary>
            Min time until changing direction.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanRandomHelper.ChangeTimeMax">
            <summary>
            Maximum time until changing direction.
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanRandomHelper.BodyPart">
            <summary>
            Body part that the force is applied to.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 21.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ForceLeanToPositionHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ForceLeanToPositionHelper for sending a ForceLeanToPosition <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ForceLeanToPosition <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanToPositionHelper.LeanAmount">
            <summary>
            Amount of lean, 0 to about 0.5. -ve will move away from the target.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -0.5f.
            Max value = 0.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanToPositionHelper.Pos">
            <summary>
            Position to head towards.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanToPositionHelper.BodyPart">
            <summary>
            Body part that the force is applied to.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 21.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ForceLeanTowardsObjectHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ForceLeanTowardsObjectHelper for sending a ForceLeanTowardsObject <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ForceLeanTowardsObject <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanTowardsObjectHelper.LeanAmount">
            <summary>
            Amount of lean, 0 to about 0.5. -ve will move away from the target.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -0.5f.
            Max value = 0.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanTowardsObjectHelper.Offset">
            <summary>
            Offset from instance position added when calculating position to lean to.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            Min value = -100.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanTowardsObjectHelper.InstanceIndex">
            <summary>
            LevelIndex of object to move towards.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanTowardsObjectHelper.BoundIndex">
            <summary>
            BoundIndex of object to move towards (0 = just use instance coordinates).
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanTowardsObjectHelper.BodyPart">
            <summary>
            Body part that the force is applied to.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 21.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.SetStiffnessHelper">
            <summary>
            Use this message to manually set the body stiffness values -before using Active Pose to drive to an animated pose, for example.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.SetStiffnessHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the SetStiffnessHelper for sending a SetStiffness <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the SetStiffness <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Use this message to manually set the body stiffness values -before using Active Pose to drive to an animated pose, for example.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetStiffnessHelper.BodyStiffness">
            <summary>
            Stiffness of whole character.
            </summary>
            <remarks>
            Default value = 12.0f.
            Min value = 2.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetStiffnessHelper.Damping">
            <summary>
            Damping amount, less is underdamped.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetStiffnessHelper.Mask">
            <summary>
            Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  (see Active Pose notes for possible values).
            </summary>
            <remarks>
            Default value = "fb".
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.SetMuscleStiffnessHelper">
            <summary>
            Use this message to manually set the muscle stiffness values -before using Active Pose to drive to an animated pose, for example.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.SetMuscleStiffnessHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the SetMuscleStiffnessHelper for sending a SetMuscle stiffness <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the SetMuscle stiffness <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Use this message to manually set the muscle stiffness values -before using Active Pose to drive to an animated pose, for example.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetMuscleStiffnessHelper.MuscleStiffness">
            <summary>
            Muscle stiffness of joint/s.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetMuscleStiffnessHelper.Mask">
            <summary>
            Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  (see Active Pose notes for possible values).
            </summary>
            <remarks>
            Default value = "fb".
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.SetWeaponModeHelper">
            <summary>
            Use this message to set the character's weapon mode.  This is an alternativeto the setWeaponMode public function.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.SetWeaponModeHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the SetWeaponModeHelper for sending a SetWeaponMode <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the SetWeaponMode <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Use this message to set the character's weapon mode.  This is an alternativeto the setWeaponMode public function.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetWeaponModeHelper.WeaponMode">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.WeaponMode.PistolRight"/>.
            </remarks>.
        </member>
        <member name="T:GTA.NaturalMotion.RegisterWeaponHelper">
            <summary>
            Use this message to register weapon.  This is an alternativeto the registerWeapon public function.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.RegisterWeaponHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the RegisterWeaponHelper for sending a RegisterWeapon <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the RegisterWeapon <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Use this message to register weapon.  This is an alternativeto the registerWeapon public function.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RegisterWeaponHelper.Hand">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.Hand.Right"/>.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RegisterWeaponHelper.LevelIndex">
            <summary>
            Level index of the weapon.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RegisterWeaponHelper.ConstraintHandle">
            <summary>
            Pointer to the hand-gun constraint handle.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RegisterWeaponHelper.GunToHandA">
            <summary>
            A vector of the gunToHand matrix.  The gunToHandMatrix is the desired gunToHandMatrix in the aimingPose. (The gunToHandMatrix when pointGun starts can be different so will be blended to this desired one).
            </summary>
            <remarks>
            Default value = Vector3(1.0f, 0.0f, 0.0f).
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RegisterWeaponHelper.GunToHandB">
            <summary>
            B vector of the gunToHand matrix.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 1.0f, 0.0f).
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RegisterWeaponHelper.GunToHandC">
            <summary>
            C vector of the gunToHand matrix.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 1.0f).
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RegisterWeaponHelper.GunToHandD">
            <summary>
            D vector of the gunToHand matrix.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RegisterWeaponHelper.GunToMuzzleInGun">
            <summary>
            Gun center to muzzle expressed in gun co-ordinates.  To get the line of sight/barrel of the gun. Assumption: the muzzle direction is always along the same primary axis of the gun.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RegisterWeaponHelper.GunToButtInGun">
            <summary>
            Gun center to butt expressed in gun co-ordinates.  The gun pivots around this point when aiming.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ShotRelaxHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ShotRelaxHelper for sending a ShotRelax <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ShotRelax <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ShotRelaxHelper.RelaxPeriodUpper">
            <summary>
            Time over which to relax to full relaxation for upper body.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 40.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotRelaxHelper.RelaxPeriodLower">
            <summary>
            Time over which to relax to full relaxation for lower body.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 40.0f.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.FireWeaponHelper">
            <summary>
            One shot message apply a force to the hand as we fire the gun that should be in this hand.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.FireWeaponHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the FireWeaponHelper for sending a FireWeapon <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the FireWeapon <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            One shot message apply a force to the hand as we fire the gun that should be in this hand.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FireWeaponHelper.FiredWeaponStrength">
            <summary>
            The force of the gun.
            </summary>
            <remarks>
            Default value = 1000.0f.
            Min value = 0.0f.
            Max value = 10000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FireWeaponHelper.GunHandEnum">
            <summary>
            Which hand is the gun in.
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.Hand.Left"/>.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FireWeaponHelper.ApplyFireGunForceAtClavicle">
            <summary>
            Should we apply some of the force at the shoulder. Force double handed weapons (Ak47 etc).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FireWeaponHelper.InhibitTime">
            <summary>
            Minimum time before next fire impulse.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FireWeaponHelper.Direction">
            <summary>
            Direction of impulse in gun frame.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FireWeaponHelper.Split">
            <summary>
            Split force between hand and clavicle when applyFireGunForceAtClavicle is true. 1 = all hand, 0 = all clavicle.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ConfigureConstraintsHelper">
            <summary>
            One shot to give state of constraints on character and response to constraints.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ConfigureConstraintsHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ConfigureConstraintsHelper for sending a ConfigureConstraints <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ConfigureConstraints <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            One shot to give state of constraints on character and response to constraints.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureConstraintsHelper.HandCuffs">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureConstraintsHelper.HandCuffsBehindBack">
            <summary>
            Not implemented.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureConstraintsHelper.LegCuffs">
            <summary>
            Not implemented.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureConstraintsHelper.RightDominant">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureConstraintsHelper.PassiveMode">
            <summary>
            0 setCurrent, 1= IK to dominant, (2=pointGunLikeIK //not implemented).
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 5.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureConstraintsHelper.BespokeBehavior">
            <summary>
            Not implemented.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureConstraintsHelper.Blend2ZeroPose">
            <summary>
            Blend Arms to zero pose.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.StayUprightHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the StayUprightHelper for sending a StayUpright <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the StayUpright <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.UseForces">
            <summary>
            Enable force based constraint.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.UseTorques">
            <summary>
            Enable torque based constraint.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.LastStandMode">
            <summary>
            Uses position/orientation control on the spine and drifts in the direction of bullets.  This ignores all other stayUpright settings.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.LastStandSinkRate">
            <summary>
            The sink rate (higher for a faster drop).
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.LastStandHorizDamping">
            <summary>
            Higher values for more damping.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.LastStandMaxTime">
            <summary>
            Max time allowed in last stand mode.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.TurnTowardsBullets">
            <summary>
            Use cheat torques to face the direction of bullets if not facing too far away.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.VelocityBased">
            <summary>
            Make strength of constraint function of COM velocity.  Uses -1 for forceDamping if the damping is positive.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.TorqueOnlyInAir">
            <summary>
            Only apply torque based constraint when airBorne.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.ForceStrength">
            <summary>
            Strength of constraint.
            </summary>
            <remarks>
            Default value = 3.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.ForceDamping">
            <summary>
            Damping in constraint: -1 makes it scale automagically with forceStrength.  Other negative values will scale this automagic damping.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 50.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.ForceFeetMult">
            <summary>
            Multiplier to the force applied to the feet.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.ForceSpine3Share">
            <summary>
            Share of pelvis force applied to spine3.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.ForceLeanReduction">
            <summary>
            How much the character lean is taken into account when reducing the force.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.ForceInAirShare">
            <summary>
            Share of the feet force to the airborne foot.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.ForceMin">
            <summary>
            When min and max are greater than 0 the constraint strength is determined from character strength, scaled into the range given by min and max.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.ForceMax">
            <summary>
            See above.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.ForceSaturationVel">
            <summary>
            When in velocityBased mode, the COM velocity at which constraint reaches maximum strength (forceStrength).
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.1f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.ForceThresholdVel">
            <summary>
            When in velocityBased mode, the COM velocity above which constraint starts applying forces.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.TorqueStrength">
            <summary>
            Strength of torque based constraint.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.TorqueDamping">
            <summary>
            Damping of torque based constraint.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.TorqueSaturationVel">
            <summary>
            When in velocityBased mode, the COM velocity at which constraint reaches maximum strength (torqueStrength).
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.1f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.TorqueThresholdVel">
            <summary>
            When in velocityBased mode, the COM velocity above which constraint starts applying torques.
            </summary>
            <remarks>
            Default value = 2.5f.
            Min value = 0.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.SupportPosition">
            <summary>
            Distance the foot is behind Com projection that is still considered able to generate the support for the upright constraint.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = -2.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.NoSupportForceMult">
            <summary>
            Still apply this fraction of the upright constaint force if the foot is not in a position (defined by supportPosition) to generate the support for the upright constraint.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.StepUpHelp">
            <summary>
            Strength of cheat force applied upwards to spine3 to help the character up steps/slopes.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.StayUpAcc">
            <summary>
            How much the cheat force takes into account the acceleration of moving platforms.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.StayUpAccMax">
            <summary>
            The maximum floorAcceleration (of a moving platform) that the cheat force takes into account.
            </summary>
            <remarks>
            Default value = 5.0f.
            Min value = 0.0f.
            Max value = 15.0f.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.StopAllBehaviorsHelper">
            <summary>
            Send this message to immediately stop all behaviors from executing.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.StopAllBehaviorsHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the StopAllBehaviorsHelper for sending a StopAllBehaviors <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the StopAllBehaviors <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Send this message to immediately stop all behaviors from executing.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.SetCharacterStrengthHelper">
            <summary>
            Sets character's strength on the dead-granny-to-healthy-terminator scale: [0..1].
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.SetCharacterStrengthHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the SetCharacterStrengthHelper for sending a SetCharacterStrength <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the SetCharacterStrength <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Sets character's strength on the dead-granny-to-healthy-terminator scale: [0..1].
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterStrengthHelper.CharacterStrength">
            <summary>
            Strength of character.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.SetCharacterHealthHelper">
            <summary>
            Sets character's health on the dead-to-alive scale: [0..1].
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.SetCharacterHealthHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the SetCharacterHealthHelper for sending a SetCharacterHealth <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the SetCharacterHealth <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Sets character's health on the dead-to-alive scale: [0..1].
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterHealthHelper.CharacterHealth">
            <summary>
            Health of character.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.SetFallingReactionHelper">
            <summary>
            Sets the type of reaction if catchFall is called.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.SetFallingReactionHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the SetFallingReactionHelper for sending a SetFallingReaction <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the SetFallingReaction <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Sets the type of reaction if catchFall is called.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.HandsAndKnees">
            <summary>
            Set to true to get handsAndKnees catchFall if catchFall called. If true allows the dynBalancer to stay on during the catchfall and modifies the catch fall to give a more alive looking performance (hands and knees for front landing or sitting up for back landing).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.CallRDS">
            <summary>
            If true catchFall will call rollDownstairs if comVel GT comVelRDSThresh - prevents excessive sliding in catchFall.  Was previously only true for handsAndKnees.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.ComVelRDSThresh">
            <summary>
            ComVel above which rollDownstairs will start - prevents excessive sliding in catchFall.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.ResistRolling">
            <summary>
            For rds catchFall only: True to resist rolling motion (rolling motion is set off by ub contact and a sliding velocity), false to allow more of a continuous rolling  (rolling motion is set off at a sliding velocity).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.ArmReduceSpeed">
            <summary>
            Strength is reduced in the catchFall when the arms contact the ground.  0.2 is good for handsAndKnees.  2.5 is good for normal catchFall, anything lower than 1.0 for normal catchFall may lead to bad catchFall poses.
            </summary>
            <remarks>
            Default value = 2.5f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.ReachLengthMultiplier">
            <summary>
            Reach length multiplier that scales characters arm topological length, value in range from (0, 1 GT  where 1.0 means reach length is maximum.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.3f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.InhibitRollingTime">
            <summary>
            Time after hitting ground that the catchFall can call rds.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.ChangeFrictionTime">
            <summary>
            Time after hitting ground that the catchFall can change the friction of parts to inhibit sliding.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.GroundFriction">
            <summary>
            8.0 was used on yanked) Friction multiplier on body parts when on ground.  Character can look too slidy with groundFriction = 1.  Higher values give a more jerky reaction but this seems timestep dependent especially for dragged by the feet.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.FrictionMin">
            <summary>
            Min Friction of an impact with a body part (not head, hands or feet) - to increase friction of slippy environment to get character to roll better.  Applied in catchFall and rollUp(rollDownStairs).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.FrictionMax">
            <summary>
            Max Friction of an impact with a body part (not head, hands or feet) - to increase friction of slippy environment to get character to roll better.  Applied in catchFall and rollUp(rollDownStairs).
            </summary>
            <remarks>
            Default value = 9999.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.StopOnSlopes">
            <summary>
            Apply tactics to help stop on slopes.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.StopManual">
            <summary>
            Override slope value to manually force stopping on flat ground.  Encourages character to come to rest face down or face up.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.StoppedStrengthDecay">
            <summary>
            Speed at which strength reduces when stopped.
            </summary>
            <remarks>
            Default value = 5.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.SpineLean1Offset">
            <summary>
            Bias spine post towards hunched (away from arched).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.RiflePose">
            <summary>
            Hold rifle in a safe position to reduce complications with collision.  Only applied if holding a rifle.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.HkHeadAvoid">
            <summary>
            Enable head ground avoidance when handsAndKnees is true.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.AntiPropClav">
            <summary>
            Discourage the character getting stuck propped up by elbows when falling backwards - by inhibiting backwards moving clavicles (keeps the arms slightly wider).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.AntiPropWeak">
            <summary>
            Discourage the character getting stuck propped up by elbows when falling backwards - by weakening the arms as soon they hit the floor.  (Also stops the hands lifting up when flat on back).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.HeadAsWeakAsArms">
            <summary>
            Head weakens as arms weaken. If false and antiPropWeak when falls onto back doesn't loosen neck so early (matches bodyStrength instead).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.SuccessStrength">
            <summary>
            When bodyStrength is less than successStrength send a success feedback - DO NOT GO OUTSIDE MIN/MAX PARAMETER VALUES OTHERWISE NO SUCCESS FEEDBACK WILL BE SENT.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.3f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.SetCharacterUnderwaterHelper">
            <summary>
            Sets viscosity applied to damping limbs.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.SetCharacterUnderwaterHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the SetCharacterUnderwaterHelper for sending a SetCharacterUnderwater <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the SetCharacterUnderwater <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Sets viscosity applied to damping limbs.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterUnderwaterHelper.Underwater">
            <summary>
            Is character underwater?.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterUnderwaterHelper.Viscosity">
            <summary>
            Viscosity applied to character's parts.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterUnderwaterHelper.GravityFactor">
            <summary>
            Gravity factor applied to character.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = -10.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterUnderwaterHelper.Stroke">
            <summary>
            Swimming force applied to character as a function of handVelocity and footVelocity.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1000.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterUnderwaterHelper.LinearStroke">
            <summary>
            Swimming force (linearStroke=true,False) = (f(v),f(v*v)).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.SetCharacterCollisionsHelper">
            <summary>
            SetCharacterCollisions:.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.SetCharacterCollisionsHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the SetCharacterCollisionsHelper for sending a SetCharacterCollisions <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the SetCharacterCollisions <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            SetCharacterCollisions:.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterCollisionsHelper.Spin">
            <summary>
            Sliding friction turned into spin 80.0 (used in demo videos) good for rest of default params below.  If 0.0 then no collision enhancement.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterCollisionsHelper.MaxVelocity">
            <summary>
            Torque = spin*(relative velocity) up to this maximum for relative velocity.
            </summary>
            <remarks>
            Default value = 8.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterCollisionsHelper.ApplyToAll">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterCollisionsHelper.ApplyToSpine">
            <summary>
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterCollisionsHelper.ApplyToThighs">
            <summary>
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterCollisionsHelper.ApplyToClavicles">
            <summary>
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterCollisionsHelper.ApplyToUpperArms">
            <summary>
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterCollisionsHelper.FootSlip">
            <summary>
            Allow foot slipping if collided.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterCollisionsHelper.VehicleClass">
            <summary>
            ClassType of the object against which to enhance the collision.  All character vehicle interaction (e.g. braceForImpact glancing spins) relies on this value so EDIT WISELY. If it is used for things other than vehicles then NM should be informed.
            </summary>
            <remarks>
            Default value = 15.
            Min value = 0.
            Max value = 100.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.SetCharacterDampingHelper">
            <summary>
            Damp out cartwheeling and somersaulting above a certain threshold.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.SetCharacterDampingHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the SetCharacterDampingHelper for sending a SetCharacterDamping <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the SetCharacterDamping <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Damp out cartwheeling and somersaulting above a certain threshold.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterDampingHelper.SomersaultThresh">
            <summary>
            Somersault AngularMomentum measure above which we start damping - try 34.0.  Falling over straight backwards gives 54 on hitting ground.
            </summary>
            <remarks>
            Default value = 34.0f.
            Min value = 0.0f.
            Max value = 200.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterDampingHelper.SomersaultDamp">
            <summary>
            Amount to damp somersaulting by (spinning around left/right axis) - try 0.45.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterDampingHelper.CartwheelThresh">
            <summary>
            Cartwheel AngularMomentum measure above which we start damping - try 27.0.
            </summary>
            <remarks>
            Default value = 27.0f.
            Min value = 0.0f.
            Max value = 200.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterDampingHelper.CartwheelDamp">
            <summary>
            Amount to damp somersaulting by (spinning around front/back axis) - try 0.8.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterDampingHelper.VehicleCollisionTime">
            <summary>
            Time after impact with a vehicle to apply characterDamping. -ve values mean always apply whether collided with vehicle or not. =0.0 never apply. =timestep apply for only that frame.  A typical roll from being hit by a car lasts about 4secs.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterDampingHelper.V2">
            <summary>
            If true damping is proportional to Angular momentum squared.  If false proportional to Angular momentum.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.SetFrictionScaleHelper">
            <summary>
            SetFrictionScale:.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.SetFrictionScaleHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the SetFrictionScaleHelper for sending a SetFrictionScale <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the SetFrictionScale <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            SetFrictionScale:.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFrictionScaleHelper.Scale">
            <summary>
            Friction scale to be applied to parts in mask.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFrictionScaleHelper.GlobalMin">
            <summary>
            Character-wide minimum impact friction. Affects all parts (not just those in mask).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1000000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFrictionScaleHelper.GlobalMax">
            <summary>
            Character-wide maximum impact friction. Affects all parts (not just those in mask).
            </summary>
            <remarks>
            Default value = 999999.0f.
            Min value = 0.0f.
            Max value = 1000000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFrictionScaleHelper.Mask">
            <summary>
            Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  (see Active Pose notes for possible values).
            </summary>
            <remarks>
            Default value = "fb".
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.AnimPoseHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the AnimPoseHelper for sending a AnimPose <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the AnimPose <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.MuscleStiffness">
            <summary>
            Muscle stiffness of masked joints. -values mean don't apply (just use defaults or ones applied by behaviors - safer if you are going to return to a behavior).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.1f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.Stiffness">
            <summary>
            Stiffness of masked joints. -ve values mean don't apply stiffness or damping (just use defaults or ones applied by behaviors).  If you are using animpose fullbody on its own then this gives the opprtunity to use setStffness and setMuscle stiffness messages to set up the character's muscles. Mmmmtodo get rid of this -ve.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.1f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.Damping">
            <summary>
            Damping of masked joints.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.EffectorMask">
            <summary>
            Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  (see notes for explanation).
            </summary>
            <remarks>
            Default value = "ub".
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.OverideHeadlook">
            <summary>
            Overide Headlook behavior (if animPose includes the head).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.OveridePointArm">
            <summary>
            Overide PointArm behavior (if animPose includes the arm/arms).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.OveridePointGun">
            <summary>
            Overide PointGun behavior (if animPose includes the arm/arms)//mmmmtodo not used at moment.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.UseZMPGravityCompensation">
            <summary>
            If true then modify gravity compensation based on stance (can reduce gravity compensation to zero if cofm is outside of balance area).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.GravityCompensation">
            <summary>
            Gravity compensation applied to joints in the effectorMask. If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 14.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.MuscleStiffnessLeftArm">
            <summary>
            Muscle stiffness applied to left arm (applied after stiffness). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.MuscleStiffnessRightArm">
            <summary>
            Muscle stiffness applied to right arm (applied after stiffness). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.MuscleStiffnessSpine">
            <summary>
            Muscle stiffness applied to spine (applied after stiffness). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.MuscleStiffnessLeftLeg">
            <summary>
            Muscle stiffness applied to left leg (applied after stiffness). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.MuscleStiffnessRightLeg">
            <summary>
            Muscle stiffness applied to right leg (applied after stiffness). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.StiffnessLeftArm">
            <summary>
            Stiffness  applied to left arm (applied after stiffness). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.StiffnessRightArm">
            <summary>
            Stiffness applied to right arm (applied after stiffness). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.StiffnessSpine">
            <summary>
            Stiffness applied to spine (applied after stiffness). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.StiffnessLeftLeg">
            <summary>
            Stiffness applied to left leg (applied after stiffness). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.StiffnessRightLeg">
            <summary>
            Stiffness applied to right leg (applied after stiffness). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.DampingLeftArm">
            <summary>
            Damping applied to left arm (applied after stiffness). If stiffness -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.DampingRightArm">
            <summary>
            Damping applied to right arm (applied after stiffness). If stiffness -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.DampingSpine">
            <summary>
            Damping applied to spine (applied after stiffness). If stiffness-ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.DampingLeftLeg">
            <summary>
            Damping applied to left leg (applied after stiffness). If stiffness-ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.DampingRightLeg">
            <summary>
            Damping applied to right leg (applied after stiffness). If stiffness -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.GravCompLeftArm">
            <summary>
            Gravity compensation applied to left arm (applied after gravityCompensation). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 14.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.GravCompRightArm">
            <summary>
            Gravity compensation applied to right arm (applied after gravityCompensation). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 14.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.GravCompSpine">
            <summary>
            Gravity compensation applied to spine (applied after gravityCompensation). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 14.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.GravCompLeftLeg">
            <summary>
            Gravity compensation applied to left leg (applied after gravityCompensation). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 14.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.GravCompRightLeg">
            <summary>
            Gravity compensation applied to right leg (applied after gravityCompensation). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 14.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.ConnectedLeftHand">
            <summary>
            Is the left hand constrained to the world/ an object: -1=auto decide by impact info, 0=no, 1=part fully constrained (not implemented:, 2=part point constraint, 3=line constraint).
            </summary>
            <remarks>
            Default value = 0.
            Min value = -1.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.ConnectedRightHand">
            <summary>
            Is the right hand constrained to the world/ an object: -1=auto decide by impact info, 0=no, 1=part fully constrained (not implemented:, 2=part point constraint, 3=line constraint).
            </summary>
            <remarks>
            Default value = 0.
            Min value = -1.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.ConnectedLeftFoot">
            <summary>
            Is the left foot constrained to the world/ an object: -2=do not set in animpose (e.g. let the balancer decide), -1=auto decide by impact info, 0=no, 1=part fully constrained (not implemented:, 2=part point constraint, 3=line constraint).
            </summary>
            <remarks>
            Default value = -2.
            Min value = -2.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.ConnectedRightFoot">
            <summary>
            Is the right foot constrained to the world/ an object: -2=do not set in animpose (e.g. let the balancer decide),-1=auto decide by impact info, 0=no, 1=part fully constrained (not implemented:, 2=part point constraint, 3=line constraint).
            </summary>
            <remarks>
            Default value = -2.
            Min value = -2.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.AnimSource">
            <summary>
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.DampenSideMotionInstanceIndex">
            <summary>
            LevelIndex of object to dampen side motion relative to. -1 means not used.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ArmsWindmillHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ArmsWindmillHelper for sending a ArmsWindmill <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ArmsWindmill <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.LeftPartID">
            <summary>
            ID of part that the circle uses as local space for positioning.
            </summary>
            <remarks>
            Default value = 10.
            Min value = 0.
            Max value = 21.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.LeftRadius1">
            <summary>
            Radius for first axis of ellipse.
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.LeftRadius2">
            <summary>
            Radius for second axis of ellipse.
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.LeftSpeed">
            <summary>
            Speed of target around the circle.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = -2.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.LeftNormal">
            <summary>
            Euler Angles orientation of circle in space of part with part ID.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.2f, 0.2f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.LeftCentre">
            <summary>
            Centre of circle in the space of partID.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.5f, -0.1f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.RightPartID">
            <summary>
            ID of part that the circle uses as local space for positioning.
            </summary>
            <remarks>
            Default value = 10.
            Min value = 0.
            Max value = 21.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.RightRadius1">
            <summary>
            Radius for first axis of ellipse.
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.RightRadius2">
            <summary>
            Radius for second axis of ellipse.
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.RightSpeed">
            <summary>
            Speed of target around the circle.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = -2.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.RightNormal">
            <summary>
            Euler Angles orientation of circle in space of part with part ID.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, -0.2f, -0.2f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.RightCentre">
            <summary>
            Centre of circle in the space of partID.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, -0.5f, -0.1f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.ShoulderStiffness">
            <summary>
            Stiffness applied to the shoulders.
            </summary>
            <remarks>
            Default value = 12.0f.
            Min value = 1.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.ShoulderDamping">
            <summary>
            Damping applied to the shoulders.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.ElbowStiffness">
            <summary>
            Stiffness applied to the elbows.
            </summary>
            <remarks>
            Default value = 12.0f.
            Min value = 1.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.ElbowDamping">
            <summary>
            Damping applied to the elbows.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.LeftElbowMin">
            <summary>
            Minimum left elbow bend.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.7f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.RightElbowMin">
            <summary>
            Minimum right elbow bend.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.7f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.PhaseOffset">
            <summary>
            Phase offset(degrees) when phase synchronization is turned on.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -360.0f.
            Max value = 360.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.DragReduction">
            <summary>
            How much to compensate for movement of character/target.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.IKtwist">
            <summary>
            Angle of elbow around twist axis ?.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -3.1f.
            Max value = 3.1f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.AngVelThreshold">
            <summary>
            Value of character angular speed above which adaptive arm motion starts.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.AngVelGain">
            <summary>
            Multiplies angular speed of character to get speed of arms.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.MirrorMode">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.MirrorMode.Mirrored"/>.
            If <see cref="F:GTA.NaturalMotion.MirrorMode.Parallel"/> leftArm parameters are used.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.AdaptiveMode">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.AdaptiveMode.NotAdaptive"/>.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.ForceSync">
            <summary>
            Toggles phase synchronization.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.UseLeft">
            <summary>
            Use the left arm.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.UseRight">
            <summary>
            Use the right arm.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.DisableOnImpact">
            <summary>
            If true, each arm will stop windmilling if it hits the ground.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ArmsWindmillAdaptiveHelper for sending a ArmsWindmillAdaptive <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ArmsWindmillAdaptive <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.AngSpeed">
            <summary>
            Controls the speed of the windmilling.
            </summary>
            <remarks>
            Default value = 6.3f.
            Min value = 0.1f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.BodyStiffness">
            <summary>
            Controls how stiff the rest of the body is.
            </summary>
            <remarks>
            Default value = 11.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.Amplitude">
            <summary>
            Controls how large the motion is, higher values means the character waves his arms in a massive arc.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.Phase">
            <summary>
            Set to a non-zero value to desynchronize the left and right arms motion.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -4.0f.
            Max value = 8.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.ArmStiffness">
            <summary>
            How stiff the arms are controls how pronounced the windmilling motion appears.
            </summary>
            <remarks>
            Default value = 14.1f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.LeftElbowAngle">
            <summary>
            If not negative then left arm will blend to this angle.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 6.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.RightElbowAngle">
            <summary>
            If not negative then right arm will blend to this angle.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 6.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.Lean1mult">
            <summary>
            0 arms go up and down at the side. 1 circles. 0..1 elipse.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.Lean1offset">
            <summary>
            0.f center of circle at side.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -6.0f.
            Max value = 6.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.ElbowRate">
            <summary>
            Rate at which elbow tries to match *ElbowAngle.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 6.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.ArmDirection">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.ArmDirection.Adaptive"/>.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.DisableOnImpact">
            <summary>
            If true, each arm will stop windmilling if it hits the ground.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.SetBackAngles">
            <summary>
            If true, back angles will be set to compliment arms windmill.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.UseAngMom">
            <summary>
            If true, use angular momentum about com to choose arm circling direction. Otherwise use com angular velocity.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.BendLeftElbow">
            <summary>
            If true, bend the left elbow to give a stunt man type scramble look.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.BendRightElbow">
            <summary>
            If true, bend the right elbow to give a stunt man type scramble look.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.Mask">
            <summary>
            Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  (see Active Pose notes for possible values).
            </summary>
            <remarks>
            Default value = "ub".
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.BalancerCollisionsReactionHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the BalancerCollisionsReactionHelper for sending a BalancerCollisionsReaction <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the BalancerCollisionsReaction <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.NumStepsTillSlump">
            <summary>
            Begin slump and stop stepping after this many steps.
            </summary>
            <remarks>
            Default value = 4.
            Min value = 0.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.Stable2SlumpTime">
            <summary>
            Time after becoming stable leaning against a wall that slump starts.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.ExclusionZone">
            <summary>
            Steps are ihibited to not go closer to the wall than this (after impact).
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.FootFrictionMultStart">
            <summary>
            Friction multiplier applied to feet when slump starts.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.FootFrictionMultRate">
            <summary>
            Friction multiplier reduced by this amount every second after slump starts (only if character is not slumping).
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 50.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.BackFrictionMultStart">
            <summary>
            Friction multiplier applied to back when slump starts.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.BackFrictionMultRate">
            <summary>
            Friction multiplier reduced by this amount every second after slump starts (only if character is not slumping).
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 50.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.ImpactLegStiffReduction">
            <summary>
            Reduce the stiffness of the legs by this much as soon as an impact is detected.
            </summary>
            <remarks>
            Default value = 3.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SlumpLegStiffReduction">
            <summary>
            Reduce the stiffness of the legs by this much as soon as slump starts.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SlumpLegStiffRate">
            <summary>
            Rate at which the stiffness of the legs is reduced during slump.
            </summary>
            <remarks>
            Default value = 8.0f.
            Min value = 0.0f.
            Max value = 50.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.ReactTime">
            <summary>
            Time that the character reacts to the impact with ub flinch and writhe.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.ImpactExagTime">
            <summary>
            Time that the character exaggerates impact with spine.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.GlanceSpinTime">
            <summary>
            Duration that the glance torque is applied for.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.GlanceSpinMag">
            <summary>
            Magnitude of the glance torque.
            </summary>
            <remarks>
            Default value = 50.0f.
            Min value = 0.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.GlanceSpinDecayMult">
            <summary>
            Multiplier used when decaying torque spin over time.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.IgnoreColWithIndex">
            <summary>
            Used so impact with the character that is pushing you over doesn't set off the behavior.
            </summary>
            <remarks>
            Default value = -2.
            Min value = -2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SlumpMode">
            <summary>
            0=Normal slump(less movement then slump and movement LT small), 1=fast slump, 2=less movement then slump.
            </summary>
            <remarks>
            Default value = 1.
            Min value = 0.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.ReboundMode">
            <summary>
            0=fall2knees/slump if shot not running, 1=stumble, 2=slump, 3=restart.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 3.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.IgnoreColMassBelow">
            <summary>
            Collisions with non-fixed objects with mass below this will not set this behavior off (e.g. ignore guns).
            </summary>
            <remarks>
            Default value = 20.0f.
            Min value = -1.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.ForwardMode">
            <summary>
            0=slump, 1=fallToKnees if shot is running, otherwise slump.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.TimeToForward">
            <summary>
            Time after a forwards impact before forwardMode is called (leave sometime for a rebound or brace - the min of 0.1 is to ensure fallOverWall can start although it probably needs only 1or2 frames for the probes to return).
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.1f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.ReboundForce">
            <summary>
            If forwards impact only: cheat force to try to get the character away from the wall.  3 is a good value.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.BraceWall">
            <summary>
            Brace against wall if forwards impact(at the moment only if bodyBalance is running/in charge of arms).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.IgnoreColVolumeBelow">
            <summary>
            Collisions with non-fixed objects with volume below this will not set this behavior off.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = -1.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.FallOverWallDrape">
            <summary>
            Use fallOverWall as the main drape reaction.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.FallOverHighWalls">
            <summary>
            Trigger fall over wall if hit up to spine2 else only if hit up to spine1.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.Snap">
            <summary>
            Add a Snap to when you hit a wall to emphasize the hit.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SnapMag">
            <summary>
            The magnitude of the snap reaction.
            </summary>
            <remarks>
            Default value = -0.6f.
            Min value = -10.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SnapDirectionRandomness">
            <summary>
            The character snaps in a prescribed way (decided by bullet direction) - Higher the value the more random this direction is.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SnapLeftArm">
            <summary>
            Snap the leftArm.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SnapRightArm">
            <summary>
            Snap the rightArm.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SnapLeftLeg">
            <summary>
            Snap the leftLeg.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SnapRightLeg">
            <summary>
            Snap the rightLeg.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SnapSpine">
            <summary>
            Snap the spine.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SnapNeck">
            <summary>
            Snap the neck.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SnapPhasedLegs">
            <summary>
            Legs are either in phase with each other or not.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SnapHipType">
            <summary>
            Type of hip reaction 0=none, 1=side2side 2=steplike.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.UnSnapInterval">
            <summary>
            Interval before applying reverse snap.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.UnSnapRatio">
            <summary>
            The magnitude of the reverse snap.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SnapUseTorques">
            <summary>
            Use torques to make the snap otherwise use a change in the parts angular velocity.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.ImpactWeaknessZeroDuration">
            <summary>
            Duration for which the character's upper body stays at minimum stiffness (not quite zero).
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.ImpactWeaknessRampDuration">
            <summary>
            Duration of the ramp to bring the character's upper body stiffness back to normal levels.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.ImpactLoosenessAmount">
            <summary>
            How loose the character is on impact. Between 0 and 1.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.ObjectBehindVictim">
            <summary>
            Detected an object behind a shot victim in the direction of a bullet?.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.ObjectBehindVictimPos">
            <summary>
            The intersection pos of a detected object behind a shot victim in the direction of a bullet.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.ObjectBehindVictimNormal">
            <summary>
            The normal of a detected object behind a shot victim in the direction of a bullet.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.BodyBalanceHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the BodyBalanceHelper for sending a BodyBalance <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the BodyBalance <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.ArmStiffness">
            <summary>
            NB. WAS m_bodyStiffness ClaviclesStiffness=9.0f.
            </summary>
            <remarks>
            Default value = 9.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.Elbow">
            <summary>
            How much the elbow swings based on the leg movement.
            </summary>
            <remarks>
            Default value = 0.9f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.Shoulder">
            <summary>
            How much the shoulder(lean1) swings based on the leg movement.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.ArmDamping">
            <summary>
            NB. WAS m_damping NeckDamping=1 ClaviclesDamping=1.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.UseHeadLook">
            <summary>
            Enable and provide a look-at target to make the character's head turn to face it while balancing.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.HeadLookPos">
            <summary>
            Position of thing to look at.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.HeadLookInstanceIndex">
            <summary>
            Level index of thing to look at.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.SpineStiffness">
            <summary>
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.SomersaultAngle">
            <summary>
            Multiplier of the somersault 'angle' (lean forward/back) for arms out (lean2).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.SomersaultAngleThreshold">
            <summary>
            Amount of somersault 'angle' before m_somersaultAngle is used for ArmsOut. Unless drunk - DO NOT EXCEED 0.8.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.SideSomersaultAngle">
            <summary>
            Amount of side somersault 'angle' before sideSomersault is used for ArmsOut. Unless drunk - DO NOT EXCEED 0.8.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.SideSomersaultAngleThreshold">
            <summary>
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.BackwardsAutoTurn">
            <summary>
            Automatically turn around if moving backwards.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.TurnWithBumpRadius">
            <summary>
            0.9 is a sensible value.  If pusher within this distance then turn to get out of the way of the pusher.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.BackwardsArms">
            <summary>
            Bend elbows, relax shoulders and inhibit spine twist when moving backwards.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.BlendToZeroPose">
            <summary>
            Blend upper body to zero pose as the character comes to rest. If false blend to a stored pose.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.ArmsOutOnPush">
            <summary>
            Put arms out based on lean2 of legs, or angular velocity (lean or twist), or lean (front/back or side/side).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.ArmsOutOnPushMultiplier">
            <summary>
            Arms out based on lean2 of the legs to simulate being pushed.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.ArmsOutOnPushTimeout">
            <summary>
            Number of seconds before turning off the armsOutOnPush response only for Arms out based on lean2 of the legs (NOT for the angle or angular velocity).
            </summary>
            <remarks>
            Default value = 1.1f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.ReturningToBalanceArmsOut">
            <summary>
            Range 0:1 0 = don't raise arms if returning to upright position, 0.x = 0.x*raise arms based on angvel and 'angle' settings, 1 = raise arms based on angvel and 'angle' settings.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.ArmsOutStraightenElbows">
            <summary>
            Multiplier for straightening the elbows based on the amount of arms out(lean2) 0 = dont straighten elbows. Otherwise straighten elbows proportionately to armsOut.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.ArmsOutMinLean2">
            <summary>
            Minimum desiredLean2 applied to shoulder (to stop arms going above shoulder height or not).
            </summary>
            <remarks>
            Default value = -9.9f.
            Min value = -10.0f.
            Max value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.SpineDamping">
            <summary>
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.UseBodyTurn">
            <summary>
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.ElbowAngleOnContact">
            <summary>
            On contact with upperbody the desired elbow angle is set to at least this value.
            </summary>
            <remarks>
            Default value = 1.9f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.BendElbowsTime">
            <summary>
            Time after contact (with Upper body) that the min m_elbowAngleOnContact is applied.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.BendElbowsGait">
            <summary>
            Minimum desired angle of elbow during non contact arm swing.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = -3.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.HipL2ArmL2">
            <summary>
            Mmmmdrunk = 0.2 multiplier of hip lean2 (star jump) to give shoulder lean2 (flapping).
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.ShoulderL2">
            <summary>
            Mmmmdrunk = 0.7 shoulder lean2 offset.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = -3.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.ShoulderL1">
            <summary>
            Mmmmdrunk 1.1 shoulder lean1 offset (+ve frankenstein).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.ShoulderTwist">
            <summary>
            Mmmmdrunk = 0.0 shoulder twist.
            </summary>
            <remarks>
            Default value = -0.4f.
            Min value = -3.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.HeadLookAtVelProb">
            <summary>
            Probability [0-1] that headLook will be looking in the direction of velocity when stepping.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.TurnOffProb">
            <summary>
            Weighted probability that turn will be off. This is one of six turn type weights.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.Turn2VelProb">
            <summary>
            Weighted probability of turning towards velocity. This is one of six turn type weights.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.TurnAwayProb">
            <summary>
            Weighted probability of turning away from headLook target. This is one of six turn type weights.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.TurnLeftProb">
            <summary>
            Weighted probability of turning left. This is one of six turn type weights.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.TurnRightProb">
            <summary>
            Weighted probability of turning right. This is one of six turn type weights.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.Turn2TargetProb">
            <summary>
            Weighted probability of turning towards headLook target. This is one of six turn type weights.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.AngVelMultiplier">
            <summary>
            Somersault, twist, sideSomersault) multiplier of the angular velocity  for arms out (lean2) (somersault, twist, sideSomersault).
            </summary>
            <remarks>
            Default value = Vector3(4.0f, 1.0f, 4.0f).
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.AngVelThreshold">
            <summary>
            Somersault, twist, sideSomersault) threshold above which angVel is used for arms out (lean2) Unless drunk - DO NOT EXCEED 7.0 for each component.
            </summary>
            <remarks>
            Default value = Vector3(1.2f, 3.0f, 1.2f).
            Min value = 0.0f.
            Max value = 40.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.BraceDistance">
            <summary>
            If -ve then do not brace.  distance from object at which to raise hands to brace 0.5 good if newBrace=true - otherwise 0.65.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.TargetPredictionTime">
            <summary>
            Time expected to get arms up from idle.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.ReachAbsorbtionTime">
            <summary>
            Larger values and he absorbs the impact more.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.BraceStiffness">
            <summary>
            Stiffness of character. Catch_fall stiffness scales with this too, with its defaults at this values default.
            </summary>
            <remarks>
            Default value = 12.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.MinBraceTime">
            <summary>
            Minimum bracing time so the character doesn't look twitchy.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.TimeToBackwardsBrace">
            <summary>
            Time before arm brace kicks in when hit from behind.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.HandsDelayMin">
            <summary>
            If bracing with 2 hands delay one hand by at least this amount of time to introduce some asymmetry.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.HandsDelayMax">
            <summary>
            If bracing with 2 hands delay one hand by at most this amount of time to introduce some asymmetry.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.BraceOffset">
            <summary>
            BraceTarget is global headLookPos plus braceOffset m in the up direction.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -2.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.MoveRadius">
            <summary>
            If -ve don't move away from pusher unless moveWhenBracing is true and braceDistance  GT  0.0f.  if the pusher is closer than moveRadius then move away from it.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.MoveAmount">
            <summary>
            Amount of leanForce applied away from pusher.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.MoveWhenBracing">
            <summary>
            Only move away from pusher when bracing against pusher.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.BodyFoetalHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the BodyFoetalHelper for sending a BodyFoetal <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the BodyFoetal <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.BodyFoetalHelper.Stiffness">
            <summary>
            The stiffness of the body determines how fast the character moves into the position, and how well that they hold it.
            </summary>
            <remarks>
            Default value = 9.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyFoetalHelper.DampingFactor">
            <summary>
            Sets damping value for the character joints.
            </summary>
            <remarks>
            Default value = 1.4f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyFoetalHelper.Asymmetry">
            <summary>
            A value between 0-1 that controls how asymmetric the results are by varying stiffness across the body.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyFoetalHelper.RandomSeed">
            <summary>
            Random seed used to generate asymmetry values.
            </summary>
            <remarks>
            Default value = 100.
            Min value = 0.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyFoetalHelper.BackTwist">
            <summary>
            Amount of random back twist to add.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyFoetalHelper.Mask">
            <summary>
            Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  (see Active Pose notes for possible values).
            </summary>
            <remarks>
            Default value = "fb".
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.BodyRollUpHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the BodyRollUpHelper for sending a BodyRollUp <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the BodyRollUp <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRollUpHelper.Stiffness">
            <summary>
            Stiffness of whole body.
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRollUpHelper.UseArmToSlowDown">
            <summary>
            The degree to which the character will try to stop a barrel roll with his arms.
            </summary>
            <remarks>
            Default value = 1.3f.
            Min value = -2.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRollUpHelper.ArmReachAmount">
            <summary>
            The likeliness of the character reaching for the ground with its arms.
            </summary>
            <remarks>
            Default value = 1.4f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRollUpHelper.Mask">
            <summary>
            Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  (see Active Pose notes for possible values).
            </summary>
            <remarks>
            Default value = "fb".
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRollUpHelper.LegPush">
            <summary>
            Used to keep rolling down slope, 1 is full (kicks legs out when pointing upwards).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRollUpHelper.AsymmetricalLegs">
            <summary>
            0 is no leg asymmetry in 'foetal' position.  greater than 0 a asymmetricalLegs-rand(30%), added/minus each joint of the legs in radians.  Random number changes about once every roll.  0.4 gives a lot of asymmetry.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -2.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRollUpHelper.NoRollTimeBeforeSuccess">
            <summary>
            Time that roll velocity has to be lower than rollVelForSuccess, before success message is sent.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRollUpHelper.RollVelForSuccess">
            <summary>
            Lower threshold for roll velocity at which success message can be sent.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRollUpHelper.RollVelLinearContribution">
            <summary>
            Contribution of linear COM velocity to roll Velocity (if 0, roll velocity equal to COM angular velocity).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRollUpHelper.VelocityScale">
            <summary>
            Scales perceived body velocity.  The higher this value gets, the more quickly the velocity measure saturates, resulting in a tighter roll at slower speeds. (NB: Set to 1 to match earlier behavior).
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRollUpHelper.VelocityOffset">
            <summary>
            Offsets perceived body velocity.  Increase to create larger "dead zone" around zero velocity where character will be less rolled. (NB: Reset to 0 to match earlier behavior).
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRollUpHelper.ApplyMinMaxFriction">
            <summary>
            Controls whether or not behavior enforces min/max friction.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.BodyWritheHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the BodyWritheHelper for sending a BodyWrithe <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the BodyWrithe <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.ArmStiffness">
            <summary>
            </summary>
            <remarks>
            Default value = 13.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.BackStiffness">
            <summary>
            </summary>
            <remarks>
            Default value = 13.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.LegStiffness">
            <summary>
            The stiffness of the character will determine how 'determined' a writhe this is - high values will make him thrash about wildly.
            </summary>
            <remarks>
            Default value = 13.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.ArmDamping">
            <summary>
            Damping amount, less is underdamped.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.BackDamping">
            <summary>
            Damping amount, less is underdamped.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.LegDamping">
            <summary>
            Damping amount, less is underdamped.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.ArmPeriod">
            <summary>
            Controls how fast the writhe is executed, smaller values make faster motions.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.BackPeriod">
            <summary>
            Controls how fast the writhe is executed, smaller values make faster motions.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.LegPeriod">
            <summary>
            Controls how fast the writhe is executed, smaller values make faster motions.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.Mask">
            <summary>
            Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  (see Active Pose notes for possible values).
            </summary>
            <remarks>
            Default value = "fb".
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.ArmAmplitude">
            <summary>
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.BackAmplitude">
            <summary>
            Scales the amount of writhe. 0 = no writhe.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.LegAmplitude">
            <summary>
            Scales the amount of writhe. 0 = no writhe.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.ElbowAmplitude">
            <summary>
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.KneeAmplitude">
            <summary>
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.RollOverFlag">
            <summary>
            Flag to set trying to rollOver.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.BlendArms">
            <summary>
            Blend the writhe arms with the current desired arms (0=don't apply any writhe, 1=only writhe).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.BlendBack">
            <summary>
            Blend the writhe spine and neck with the current desired (0=don't apply any writhe, 1=only writhe).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.BlendLegs">
            <summary>
            Blend the writhe legs with the current desired legs (0=don't apply any writhe, 1=only writhe).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.ApplyStiffness">
            <summary>
            Use writhe stiffnesses if true. If false don't set any stiffnesses.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.OnFire">
            <summary>
            Extra shoulderBlend. Rolling:one way only, maxRollOverTime, rollOverRadius, doesn't reduce arm stiffness to help rolling. No shoulder twist.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.ShoulderLean1">
            <summary>
            Blend writhe shoulder desired lean1 with this angle in RAD. Note that onFire has to be set to true for this parameter to take any effect.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 6.3f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.ShoulderLean2">
            <summary>
            Blend writhe shoulder desired lean2 with this angle in RAD. Note that onFire has to be set to true for this parameter to take any effect.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 6.3f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.Lean1BlendFactor">
            <summary>
            Shoulder desired lean1 with shoulderLean1 angle blend factor. Set it to 0 to use original shoulder withe desired lean1 angle for shoulders. Note that onFire has to be set to true for this parameter to take any effect.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.Lean2BlendFactor">
            <summary>
            Shoulder desired lean2 with shoulderLean2 angle blend factor. Set it to 0 to use original shoulder withe desired lean2 angle for shoulders. Note that onFire has to be set to true for this parameter to take any effect.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.RollTorqueScale">
            <summary>
            Scale rolling torque that is applied to character spine.
            </summary>
            <remarks>
            Default value = 150.0f.
            Min value = 0.0f.
            Max value = 300.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.MaxRollOverTime">
            <summary>
            Rolling torque is ramped down over time. At this time in seconds torque value converges to zero. Use this parameter to restrict time the character is rolling. Note that onFire has to be set to true for this parameter to take any effect.
            </summary>
            <remarks>
            Default value = 8.0f.
            Min value = 0.0f.
            Max value = 60.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.RollOverRadius">
            <summary>
            Rolling torque is ramped down with distance measured from position where character hit the ground and started rolling. At this distance in meters torque value converges to zero. Use this parameter to restrict distance the character travels due to rolling. Note that onFire has to be set to true for this parameter to take any effect.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.BraceForImpactHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the BraceForImpactHelper for sending a BraceForImpact <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the BraceForImpact <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.BraceDistance">
            <summary>
            Distance from object at which to raise hands to brace 0.5 good if newBrace=true - otherwise 0.65.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.TargetPredictionTime">
            <summary>
            Time epected to get arms up from idle.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.ReachAbsorbtionTime">
            <summary>
            Larger values and he absorbs the impact more.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.InstanceIndex">
            <summary>
            LevelIndex of object to brace.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.BodyStiffness">
            <summary>
            Stiffness of character. Catch_fall stiffness scales with this too, with its defaults at this values default.
            </summary>
            <remarks>
            Default value = 12.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GrabDontLetGo">
            <summary>
            Once a constraint is made, keep reaching with whatever hand is allowed.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GrabStrength">
            <summary>
            Strength in hands for grabbing (kg m/s), -1 to ignore/disable.
            </summary>
            <remarks>
            Default value = 40.0f.
            Min value = -1.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GrabDistance">
            <summary>
            Relative distance at which the grab starts.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GrabReachAngle">
            <summary>
            Angle from front at which the grab activates. If the point is outside this angle from front will not try to grab.
            </summary>
            <remarks>
            Default value = 1.5f.
            Min value = 0.0f.
            Max value = 3.2f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GrabHoldTimer">
            <summary>
            Amount of time, in seconds, before grab automatically bails.
            </summary>
            <remarks>
            Default value = 2.5f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.MaxGrabCarVelocity">
            <summary>
            Don't try to grab a car moving above this speed mmmmtodo make this the relative velocity of car to character?.
            </summary>
            <remarks>
            Default value = 95.0f.
            Min value = 0.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.LegStiffness">
            <summary>
            Balancer leg stiffness mmmmtodo remove this parameter and use configureBalance?.
            </summary>
            <remarks>
            Default value = 12.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.TimeToBackwardsBrace">
            <summary>
            Time before arm brace kicks in when hit from behind.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.Look">
            <summary>
            Position to look at, e.g. the driver.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.Pos">
            <summary>
            Location of the front part of the object to brace against. This should be the center of where his hands should meet the object.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.MinBraceTime">
            <summary>
            Minimum bracing time so the character doesn't look twitchy.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.HandsDelayMin">
            <summary>
            If bracing with 2 hands delay one hand by at least this amount of time to introduce some asymmetry.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.HandsDelayMax">
            <summary>
            If bracing with 2 hands delay one hand by at most this amount of time to introduce some asymmetry.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.MoveAway">
            <summary>
            Move away from the car (if in reaching zone).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.MoveAwayAmount">
            <summary>
            ForceLean away amount (-ve is lean towards).
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.MoveAwayLean">
            <summary>
            Lean away amount (-ve is lean towards).
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = -0.5f.
            Max value = 0.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.MoveSideways">
            <summary>
            Amount of sideways movement if at the front or back of the car to add to the move away from car.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.BbArms">
            <summary>
            Use bodyBalance arms for the default (non bracing) behavior if bodyBalance is active.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.NewBrace">
            <summary>
            Use the new brace prediction code.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.BraceOnImpact">
            <summary>
            If true then if a shin or thigh is in contact with the car then brace. NB: newBrace must be true.  For those situations where the car has pushed the ped backwards (at the same speed as the car) before the behavior has been started and so doesn't predict an impact.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.Roll2Velocity">
            <summary>
            When rollDownStairs is running use roll2Velocity to control the helper torques (this only attempts to roll to the chaarcter's velocity not some default linear velocity mag.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.RollType">
            <summary>
            0 = original/roll off/stay on car:  Roll with character velocity, 1 = //Gentle: roll off/stay on car = use relative velocity of character to car to roll against, 2 = //roll over car:  Roll against character velocity.  i.e. roll against any velocity picked up by hitting car, 3 = //Gentle: roll over car:  use relative velocity of character to car to roll with.
            </summary>
            <remarks>
            Default value = 3.
            Min value = 0.
            Max value = 3.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.SnapImpacts">
            <summary>
            Exaggerate impacts using snap.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.SnapImpact">
            <summary>
            Exaggeration amount of the initial impact (legs).  +ve fold with car impact (as if pushed at hips in the car velocity direction).  -ve fold away from car impact.
            </summary>
            <remarks>
            Default value = 7.0f.
            Min value = -20.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.SnapBonnet">
            <summary>
            Exaggeration amount of the secondary (torso) impact with bonnet. +ve fold with car impact (as if pushed at hips by the impact normal).  -ve fold away from car impact.
            </summary>
            <remarks>
            Default value = -7.0f.
            Min value = -20.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.SnapFloor">
            <summary>
            Exaggeration amount of the impact with the floor after falling off of car +ve fold with floor impact (as if pushed at hips in the impact normal direction).  -ve fold away from car impact.
            </summary>
            <remarks>
            Default value = 7.0f.
            Min value = -20.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.DampVel">
            <summary>
            Damp out excessive spin and upward velocity when on car.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.DampSpin">
            <summary>
            Amount to damp spinning by (cartwheeling and somersaulting).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 40.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.DampUpVel">
            <summary>
            Amount to damp upward velocity by to limit the amount of air above the car the character can get.
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 0.0f.
            Max value = 40.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.DampSpinThresh">
            <summary>
            Angular velocity above which we start damping.
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.DampUpVelThresh">
            <summary>
            Upward velocity above which we start damping.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GsHelp">
            <summary>
            Enhance a glancing spin with the side of the car by modulating body friction.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GsEndMin">
            <summary>
            ID for glancing spin. Min depth to be considered from either end (front/rear) of a car (-ve is inside the car area).
            </summary>
            <remarks>
            Default value = -0.1f.
            Min value = -10.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GsSideMin">
            <summary>
            ID for glancing spin. Min depth to be considered on the side of a car (-ve is inside the car area).
            </summary>
            <remarks>
            Default value = -0.2f.
            Min value = -10.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GsSideMax">
            <summary>
            ID for glancing spin. Max depth to be considered on the side of a car (+ve is outside the car area).
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = -10.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GsUpness">
            <summary>
            ID for glancing spin. Character has to be more upright than this value for it to be considered on the side of a car. Fully upright = 1, upsideDown = -1.  Max Angle from upright is acos(gsUpness).
            </summary>
            <remarks>
            Default value = 0.9f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GsCarVelMin">
            <summary>
            ID for glancing spin. Minimum car velocity.
            </summary>
            <remarks>
            Default value = 3.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GsScale1Foot">
            <summary>
            Apply gsFricScale1 to the foot if colliding with car.  (Otherwise foot friction - with the ground - is determined by gsFricScale2 if it is in gsFricMask2).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GsFricScale1">
            <summary>
            Glancing spin help. Friction scale applied when to the side of the car.  e.g. make the character spin more by upping the friction against the car.
            </summary>
            <remarks>
            Default value = 8.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GsFricMask1">
            <summary>
            Glancing spin help. Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  (see notes for explanation). Note gsFricMask1 and gsFricMask2 are made independent by the code so you can have fb for gsFricMask1 but gsFricScale1 will not be applied to any body parts in gsFricMask2.
            </summary>
            <remarks>
            Default value = "fb".
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GsFricScale2">
            <summary>
            Glancing spin help. Friction scale applied when to the side of the car.  e.g. make the character spin more by lowering the feet friction. You could also lower the wrist friction here to stop the car pulling along the hands i.e. gsFricMask2 = la|uw.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GsFricMask2">
            <summary>
            Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  (see notes for explanation). Note gsFricMask1 and gsFricMask2 are made independent by the code so you can have fb for gsFricMask1 but gsFricScale1 will not be applied to any body parts in gsFricMask2.
            </summary>
            <remarks>
            Default value = la.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.BuoyancyHelper">
            <summary>
            Simple buoyancy model.  No character movement just fluid forces/torques added to parts.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.BuoyancyHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the BuoyancyHelper for sending a Buoyancy <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the Buoyancy <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Simple buoyancy model.  No character movement just fluid forces/torques added to parts.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BuoyancyHelper.SurfacePoint">
            <summary>
            Arbitrary point on surface of water.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BuoyancyHelper.SurfaceNormal">
            <summary>
            Normal to surface of water.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 1.0f).
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BuoyancyHelper.Buoyancy">
            <summary>
            Buoyancy multiplier.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BuoyancyHelper.ChestBuoyancy">
            <summary>
            Buoyancy multiplier for spine2/3. Helps character float upright.
            </summary>
            <remarks>
            Default value = 8.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BuoyancyHelper.Damping">
            <summary>
            Damping for submerged parts.
            </summary>
            <remarks>
            Default value = 40.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BuoyancyHelper.Righting">
            <summary>
            Use righting torque to being character face-up in water?.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BuoyancyHelper.RightingStrength">
            <summary>
            Strength of righting torque.
            </summary>
            <remarks>
            Default value = 25.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BuoyancyHelper.RightingTime">
            <summary>
            How long to wait after chest hits water to begin righting torque.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.CatchFallHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the CatchFallHelper for sending a CatchFall <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the CatchFall <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.CatchFallHelper.TorsoStiffness">
            <summary>
            Stiffness of torso.
            </summary>
            <remarks>
            Default value = 9.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.CatchFallHelper.LegsStiffness">
            <summary>
            Stiffness of legs.
            </summary>
            <remarks>
            Default value = 6.0f.
            Min value = 4.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.CatchFallHelper.ArmsStiffness">
            <summary>
            Stiffness of arms.
            </summary>
            <remarks>
            Default value = 15.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.CatchFallHelper.BackwardsMinArmOffset">
            <summary>
            0 will prop arms up near his shoulders. -0.3 will place hands nearer his behind.
            </summary>
            <remarks>
            Default value = -0.3f.
            Min value = -1.0f.
            Max value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.CatchFallHelper.ForwardMaxArmOffset">
            <summary>
            0 will point arms down with angled body, 0.45 will point arms forward a bit to catch nearer the head.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.CatchFallHelper.ZAxisSpinReduction">
            <summary>
            Tries to reduce the spin around the Z axis. Scale 0 - 1.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.CatchFallHelper.ExtraSit">
            <summary>
            Scale extra-sit value 0..1. Setting to 0 helps with arched-back issues.  Set to 1 for a more alive-looking finish.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.CatchFallHelper.UseHeadLook">
            <summary>
            Toggle to use the head look in this behavior.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.CatchFallHelper.Mask">
            <summary>
            Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  (see Active Pose notes for possible values).
            </summary>
            <remarks>
            Default value = "fb".
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ElectrocuteHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ElectrocuteHelper for sending a Electrocute <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the Electrocute <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.StunMag">
            <summary>
            The magnitude of the reaction.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.InitialMult">
            <summary>
            InitialMult*stunMag = The magnitude of the 1st snap reaction (other multipliers are applied after this).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.LargeMult">
            <summary>
            LargeMult*stunMag = The magnitude of a random large snap reaction (other multipliers are applied after this).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.LargeMinTime">
            <summary>
            Min time to next large random snap (about 14 snaps with stunInterval = 0.07s).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 200.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.LargeMaxTime">
            <summary>
            Max time to next large random snap (about 28 snaps with stunInterval = 0.07s).
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 200.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.MovingMult">
            <summary>
            MovingMult*stunMag = The magnitude of the reaction if moving(comVelMag) faster than movingThresh.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.BalancingMult">
            <summary>
            BalancingMult*stunMag = The magnitude of the reaction if balancing = (not lying on the floor/ not upper body not collided) and not airborne.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.AirborneMult">
            <summary>
            AirborneMult*stunMag = The magnitude of the reaction if airborne.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.MovingThresh">
            <summary>
            If moving(comVelMag) faster than movingThresh then mvingMult applied to stunMag.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.StunInterval">
            <summary>
            Direction flips every stunInterval.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.DirectionRandomness">
            <summary>
            The character vibrates in a prescribed way - Higher the value the more random this direction is.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.LeftArm">
            <summary>
            Vibrate the leftArm.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.RightArm">
            <summary>
            Vibrate the rightArm.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.LeftLeg">
            <summary>
            Vibrate the leftLeg.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.RightLeg">
            <summary>
            Vibrate the rightLeg.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.Spine">
            <summary>
            Vibrate the spine.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.Neck">
            <summary>
            Vibrate the neck.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.PhasedLegs">
            <summary>
            Legs are either in phase with each other or not.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.ApplyStiffness">
            <summary>
            Let electrocute apply a (higher generally) stiffness to the character whilst being vibrated.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.UseTorques">
            <summary>
            Use torques to make vibration otherwise use a change in the parts angular velocity.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.HipType">
            <summary>
            Type of hip reaction 0=none, 1=side2side 2=steplike.
            </summary>
            <remarks>
            Default value = 2.
            Min value = 0.
            Max value = 2.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.FallOverWallHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the FallOverWallHelper for sending a FallOverWall <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the FallOverWall <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.BodyStiffness">
            <summary>
            Stiffness of the body, roll up stiffness scales with this and defaults at this default value.
            </summary>
            <remarks>
            Default value = 9.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.Damping">
            <summary>
            Damping in the effectors.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.MagOfForce">
            <summary>
            Magnitude of the falloverWall helper force.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.MaxDistanceFromPelToHitPoint">
            <summary>
            The maximum distance away from the pelvis that hit points will be registered.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.MaxForceDist">
            <summary>
            Maximum distance between hitPoint and body part at which forces are applied to part.
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.StepExclusionZone">
            <summary>
            Specifies extent of area in front of the wall in which balancer won't try to take another step.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.MinLegHeight">
            <summary>
            Minimum height of pelvis above feet at which fallOverWall is attempted.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.1f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.BodyTwist">
            <summary>
            Amount of twist to apply to the spine as the character tries to fling himself over the wall, provides more of a believable roll but increases the amount of lateral space the character needs to successfully flip.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.MaxTwist">
            <summary>
            Max angle the character can twist before twsit helper torques are turned off.
            </summary>
            <remarks>
            Default value = 3.1f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.FallOverWallEndA">
            <summary>
            One end of the wall to try to fall over.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.FallOverWallEndB">
            <summary>
            One end of the wall over which we are trying to fall over.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.ForceAngleAbort">
            <summary>
            The angle abort threshold.
            </summary>
            <remarks>
            Default value = -0.2f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.ForceTimeOut">
            <summary>
            The force time out.
            </summary>
            <remarks>
            Default value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.MoveArms">
            <summary>
            Lift the arms up if true.  Do nothing with the arms if false (eg when using catchfall arms or brace etc).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.MoveLegs">
            <summary>
            Move the legs if true.  Do nothing with the legs if false (eg when using dynamicBalancer etc).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.BendSpine">
            <summary>
            Bend spine to help falloverwall if true.  Do nothing with the spine if false.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.AngleDirWithWallNormal">
            <summary>
            Maximum angle in degrees (between the direction of the velocity of the COM and the wall normal) to start to apply forces and torques to fall over the wall.
            </summary>
            <remarks>
            Default value = 180.0f.
            Min value = 0.0f.
            Max value = 180.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.LeaningAngleThreshold">
            <summary>
            Maximum angle in degrees (between the vertical vector and a vector from pelvis to lower neck) to start to apply forces and torques to fall over the wall.
            </summary>
            <remarks>
            Default value = 180.0f.
            Min value = 0.0f.
            Max value = 180.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.MaxAngVel">
            <summary>
            If the angular velocity is higher than maxAngVel, the torques and forces are not applied.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = -1.0f.
            Max value = 30.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.AdaptForcesToLowWall">
            <summary>
            Will reduce the magnitude of the forces applied to the character to help him to fall over wall.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.MaxWallHeight">
            <summary>
            Maximum height (from the lowest foot) to start to apply forces and torques to fall over the wall.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.DistanceToSendSuccessMessage">
            <summary>
            Minimum distance between the pelvis and the wall to send the success message. If negative doesn't take this parameter into account when sending feedback.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.RollingBackThr">
            <summary>
            Value of the angular velocity about the wallEgde above which the character is considered as rolling backwards i.e. goes in to fow_RollingBack state.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.RollingPotential">
            <summary>
            On impact with the wall if the rollingPotential(calculated from the characters linear velocity w.r.t the wall) is greater than this value the character will try to go over the wall otherwise it won't try (fow_Aborted).
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = -1.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.UseArmIK">
            <summary>
            Try to reach the wallEdge. To configure the IK : use limitAngleBack, limitAngleFront and limitAngleTotallyBack.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.ReachDistanceFromHitPoint">
            <summary>
            Distance from predicted hitpoint where each hands will try to reach the wall.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.MinReachDistanceFromHitPoint">
            <summary>
            Minimal distance from predicted hitpoint where each hands will try to reach the wall. Used if the hand target is outside the wall Edge.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.AngleTotallyBack">
            <summary>
            Max angle in degrees (between 1.the vector between two hips and 2. WallEdge) to try to reach the wall just behind his pelvis with his arms when the character is back to the wall.
            </summary>
            <remarks>
            Default value = 15.0f.
            Min value = 0.0f.
            Max value = 180.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.GrabHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the GrabHelper for sending a Grab <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the Grab <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.UseLeft">
            <summary>
            Flag to toggle use of left hand.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.UseRight">
            <summary>
            Flag to toggle the use of the Right hand.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.DropWeaponIfNecessary">
            <summary>
            If hasn't grabbed when weapon carrying hand is close to target, grab anyway.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.DropWeaponDistance">
            <summary>
            Distance below which a weapon carrying hand will request weapon to be dropped.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.GrabStrength">
            <summary>
            Strength in hands for grabbing (kg m/s), -1 to ignore/disable.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 10000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.StickyHands">
            <summary>
            Strength of cheat force on hands to pull towards target and stick to target ("cleverHandIK" strength).
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.TurnToTarget">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.TurnType.ToTarget"/>.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.GrabHoldMaxTimer">
            <summary>
            Amount of time, in seconds, before grab automatically bails.
            </summary>
            <remarks>
            Default value = 100.0f.
            Min value = 0.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.PullUpTime">
            <summary>
            Time to reach the full pullup strength.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.PullUpStrengthRight">
            <summary>
            Strength to pull up with the right arm. 0 = no pull up.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.PullUpStrengthLeft">
            <summary>
            Strength to pull up with the left arm. 0 = no pull up.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.Pos1">
            <summary>
            Grab pos1, right hand if not using line or surface grab.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.Pos2">
            <summary>
            Grab pos2, left hand if not using line or surface grab.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.Pos3">
            <summary>
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.Pos4">
            <summary>
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.NormalR">
            <summary>
            Normal for the right grab point.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.NormalL">
            <summary>
            Normal for the left grab point.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.NormalR2">
            <summary>
            Normal for the 2nd right grab point (if pointsX4grab=true).
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.NormalL2">
            <summary>
            Normal for the 3rd left grab point (if pointsX4grab=true).
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.HandsCollide">
            <summary>
            Hand collisions on when grabbing (false turns off hand collisions making grab more stable esp. To grab points slightly inside geometry).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.JustBrace">
            <summary>
            Flag to toggle between grabbing and bracing.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.UseLineGrab">
            <summary>
            Use the line grab, Grab along the line (x-x2).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.PointsX4grab">
            <summary>
            Use 2 point.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.FromEA">
            <summary>
            Use 2 point.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.SurfaceGrab">
            <summary>
            Toggle surface grab on. Requires pos1,pos2,pos3 and pos4 to be specified.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.InstanceIndex">
            <summary>
            LevelIndex of instance to grab (-1 = world coordinates).
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.InstancePartIndex">
            <summary>
            BoundIndex of part on instance to grab (0 = just use instance coordinates).
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.DontLetGo">
            <summary>
            Once a constraint is made, keep reaching with whatever hand is allowed - no matter what the angle/distance and whether or not the constraint has broken due to constraintForce  GT  grabStrength.  mmmtodo this is a badly named parameter.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.BodyStiffness">
            <summary>
            Stiffness of upper body. Scales the arm grab such that the armStiffness is default when this is at default value.
            </summary>
            <remarks>
            Default value = 11.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.ReachAngle">
            <summary>
            Angle from front at which the grab activates. If the point is outside this angle from front will not try to grab.
            </summary>
            <remarks>
            Default value = 2.8f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.OneSideReachAngle">
            <summary>
            Angle at which we will only reach with one hand.
            </summary>
            <remarks>
            Default value = 1.4f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.GrabDistance">
            <summary>
            Relative distance at which the grab starts.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.Move2Radius">
            <summary>
            Relative distance (additional to grabDistance - doesn't try to move inside grabDistance)at which the grab tries to use the balancer to move to the grab point.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 14.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.ArmStiffness">
            <summary>
            Stiffness of the arm.
            </summary>
            <remarks>
            Default value = 14.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.MaxReachDistance">
            <summary>
            Distance to reach out towards the grab point.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.OrientationConstraintScale">
            <summary>
            Scale torque used to rotate hands to face normals.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.MaxWristAngle">
            <summary>
            When we are grabbing the max angle the wrist ccan be at before we break the grab.
            </summary>
            <remarks>
            Default value = 3.1f.
            Min value = 0.0f.
            Max value = 3.2f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.UseHeadLookToTarget">
            <summary>
            If true, the character will look at targetForHeadLook after a hand grabs until the end of the behavior. (Before grabbing it looks at the grab target).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.LookAtGrab">
            <summary>
            If true, the character will look at the grab.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.TargetForHeadLook">
            <summary>
            Only used if useHeadLookToTarget is true, the target in world space to look at.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.HeadLookHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the HeadLookHelper for sending a HeadLook <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the HeadLook <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.HeadLookHelper.Damping">
            <summary>
            Damping of the muscles.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HeadLookHelper.Stiffness">
            <summary>
            Stiffness of the muscles.
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HeadLookHelper.InstanceIndex">
            <summary>
            LevelIndex of object to be looked at. Vel parameters are ignored if this is non -1.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HeadLookHelper.Vel">
            <summary>
            The velocity of the point being looked at.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            Min value = -100.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HeadLookHelper.Pos">
            <summary>
            The point being looked at.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HeadLookHelper.AlwaysLook">
            <summary>
            Flag to force always to look.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HeadLookHelper.EyesHorizontal">
            <summary>
            Keep the eyes horizontal.  Use true for impact with cars.  Use false if you want better look at target accuracy when the character is on the floor or leaned over alot.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HeadLookHelper.AlwaysEyesHorizontal">
            <summary>
            Keep the eyes horizontal.  Use true for impact with cars.  Use false if you want better look at target accuracy when the character is on the floor or leaned over (when not leaned over the eyes are still kept horizontal if eyesHorizontal=true ) alot.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HeadLookHelper.KeepHeadAwayFromGround">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HeadLookHelper.TwistSpine">
            <summary>
            Allow head look to twist spine.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.HighFallHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the HighFallHelper for sending a HighFall <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the HighFall <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.BodyStiffness">
            <summary>
            Stiffness of body. Value feeds through to bodyBalance (synced with defaults), to armsWindmill (14 for this value at default ), legs pedal, head look and roll down stairs directly.
            </summary>
            <remarks>
            Default value = 11.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.Bodydamping">
            <summary>
            The damping of the joints.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.Catchfalltime">
            <summary>
            The length of time before the impact that the character transitions to the landing.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.CrashOrLandCutOff">
            <summary>
            0.52angle is 0.868 dot//A threshold for deciding how far away from upright the character needs to be before bailing out (going into a foetal) instead of trying to land (keeping stretched out).  NB: never does bailout if ignorWorldCollisions true.
            </summary>
            <remarks>
            Default value = 0.9f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.PdStrength">
            <summary>
            Strength of the controller to keep the character at angle aimAngleBase from vertical.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.PdDamping">
            <summary>
            Damping multiplier of the controller to keep the character at angle aimAngleBase from vertical.  The actual damping is pdDamping*pdStrength*constant*angVel.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.ArmAngSpeed">
            <summary>
            Arm circling speed in armWindMillAdaptive.
            </summary>
            <remarks>
            Default value = 7.9f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.ArmAmplitude">
            <summary>
            In armWindMillAdaptive.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.ArmPhase">
            <summary>
            In armWindMillAdaptive 3.1 opposite for stuntman.
            1.0 old default. 0.0 in phase.
            </summary>
            <remarks>
            Default value = 3.1f.
            Min value = 0.0f.
            Max value = 6.3f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.ArmBendElbows">
            <summary>
            In armWindMillAdaptive bend the elbows as a function of armAngle.
            For stunt man true otherwise false.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.LegRadius">
            <summary>
            Radius of legs on pedal.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 0.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.LegAngSpeed">
            <summary>
            In pedal.
            </summary>
            <remarks>
            Default value = 7.9f.
            Min value = 0.0f.
            Max value = 15.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.LegAsymmetry">
            <summary>
            0.0 for stuntman.  Random offset applied per leg to the angular speed to desynchronize the pedaling - set to 0 to disable, otherwise should be set to less than the angularSpeed value.
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = -10.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.Arms2LegsPhase">
            <summary>
            Phase angle between the arms and legs circling angle.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 6.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.Arms2LegsSync">
            <summary>
            Syncs the arms angle to what the leg angle is.
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.Synchroisation.AlwaysSynced"/>.
            All speed/direction parameters of armswindmill are overwritten if = <see cref="F:GTA.NaturalMotion.Synchroisation.AlwaysSynced"/>.
            If <see cref="F:GTA.NaturalMotion.Synchroisation.SyncedAtStart"/> and you want synced arms/legs then armAngSpeed=legAngSpeed, legAsymmetry = 0.0 (to stop randomizations of the leg cicle speed).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.ArmsUp">
            <summary>
            Where to put the arms when preparing to land.
            Approx 1 = above head, 0 = head height, -1 = down.
            LT -2.0 use catchFall arms, LT -3.0 use prepare for landing pose if Agent is due to land vertically, feet first.
            </summary>
            <remarks>
            Default value = -3.1f.
            Min value = -4.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.OrientateBodyToFallDirection">
            <summary>
            Toggle to orientate to fall direction.
            i.e. orientate so that the character faces the horizontal velocity direction.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.OrientateTwist">
            <summary>
            If false don't worry about the twist angle of the character when orientating the character.
            If false this allows the twist axis of the character to be free (You can get a nice twisting highFall like the one in dieHard 4 when the car goes into the helicopter).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.OrientateMax">
            <summary>
            DEVEL parameter - suggest you don't edit it.
            Maximum torque the orientation controller can apply.
            If 0 then no helper torques will be used.
            300 will orientate the character softly for all but extreme angles away from aimAngleBase.
            If abs (current -aimAngleBase) is getting near 3.0 then this can be reduced to give a softer feel.
            </summary>
            <remarks>
            Default value = 300.0f.
            Min value = 0.0f.
            Max value = 2000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.AlanRickman">
            <summary>
            If true then orientate the character to face the point from where it started falling.
            High fall like the one in "Die Hard" with Alan Rickman.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.FowardRoll">
            <summary>
            Try to execute a forward Roll on landing.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.UseZeroPose_withFowardRoll">
            <summary>
            Blend to a zero pose when forward roll is attempted.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.AimAngleBase">
            <summary>
            Angle from vertical the pdController is driving to (positive = forwards).
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -3.1f.
            Max value = 3.1f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.FowardVelRotation">
            <summary>
            Scale to add/subtract from aimAngle based on forward speed (Internal).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.FootVelCompScale">
            <summary>
            Scale to change to amount of vel that is added to the foot ik from the velocity (Internal).
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.SideD">
            <summary>
            Side offset for the feet during prepareForLanding. +ve = right.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.FowardOffsetOfLegIK">
            <summary>
            Forward offset for the feet during prepareForLanding.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.LegL">
            <summary>
            Leg Length for ik (Internal)//unused.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.CatchFallCutOff">
            <summary>
            0.5angle is 0.878 dot. Cutoff to go to the catchFall ( internal) //mmmtodo do like crashOrLandCutOff.
            </summary>
            <remarks>
            Default value = 0.9f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.LegStrength">
            <summary>
            Strength of the legs at landing.
            </summary>
            <remarks>
            Default value = 12.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.Balance">
            <summary>
            If true have enough strength to balance.  If false not enough strength in legs to balance (even though bodyBlance called).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.IgnorWorldCollisions">
            <summary>
            Never go into bailout (foetal).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.AdaptiveCircling">
            <summary>
            Stunt man type fall.
            Arm and legs circling direction controlled by angmom and orientation.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.Hula">
            <summary>
            With stunt man type fall.
            Hula reaction if can't see floor and not rotating fast.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.MaxSpeedForRecoverableFall">
            <summary>
            Character needs to be moving less than this speed to consider fall as a recoverable one.
            </summary>
            <remarks>
            Default value = 15.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.MinSpeedForBrace">
            <summary>
            Character needs to be moving at least this fast horizontally to start bracing for impact if there is an object along its trajectory.
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.LandingNormal">
            <summary>
            Ray-cast normal doted with up direction has to be greater than this number to consider object flat enough to land on it.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.IncomingTransformsHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the IncomingTransformsHelper for sending a IncomingTransforms <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the IncomingTransforms <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="T:GTA.NaturalMotion.InjuredOnGroundHelper">
            <summary>
            InjuredOnGround.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.InjuredOnGroundHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the InjuredOnGroundHelper for sending a InjuredOnGround <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the InjuredOnGround <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            InjuredOnGround.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.InjuredOnGroundHelper.NumInjuries">
            <summary>
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.InjuredOnGroundHelper.Injury1Component">
            <summary>
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.InjuredOnGroundHelper.Injury2Component">
            <summary>
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.InjuredOnGroundHelper.Injury1LocalPosition">
            <summary>
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.InjuredOnGroundHelper.Injury2LocalPosition">
            <summary>
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.InjuredOnGroundHelper.Injury1LocalNormal">
            <summary>
            </summary>
            <remarks>
            Default value = Vector3(1.0f, 0.0f, 0.0f).
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.InjuredOnGroundHelper.Injury2LocalNormal">
            <summary>
            </summary>
            <remarks>
            Default value = Vector3(1.0f, 0.0f, 0.0f).
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.InjuredOnGroundHelper.AttackerPos">
            <summary>
            </summary>
            <remarks>
            Default value = Vector3(1.0f, 0.0f, 0.0f).
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.InjuredOnGroundHelper.DontReachWithLeft">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.InjuredOnGroundHelper.DontReachWithRight">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.InjuredOnGroundHelper.StrongRollForce">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.CarriedHelper">
            <summary>
            Carried.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.CarriedHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the CarriedHelper for sending a Carried <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the Carried <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Carried.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.DangleHelper">
            <summary>
            Dangle.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.DangleHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the DangleHelper for sending a Dangle <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the Dangle <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Dangle.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.DangleHelper.DoGrab">
            <summary>
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.DangleHelper.GrabFrequency">
            <summary>
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.OnFireHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the OnFireHelper for sending a OnFire <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the OnFire <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.StaggerTime">
            <summary>
            Max time for stumbling around before falling to ground.
            </summary>
            <remarks>
            Default value = 2.5f.
            Min value = 0.0f.
            Max value = 30.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.StaggerLeanRate">
            <summary>
            How quickly the character leans hips when staggering.
            </summary>
            <remarks>
            Default value = 0.9f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.StumbleMaxLeanBack">
            <summary>
            Max the character leans hips back when staggering.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 1.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.StumbleMaxLeanForward">
            <summary>
            Max the character leans hips forwards when staggering.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.ArmsWindmillWritheBlend">
            <summary>
            Blend armsWindmill with the bodyWrithe arms when character is upright.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.SpineStumbleWritheBlend">
            <summary>
            Blend spine stumble with the bodyWrithe spine when character is upright.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.LegsStumbleWritheBlend">
            <summary>
            Blend legs stumble with the bodyWrithe legs when character is upright.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.ArmsPoseWritheBlend">
            <summary>
            Blend the bodyWrithe arms with the current desired pose from on fire behavior when character is on the floor.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.SpinePoseWritheBlend">
            <summary>
            Blend the bodyWrithe back with the current desired pose from on fire behavior when character is on the floor.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.LegsPoseWritheBlend">
            <summary>
            Blend the bodyWrithe legs with the current desired pose from on fire behavior when character is on the floor.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.RollOverFlag">
            <summary>
            Flag to set bodyWrithe trying to rollOver.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.RollTorqueScale">
            <summary>
            Scale rolling torque that is applied to character spine by bodyWrithe. Torque magnitude is calculated with the following formula: m_rollOverDirection*rollOverPhase*rollTorqueScale.
            </summary>
            <remarks>
            Default value = 25.0f.
            Min value = 0.0f.
            Max value = 300.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.PredictTime">
            <summary>
            Character pose depends on character facing direction that is evaluated from its COMTM orientation.
            Set this value to 0 to use no orientation prediction i.e. current character COMTM orientation will be used to determine character facing direction and finally the pose bodyWrithe is blending to.
            Set this value to  GT  0 to predict character COMTM orientation this amount of time in seconds to the future.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.MaxRollOverTime">
            <summary>
            Rolling torque is ramped down over time. At this time in seconds torque value converges to zero. Use this parameter to restrict time the character is rolling.
            </summary>
            <remarks>
            Default value = 8.0f.
            Min value = 0.0f.
            Max value = 60.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.RollOverRadius">
            <summary>
            Rolling torque is ramped down with distance measured from position where character hit the ground and started rolling. At this distance in meters torque value converges to zero. Use this parameter to restrict distance the character travels due to rolling.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.PedalLegsHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the PedalLegsHelper for sending a PedalLegs <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the PedalLegs <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.PedalLeftLeg">
            <summary>
            Pedal with this leg or not.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.PedalRightLeg">
            <summary>
            Pedal with this leg or not.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.BackPedal">
            <summary>
            Pedal forwards or backwards.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.Radius">
            <summary>
            Base radius of pedal action.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.AngularSpeed">
            <summary>
            Rate of pedaling. If adaptivePedal4Dragging is true then the legsAngularSpeed calculated to match the linear speed of the character can have a maximum value of angularSpeed (this max used to be hard coded to 13.0).
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.LegStiffness">
            <summary>
            Stiffness of legs.
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.PedalOffset">
            <summary>
            Move the center of the pedal for the left leg up by this amount, the right leg down by this amount.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.RandomSeed">
            <summary>
            Random seed used to generate speed changes.
            </summary>
            <remarks>
            Default value = 100.
            Min value = 0.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.SpeedAsymmetry">
            <summary>
            Random offset applied per leg to the angular speed to desynchronize the pedaling - set to 0 to disable, otherwise should be set to less than the angularSpeed value.
            </summary>
            <remarks>
            Default value = 8.0f.
            Min value = -10.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.AdaptivePedal4Dragging">
            <summary>
            Will pedal in the direction of travel (if backPedal = false, against travel if backPedal = true) and with an angular velocity relative to speed upto a maximum of 13(rads/sec).  Use when being dragged by a car.  Overrides angularSpeed.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.AngSpeedMultiplier4Dragging">
            <summary>
            NewAngularSpeed = Clamp(angSpeedMultiplier4Dragging * linear_speed/pedalRadius, 0.0, angularSpeed).
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.RadiusVariance">
            <summary>
            0-1 value used to add variance to the radius value while pedalling, to desynchonize the legs' movement and provide some variety.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.LegAngleVariance">
            <summary>
            0-1 value used to vary the angle of the legs from the hips during the pedal.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.CentreSideways">
            <summary>
            Move the center of the pedal for both legs sideways (+ve = right).  NB: not applied to hula.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.CentreForwards">
            <summary>
            Move the center of the pedal for both legs forward (or backward -ve).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.CentreUp">
            <summary>
            Move the center of the pedal for both legs up (or down -ve).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.Ellipse">
            <summary>
            Turn the circle into an ellipse.  Ellipse has horizontal radius a and vertical radius b.  If ellipse is +ve then a=radius*ellipse and b=radius.  If ellipse is -ve then a=radius and b = radius*ellipse.  0.0 = vertical line of length 2*radius, 0.0:1.0 circle squashed horizontally (vertical radius = radius), 1.0=circle.  -0.001 = horizontal line of length 2*radius, -0.0:-1.0 circle squashed vertically (horizontal radius = radius), -1.0 = circle.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.DragReduction">
            <summary>
            How much to account for the target moving through space rather than being static.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.Spread">
            <summary>
            Spread legs.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.Hula">
            <summary>
            If true circle the legs in a hula motion.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.PointArmHelper">
            <summary>
            BEHAVIOURS REFERENCED: AnimPose - allows animPose to override body parts: Arms (useLeftArm, useRightArm).
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.PointArmHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the PointArmHelper for sending a PointArm <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the PointArm <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            BEHAVIOURS REFERENCED: AnimPose - allows animPose to override body parts: Arms (useLeftArm, useRightArm).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.TargetLeft">
            <summary>
            Point to point to (in world space).
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.TwistLeft">
            <summary>
            Twist of the arm around point direction.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.ArmStraightnessLeft">
            <summary>
            Values less than 1 can give the arm a more bent look.
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.UseLeftArm">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.ArmStiffnessLeft">
            <summary>
            Stiffness of arm.
            </summary>
            <remarks>
            Default value = 15.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.ArmDampingLeft">
            <summary>
            Damping value for arm used to point.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.InstanceIndexLeft">
            <summary>
            Level index of thing to point at, or -1 for none. if -1, target is specified in world space, otherwise it is an offset from the object specified by this index.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.PointSwingLimitLeft">
            <summary>
            Swing limit.
            </summary>
            <remarks>
            Default value = 1.5f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.UseZeroPoseWhenNotPointingLeft">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.TargetRight">
            <summary>
            Point to point to (in world space).
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.TwistRight">
            <summary>
            Twist of the arm around point direction.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.ArmStraightnessRight">
            <summary>
            Values less than 1 can give the arm a more bent look.
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.UseRightArm">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.ArmStiffnessRight">
            <summary>
            Stiffness of arm.
            </summary>
            <remarks>
            Default value = 15.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.ArmDampingRight">
            <summary>
            Damping value for arm used to point.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.InstanceIndexRight">
            <summary>
            Level index of thing to point at, or -1 for none. if -1, target is specified in world space, otherwise it is an offset from the object specified by this index.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.PointSwingLimitRight">
            <summary>
            Swing limit.
            </summary>
            <remarks>
            Default value = 1.5f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.UseZeroPoseWhenNotPointingRight">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.PointGunHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the PointGunHelper for sending a PointGun <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the PointGun <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.EnableRight">
            <summary>
            Allow right hand to point/support?.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.EnableLeft">
            <summary>
            Allow right hand to point/support?.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.LeftHandTarget">
            <summary>
            Target for the left Hand.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.LeftHandTargetIndex">
            <summary>
            Index of the object that the left hand target is specified in, -1 is world space.
            </summary>
            <remarks>
            Default value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.RightHandTarget">
            <summary>
            Target for the right Hand.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.RightHandTargetIndex">
            <summary>
            Index of the object that the right hand target is specified in, -1 is world space.
            </summary>
            <remarks>
            Default value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.LeadTarget">
            <summary>
            NB: Only Applied to single handed weapons (some more work is required to have this tech on two handed weapons). Amount to lead target based on target velocity relative to the chest.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.ArmStiffness">
            <summary>
            Stiffness of the arm.
            </summary>
            <remarks>
            Default value = 14.0f.
            Min value = 2.0f.
            Max value = 15.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.ArmStiffnessDetSupport">
            <summary>
            Stiffness of the arm on pointing arm when a support arm is detached from a two-handed weapon.
            </summary>
            <remarks>
            Default value = 8.0f.
            Min value = 2.0f.
            Max value = 15.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.ArmDamping">
            <summary>
            Damping.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.1f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.GravityOpposition">
            <summary>
            Amount of gravity opposition on pointing arm.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.GravOppDetachedSupport">
            <summary>
            Amount of gravity opposition on pointing arm when a support arm is detached from a two-handed weapon.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.MassMultDetachedSupport">
            <summary>
            Amount of mass of weapon taken into account by gravity opposition on pointing arm when a support arm is detached from a two-handed weapon.  The lower the value the more the character doesn't know about the weapon mass and therefore is more affected by it.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.AllowShotLooseness">
            <summary>
            Allow shot to set a lower arm muscleStiffness than pointGun normally would.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.ClavicleBlend">
            <summary>
            How much of blend should come from incoming transforms 0(all IK) .. 1(all ITMs)   For pointing arms only.  (Support arm uses the IK solution as is for clavicles).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.ElbowAttitude">
            <summary>
            Controls arm twist. (except in pistolIK).
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.SupportConstraint">
            <summary>
            Type of constraint between the support hand and gun.  0=no constraint, 1=hard distance constraint, 2=Force based constraint, 3=hard spherical constraint.
            </summary>
            <remarks>
            Default value = 1.
            Min value = 0.
            Max value = 3.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.ConstraintMinDistance">
            <summary>
            For supportConstraint = 1: Support hand constraint distance will be slowly reduced until it hits this value.  This is for stability and also allows the pointing arm to lead a little.  Don't set lower than NM_MIN_STABLE_DISTANCECONSTRAINT_DISTANCE 0.001f.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 0.1f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.MakeConstraintDistance">
            <summary>
            For supportConstraint = 1:  Minimum distance within which support hand constraint will be made.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.ReduceConstraintLengthVel">
            <summary>
            For supportConstraint = 1:  Velocity at which to reduce the support hand constraint length.
            </summary>
            <remarks>
            Default value = 1.5f.
            Min value = 0.1f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.BreakingStrength">
            <summary>
            For supportConstraint = 1: strength of the supporting hands constraint (kg m/s), -1 to ignore/disable.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.BrokenSupportTime">
            <summary>
            Once constraint is broken then do not try to reconnect/support for this amount of time.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.BrokenToSideProb">
            <summary>
            Probability that the when a constraint is broken that during brokenSupportTime a side pose will be selected.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.ConnectAfter">
            <summary>
            If gunArm has been controlled by other behaviors for this time when it could have been pointing but couldn't due to pointing only allowed if connected, change gunArm pose to something that could connect for connectFor seconds.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.ConnectFor">
            <summary>
            Time to try to reconnect for.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.OneHandedPointing">
            <summary>
            0 = don't allow, 1= allow for kPistol(two handed pistol) only, 2 = allow for kRifle only, 3 = allow for kPistol and kRifle. Allow one handed pointing - no constraint if cant be supported .  If not allowed then gunHand does not try to point at target if it cannot be supported - the constraint will be controlled by always support.
            </summary>
            <remarks>
            Default value = 1.
            Min value = 0.
            Max value = 3.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.AlwaysSupport">
            <summary>
            Support a non pointing gunHand i.e. if in zero pose (constrain as well  if constraint possible).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.PoseUnusedGunArm">
            <summary>
            Apply neutral pose when a gun arm isn't in use.  NB: at the moment Rifle hand is always controlled by pointGun.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.PoseUnusedSupportArm">
            <summary>
            Apply neutral pose when a support arm isn't in use.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.PoseUnusedOtherArm">
            <summary>
            Apply neutral pose to the non-gun arm (otherwise it is always under the control of other behaviors or not set). If the non-gun hand is a supporting hand it is not controlled by this parameter but by poseUnusedSupportArm.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.MaxAngleAcross">
            <summary>
            Max aiming angle(deg) sideways across body midline measured from chest forward that the character will try to point.
            </summary>
            <remarks>
            Default value = 90.0f.
            Min value = 0.0f.
            Max value = 180.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.MaxAngleAway">
            <summary>
            Max aiming angle(deg) sideways away from body midline measured from chest forward that the character will try to point.
            </summary>
            <remarks>
            Default value = 90.0f.
            Min value = 0.0f.
            Max value = 180.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.FallingLimits">
            <summary>
            0= don't apply limits.  1=apply the limits below only when the character is falling.  2 =  always apply these limits (instead of applying maxAngleAcross and maxAngleAway which only limits the horizontal angle but implicity limits the updown (the limit shape is a vertical hinge).
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.AcrossLimit">
            <summary>
            Max aiming angle(deg) sideways across body midline measured from chest forward that the character will try to point.  i.e. for rightHanded gun this is the angle left of the midline.
            </summary>
            <remarks>
            Default value = 90.0f.
            Min value = 0.0f.
            Max value = 180.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.AwayLimit">
            <summary>
            Max aiming angle(deg) sideways away from body midline measured from chest forward that the character will try to point.  i.e. for rightHanded gun this is the angle right of the midline.
            </summary>
            <remarks>
            Default value = 90.0f.
            Min value = 0.0f.
            Max value = 180.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.UpLimit">
            <summary>
            Max aiming angle(deg) upwards from body midline measured from chest forward that the character will try to point.
            </summary>
            <remarks>
            Default value = 90.0f.
            Min value = 0.0f.
            Max value = 180.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.DownLimit">
            <summary>
            Max aiming angle(deg) downwards from body midline measured from chest forward that the character will try to point.
            </summary>
            <remarks>
            Default value = 45.0f.
            Min value = 0.0f.
            Max value = 180.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.RifleFall">
            <summary>
            Pose the rifle hand to reduce complications with collisions. 0 = false, 1 = always when falling, 2 = when falling except if falling backwards.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.FallingSupport">
            <summary>
            Allow supporting of a rifle(or two handed pistol) when falling. 0 = false, 1 = support if allowed, 2 = support until constraint not active (don't allow support to restart), 3 = support until constraint not effective (support hand to support distance must be less than 0.15 - don't allow support to restart).
            </summary>
            <remarks>
            Default value = 1.
            Min value = 0.
            Max value = 3.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.FallingTypeSupport">
            <summary>
            What is considered a fall by fallingSupport). Apply fallingSupport 0=never(will support if allowed), 1 = falling, 2 = falling except if falling backwards, 3 = falling and collided, 4 = falling and collided except if falling backwards, 5 = falling except if falling backwards until collided.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 5.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.PistolNeutralType">
            <summary>
            0 = byFace, 1=acrossFront, 2=bySide.  NB: bySide is not connectible so be careful if combined with kPistol and oneHandedPointing = 0 or 2.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.NeutralPoint4Pistols">
            <summary>
            NOT IMPLEMENTED YET KEEP=false - use pointing for neutral targets in pistol modes.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.NeutralPoint4Rifle">
            <summary>
            Use pointing for neutral targets in rifle mode.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.CheckNeutralPoint">
            <summary>
            Check the neutral pointing is pointable, if it isn't then choose a neutral pose instead.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.Point2Side">
            <summary>
            Side, up, back) side is left for left arm, right for right arm mmmmtodo.
            </summary>
            <remarks>
            Default value = Vector3(5.0f, -5.0f, -2.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.Add2WeaponDistSide">
            <summary>
            Add to weaponDistance for point2Side neutral pointing (to straighten the arm).
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = -1.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.Point2Connect">
            <summary>
            Side, up, back) side is left for left arm, right for rght arm mmmmtodo.
            </summary>
            <remarks>
            Default value = Vector3(-1.0f, -0.9f, -0.2f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.Add2WeaponDistConnect">
            <summary>
            Add to weaponDistance for point2Connect neutral pointing (to straighten the arm).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.UsePistolIK">
            <summary>
            Enable new ik for pistol pointing.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.UseSpineTwist">
            <summary>
            Use spine twist to orient chest?.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.UseTurnToTarget">
            <summary>
            Turn balancer to help gun point at target.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.UseHeadLook">
            <summary>
            Use head look to drive head?.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.ErrorThreshold">
            <summary>
            Angular difference between pointing direction and target direction above which feedback will be generated.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 3.1f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.FireWeaponRelaxTime">
            <summary>
            Duration of arms relax following firing weapon.  NB:This is clamped (0,5) in pointGun.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.FireWeaponRelaxAmount">
            <summary>
            Relax multiplier following firing weapon. Recovers over relaxTime.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.1f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.FireWeaponRelaxDistance">
            <summary>
            Range of motion for ik-based recoil.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 0.3f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.UseIncomingTransforms">
            <summary>
            Use the incoming transforms to inform the pointGun of the primaryWeaponDistance, poleVector for the arm.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.MeasureParentOffset">
            <summary>
            If useIncomingTransforms = true and measureParentOffset=true then measure the Pointing-from offset from parent effector, using itms - this should point the barrel of the gun to the target.  This is added to the rightHandParentOffset. NB NOT used if rightHandParentEffector LT 0.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.LeftHandParentOffset">
            <summary>
            Pointing-from offset from parent effector, expressed in spine3's frame, x = back/forward, y = right/left, z = up/down.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.LeftHandParentEffector">
            <summary>
            1 = Use leftShoulder. Effector from which the left hand pointing originates. Ie, point from this part to the target. -1 causes default offset for active weapon mode to be applied.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            Max value = 21.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.RightHandParentOffset">
            <summary>
            Pointing-from offset from parent effector, expressed in spine3's frame, x = back/forward, y = right/left, z = up/down. This is added to the measured one if useIncomingTransforms=true and measureParentOffset=true.  NB NOT used if rightHandParentEffector LT 0.  Pistol(0,0,0) Rifle(0.0032, 0.0, -0.0).
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.RightHandParentEffector">
            <summary>
            1 = Use rightShoulder.. Effector from which the right hand pointing originates. Ie, point from this part to the target. -1 causes default offset for active weapon mode to be applied.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            Max value = 21.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.PrimaryHandWeaponDistance">
            <summary>
            Distance from the shoulder to hold the weapon. If -1 and useIncomingTransforms then weaponDistance is read from ITMs. WeaponDistance=primaryHandWeaponDistance clamped [0.2f:m_maxArmReach=0.65] if useIncomingTransforms = false. pistol 0.60383, rifle 0.336.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.ConstrainRifle">
            <summary>
            Use hard constraint to keep rifle stock against shoulder?.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.RifleConstraintMinDistance">
            <summary>
            Rifle constraint distance. Deliberately kept large to create a flat constraint surface where rifle meets the shoulder.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.DisableArmCollisions">
            <summary>
            Disable collisions between right hand/forearm and the torso/legs.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.DisableRifleCollisions">
            <summary>
            Disable collisions between right hand/forearm and spine3/spine2 if in rifle mode.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.PointGunExtraHelper">
            <summary>
            Seldom set parameters for pointGun - just to keep number of parameters in any message less than or equal to 64.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.PointGunExtraHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the PointGunExtraHelper for sending a PointGunExtra <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the PointGunExtra <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Seldom set parameters for pointGun - just to keep number of parameters in any message less than or equal to 64.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunExtraHelper.ConstraintStrength">
            <summary>
            For supportConstraint = 2: force constraint strength of the supporting hands - it gets shaky at about 4.0.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunExtraHelper.ConstraintThresh">
            <summary>
            For supportConstraint = 2:  Like makeConstraintDistance. Force starts acting when the hands are  LT  3.0*thresh apart but is maximum strength  LT  thresh. For comparison: 0.1 is used for reachForWound in shot, 0.25 is used in grab.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunExtraHelper.WeaponMask">
            <summary>
            Currently unused - no intoWorldTest. RAGE bit mask to exclude weapons from ray probe - currently defaults to MP3 weapon flag.
            </summary>
            <remarks>
            Default value = 1024.
            Min value = 0.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunExtraHelper.TimeWarpActive">
            <summary>
            Is timeWarpActive enabled?.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunExtraHelper.TimeWarpStrengthScale">
            <summary>
            Scale for arm and helper strength when timewarp is enabled. 1 = normal compensation.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.1f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunExtraHelper.OriStiff">
            <summary>
            Hand stabilization controller stiffness.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunExtraHelper.OriDamp">
            <summary>
            Hand stabilization controller damping.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunExtraHelper.PosStiff">
            <summary>
            Hand stabilization controller stiffness.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunExtraHelper.PosDamp">
            <summary>
            Hand stabilization controller damping.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.RollDownStairsHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the RollDownStairsHelper for sending a RollDownStairs <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the RollDownStairs <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.Stiffness">
            <summary>
            Effector Stiffness. Value feeds through to rollUp directly.
            </summary>
            <remarks>
            Default value = 11.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.Damping">
            <summary>
            Effector  Damping.
            </summary>
            <remarks>
            Default value = 1.4f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.Forcemag">
            <summary>
            Helper force strength.  Do not go above 1 for a rollDownStairs/roll along ground reaction.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.M_useArmToSlowDown">
            <summary>
            The degree to which the character will try to stop a barrel roll with his arms.
            </summary>
            <remarks>
            Default value = -1.9f.
            Min value = -3.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.UseZeroPose">
            <summary>
            Blends between a zeroPose and the Rollup, Faster the character is rotating the less the zeroPose.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.SpinWhenInAir">
            <summary>
            Applied cheat forces to spin the character when in the air, the forces are 40% of the forces applied when touching the ground.  Be careful little bunny rabbits, the character could spin unnaturally in the air.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.M_armReachAmount">
            <summary>
            How much the character reaches with his arms to brace against the ground.
            </summary>
            <remarks>
            Default value = 1.4f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.M_legPush">
            <summary>
            Amount that the legs push outwards when tumbling.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.TryToAvoidHeadButtingGround">
            <summary>
            Blends between a zeroPose and the Rollup, Faster the character is rotating the less the zeroPose.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.ArmReachLength">
            <summary>
            The length that the arm reaches and so how much it straightens.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.CustomRollDir">
            <summary>
            Pass in a custom direction in to have the character try and roll in that direction.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 1.0f).
            Min value = 1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.UseCustomRollDir">
            <summary>
            Pass in true to use the customRollDir parameter.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.StiffnessDecayTarget">
            <summary>
            The target linear velocity used to start the rolling.
            </summary>
            <remarks>
            Default value = 9.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.StiffnessDecayTime">
            <summary>
            Time, in seconds, to decay stiffness down to the stiffnessDecayTarget value (or -1 to disable).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.AsymmetricalLegs">
            <summary>
            0 is no leg asymmetry in 'foetal' position.  greater than 0 a asymmetricalLegs-rand(30%), added/minus each joint of the legs in radians.  Random number changes about once every roll.  0.4 gives a lot of asymmetry.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.ZAxisSpinReduction">
            <summary>
            Tries to reduce the spin around the z axis. Scale 0 - 1.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.TargetLinearVelocityDecayTime">
            <summary>
            Time for the targetlinearVelocity to decay to zero.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.TargetLinearVelocity">
            <summary>
            Helper torques are applied to match the spin of the character to the max of targetLinearVelocity and COMVelMag.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.OnlyApplyHelperForces">
            <summary>
            Don't use rollup if true.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.UseVelocityOfObjectBelow">
            <summary>
            Scale applied cheat forces/torques to (zero) if object underneath character has velocity greater than 1.f.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.UseRelativeVelocity">
            <summary>
            UseVelocityOfObjectBelow uses a relative velocity of the character to the object underneath.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.ApplyFoetalToLegs">
            <summary>
            If true, use rollup for upper body and a kind of foetal behavior for legs.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.MovementLegsInFoetalPosition">
            <summary>
            Only used if applyFoetalToLegs = true : define the variation of angles for the joints of the legs.
            </summary>
            <remarks>
            Default value = 1.3f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.MaxAngVelAroundFrontwardAxis">
            <summary>
            Only used if applyNewRollingCheatingTorques or applyHelPerTorqueToAlign defined to true : maximal angular velocity around frontward axis of the pelvis to apply cheating torques.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = -1.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.MinAngVel">
            <summary>
            Only used if applyNewRollingCheatingTorques or applyHelPerTorqueToAlign defined to true : minimal angular velocity of the roll to apply cheating torques.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.ApplyNewRollingCheatingTorques">
            <summary>
            If true will use the new way to apply cheating torques (like in fallOverWall), otherwise will use the old way.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.MaxAngVel">
            <summary>
            Only used if applyNewRollingCheatingTorques defined to true : maximal angular velocity of the roll to apply cheating torque.
            </summary>
            <remarks>
            Default value = 5.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.MagOfTorqueToRoll">
            <summary>
            Only used if applyNewRollingCheatingTorques defined to true : magnitude of the torque to roll down the stairs.
            </summary>
            <remarks>
            Default value = 50.0f.
            Min value = 0.0f.
            Max value = 500.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.ApplyHelPerTorqueToAlign">
            <summary>
            Apply torque to align the body orthogonally to the direction of the roll.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.DelayToAlignBody">
            <summary>
            Only used if applyHelPerTorqueToAlign defined to true : delay to start to apply torques.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.MagOfTorqueToAlign">
            <summary>
            Only used if applyHelPerTorqueToAlign defined to true : magnitude of the torque to align orthogonally the body.
            </summary>
            <remarks>
            Default value = 50.0f.
            Min value = 0.0f.
            Max value = 500.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.AirborneReduction">
            <summary>
            Ordinarily keep at 0.85.  Make this lower if you want spinning in the air.
            </summary>
            <remarks>
            Default value = 0.9f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.ApplyMinMaxFriction">
            <summary>
            Pass-through to Roll Up. Controls whether or not behavior enforces min/max friction.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.LimitSpinReduction">
            <summary>
            Scale zAxisSpinReduction back when rotating end-over-end (somersault) to give the body a chance to align with the axis of rotation.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ShotHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ShotHelper for sending a Shot <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the Shot <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.BodyStiffness">
            <summary>
            Stiffness of body. Feeds through to roll_up.
            </summary>
            <remarks>
            Default value = 11.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.SpineDamping">
            <summary>
            Stiffness of body. Feeds through to roll_up.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.1f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.ArmStiffness">
            <summary>
            Arm stiffness.
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.InitialNeckStiffness">
            <summary>
            Initial stiffness of neck after being shot.
            </summary>
            <remarks>
            Default value = 14.0f.
            Min value = 3.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.InitialNeckDamping">
            <summary>
            Intial damping of neck after being shot.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.1f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.NeckStiffness">
            <summary>
            Stiffness of neck.
            </summary>
            <remarks>
            Default value = 14.0f.
            Min value = 3.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.NeckDamping">
            <summary>
            Damping of neck.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.1f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.KMultOnLoose">
            <summary>
            How much to add to upperbody stiffness dependent on looseness.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.KMult4Legs">
            <summary>
            How much to add to leg stiffnesses dependent on looseness.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.LoosenessAmount">
            <summary>
            How loose the character is made by a newBullet. Between 0 and 1.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.Looseness4Fall">
            <summary>
            How loose the character is made by a newBullet if falling.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.Looseness4Stagger">
            <summary>
            How loose the upperBody of the character is made by a newBullet if staggerFall is running (and not falling).  Note atm the neck ramp values are ignored in staggerFall.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.MinArmsLooseness">
            <summary>
            Minimum looseness to apply to the arms.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.MinLegsLooseness">
            <summary>
            Minimum looseness to apply to the Legs.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.GrabHoldTime">
            <summary>
            How long to hold for before returning to relaxed arm position.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.SpineBlendExagCPain">
            <summary>
            True: spine is blended with zero pose, false: spine is blended with zero pose if not setting exag or cpain.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.SpineBlendZero">
            <summary>
            Spine is always blended with zero pose this much and up to 1 as the character become stationary.  If negative no blend is ever applied.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = -0.1f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.BulletProofVest">
            <summary>
            Looseness applied to spine is different if bulletProofVest is true.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.AlwaysResetLooseness">
            <summary>
            Looseness always reset on shotNewBullet even if previous looseness ramp still running.  Except for the neck which has it's own ramp.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.AlwaysResetNeckLooseness">
            <summary>
            Neck looseness always reset on shotNewBullet even if previous looseness ramp still running.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.AngVelScale">
            <summary>
            How much to scale the angular velocity coming in from animation of a part if it is in angVelScaleMask (otherwise scale by 1.0).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.AngVelScaleMask">
            <summary>
            Parts to scale the initial angular velocity by angVelScale (otherwize scale by 1.0).
            </summary>
            <remarks>
            Default value = "fb".
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.FlingWidth">
            <summary>
            Width of the fling behavior.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.FlingTime">
            <summary>
            Duration of the fling behavior.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.TimeBeforeReachForWound">
            <summary>
            Time, in seconds, before the character begins to grab for the wound on the first hit.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.ExagDuration">
            <summary>
            Exaggerate bullet duration (at exagMag/exagTwistMag).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.ExagMag">
            <summary>
            Exaggerate bullet spine Lean magnitude.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.ExagTwistMag">
            <summary>
            Exaggerate bullet spine Twist magnitude.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.ExagSmooth2Zero">
            <summary>
            Exaggerate bullet duration ramping to zero after exagDuration.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.ExagZeroTime">
            <summary>
            Exaggerate bullet time spent at 0 spine lean/twist after exagDuration + exagSmooth2Zero.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.CpainSmooth2Time">
            <summary>
            Conscious pain duration ramping from zero to cpainMag/cpainTwistMag.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.CpainDuration">
            <summary>
            Conscious pain duration at cpainMag/cpainTwistMag after cpainSmooth2Time.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.CpainMag">
            <summary>
            Conscious pain spine Lean(back/Forward) magnitude (Replaces spinePainMultiplier).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.CpainTwistMag">
            <summary>
            Conscious pain spine Twist/Lean2Side magnitude Replaces spinePainTwistMultiplier).
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.CpainSmooth2Zero">
            <summary>
            Conscious pain ramping to zero after cpainSmooth2Time + cpainDuration (Replaces spinePainTime).
            </summary>
            <remarks>
            Default value = 1.5f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.Crouching">
            <summary>
            Is the guy crouching or not.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.ChickenArms">
            <summary>
            Type of reaction.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.ReachForWound">
            <summary>
            Type of reaction.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.Fling">
            <summary>
            Type of reaction.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.AllowInjuredArm">
            <summary>
            Injured arm code runs if arm hit (turns and steps and bends injured arm).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.AllowInjuredLeg">
            <summary>
            When false injured leg is not bent and character does not bend to reach it.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.AllowInjuredLowerLegReach">
            <summary>
            When false don't try to reach for injured Lower Legs (shins/feet).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.AllowInjuredThighReach">
            <summary>
            When false don't try to reach for injured Thighs.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.StableHandsAndNeck">
            <summary>
            Additional stability for hands and neck (less loose).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.Melee">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.FallingReaction">
            <summary>
            0=Rollup, 1=Catchfall, 2=rollDownStairs, 3=smartFall.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 3.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.UseExtendedCatchFall">
            <summary>
            Keep the character active instead of relaxing at the end of the catch fall.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.InitialWeaknessZeroDuration">
            <summary>
            Duration for which the character's upper body stays at minimum stiffness (not quite zero).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.InitialWeaknessRampDuration">
            <summary>
            Duration of the ramp to bring the character's upper body stiffness back to normal levels.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.InitialNeckDuration">
            <summary>
            Duration for which the neck stays at intial stiffness/damping.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.InitialNeckRampDuration">
            <summary>
            Duration of the ramp to bring the neck stiffness/damping back to normal levels.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.UseCStrModulation">
            <summary>
            If enabled upper and lower body strength scales with character strength, using the range given by parameters below.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.CStrUpperMin">
            <summary>
            Proportions to what the strength would be normally.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.1f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.CStrUpperMax">
            <summary>
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.1f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.CStrLowerMin">
            <summary>
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.1f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.CStrLowerMax">
            <summary>
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.1f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.DeathTime">
            <summary>
            Time to death (HACK for underwater). If -ve don't ever die.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ShotNewBulletHelper">
            <summary>
            Send new wound information to the shot.  Can cause shot to restart it's performance in part or in whole.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ShotNewBulletHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ShotNewBulletHelper for sending a ShotNewBullet <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ShotNewBullet <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Send new wound information to the shot.  Can cause shot to restart it's performance in part or in whole.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotNewBulletHelper.BodyPart">
            <summary>
            Part ID on the body where the bullet hit.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 21.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotNewBulletHelper.LocalHitPointInfo">
            <summary>
            If true then normal and hitPoint should be supplied in local coordinates of bodyPart.  If false then normal and hitPoint should be supplied in World coordinates.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotNewBulletHelper.Normal">
            <summary>
            Normal coming out of impact point on character.  Can be local or global depending on localHitPointInfo.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, -1.0f).
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotNewBulletHelper.HitPoint">
            <summary>
            Position of impact on character. Can be local or global depending on localHitPointInfo.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotNewBulletHelper.BulletVel">
            <summary>
            Bullet velocity in world coordinates.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            Min value = -2000.0f.
            Max value = 2000.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ShotSnapHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ShotSnapHelper for sending a ShotSnap <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ShotSnap <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.Snap">
            <summary>
            Add a Snap to shot.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapMag">
            <summary>
            The magnitude of the reaction.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = -10.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapMovingMult">
            <summary>
            MovingMult*snapMag = The magnitude of the reaction if moving(comVelMag) faster than movingThresh.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapBalancingMult">
            <summary>
            BalancingMult*snapMag = The magnitude of the reaction if balancing = (not lying on the floor/ not upper body not collided) and not airborne.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapAirborneMult">
            <summary>
            AirborneMult*snapMag = The magnitude of the reaction if airborne.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapMovingThresh">
            <summary>
            If moving(comVelMag) faster than movingThresh then mvingMult applied to stunMag.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapDirectionRandomness">
            <summary>
            The character snaps in a prescribed way (decided by bullet direction) - Higher the value the more random this direction is.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapLeftArm">
            <summary>
            Snap the leftArm.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapRightArm">
            <summary>
            Snap the rightArm.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapLeftLeg">
            <summary>
            Snap the leftLeg.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapRightLeg">
            <summary>
            Snap the rightLeg.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapSpine">
            <summary>
            Snap the spine.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapNeck">
            <summary>
            Snap the neck.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapPhasedLegs">
            <summary>
            Legs are either in phase with each other or not.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapHipType">
            <summary>
            Type of hip reaction 0=none, 1=side2side 2=steplike.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapUseBulletDir">
            <summary>
            Legs are either in phase with each other or not.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapHitPart">
            <summary>
            Snap only around the wounded part//mmmmtodo check whether bodyPart doesn't have to be remembered for unSnap.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.UnSnapInterval">
            <summary>
            Interval before applying reverse snap.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.UnSnapRatio">
            <summary>
            The magnitude of the reverse snap.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapUseTorques">
            <summary>
            Use torques to make the snap otherwise use a change in the parts angular velocity.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ShotShockSpinHelper">
            <summary>
            Configure the shockSpin effect in shot.  Spin/Lift the character using cheat torques/forces.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ShotShockSpinHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ShotShockSpinHelper for sending a ShotShockSpin <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ShotShockSpin <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Configure the shockSpin effect in shot.  Spin/Lift the character using cheat torques/forces.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.AddShockSpin">
            <summary>
            If enabled, add a short 'shock' of torque to the character's spine to exaggerate bullet impact.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.RandomizeShockSpinDirection">
            <summary>
            For use with close-range shotgun blasts, or similar.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.AlwaysAddShockSpin">
            <summary>
            If true, apply the shock spin no matter which body component was hit. Otherwise only apply if the spine or clavicles get hit.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.ShockSpinMin">
            <summary>
            Minimum amount of torque to add if using shock-spin feature.
            </summary>
            <remarks>
            Default value = 50.0f.
            Min value = 0.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.ShockSpinMax">
            <summary>
            Maximum amount of torque to add if using shock-spin feature.
            </summary>
            <remarks>
            Default value = 90.0f.
            Min value = 0.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.ShockSpinLiftForceMult">
            <summary>
            If greater than 0, apply a force to lift the character up while the torque is applied, trying to produce a dramatic spun/twist shotgun-to-the-chest effect. This is a scale of the torque applied, so 8.0 or so would give a reasonable amount of lift.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.ShockSpinDecayMult">
            <summary>
            Multiplier used when decaying torque spin over time.
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.ShockSpinScalePerComponent">
            <summary>
            Torque applied is scaled by this amount across the spine components - spine2 recieving the full amount, then 3 and 1 and finally 0. Each time, this value is used to scale it down. 0.5 means half the torque each time.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.ShockSpinMaxTwistVel">
            <summary>
            Shock spin ends when twist velocity is greater than this value (try 6.0).  If set to -1 does not stop.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 200.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.ShockSpinScaleByLeverArm">
            <summary>
            Shock spin scales by lever arm of bullet i.e. bullet impact point to center line.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.ShockSpinAirMult">
            <summary>
            ShockSpin's torque is multipied by this value when both the character's feet are not in contact.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.ShockSpin1FootMult">
            <summary>
            ShockSpin's torque is multipied by this value when the one of the character's feet are not in contact.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.ShockSpinFootGripMult">
            <summary>
            ShockSpin scales the torques applied to the feet by footSlipCompensation.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.BracedSideSpinMult">
            <summary>
            If shot on a side with a forward foot and both feet are on the ground and balanced, increase the shockspin to compensate for the balancer naturally resisting spin to that side.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 1.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ShotFallToKneesHelper">
            <summary>
            Configure the fall to knees shot.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ShotFallToKneesHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ShotFallToKneesHelper for sending a ShotFallToKnees <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ShotFallToKnees <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Configure the fall to knees shot.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FallToKnees">
            <summary>
            Type of reaction.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkAlwaysChangeFall">
            <summary>
            Always change fall behavior.  If false only change when falling forward.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkBalanceTime">
            <summary>
            How long the balancer runs for before fallToKnees starts.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkHelperForce">
            <summary>
            Hip helper force magnitude - to help character lean over balance point of line between toes.
            </summary>
            <remarks>
            Default value = 200.0f.
            Min value = 0.0f.
            Max value = 2000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkHelperForceOnSpine">
            <summary>
            Helper force applied to spine3 as well.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkLeanHelp">
            <summary>
            Help balancer lean amount - to help character lean over balance point of line between toes.
            Half of this is also applied as hipLean.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 0.3f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkSpineBend">
            <summary>
            Bend applied to spine when falling from knees. (+ve forward - try -0.1) (only if rds called).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -0.2f.
            Max value = 0.3f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkStiffSpine">
            <summary>
            Stiffen spine when falling from knees (only if rds called).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkImpactLooseness">
            <summary>
            Looseness (muscleStiffness = 1.01f - m_parameters.ftkImpactLooseness) applied to upperBody on knee impacts.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkImpactLoosenessTime">
            <summary>
            Time that looseness is applied after knee impacts.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -0.1f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkBendRate">
            <summary>
            Rate at which the legs are bent to go from standing to on knees.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkHipBlend">
            <summary>
            Blend from current hip to balancing on knees hip angle.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkLungeProb">
            <summary>
            Probability that a lunge reaction will be allowed.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkKneeSpin">
            <summary>
            When on knees allow some spinning of the character.
            If false then the balancers' footSlipCompensation remains on and tends to keep the character facing the same way as when it was balancing.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkFricMult">
            <summary>
            Multiplier on the reduction of friction for the feet based on angle away from horizontal - helps the character fall to knees quicker.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkHipAngleFall">
            <summary>
            Apply this hip angle when the character starts to fall backwards when on knees.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkPitchForwards">
            <summary>
            Hip pitch applied (+ve forward, -ve backwards) if character is falling forwards on way down to it's knees.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = -0.5f.
            Max value = 0.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkPitchBackwards">
            <summary>
            Hip pitch applied (+ve forward, -ve backwards) if character is falling backwards on way down to it's knees.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = -0.5f.
            Max value = 0.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkFallBelowStab">
            <summary>
            Balancer instability below which the character starts to bend legs even if it isn't going to fall on to it's knees (i.e. if going backwards).
            0.3 almost ensures a fall to knees but means the character will keep stepping backward until it slows down enough.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 15.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkBalanceAbortThreshold">
            <summary>
            When the character gives up and goes into a fall.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkOnKneesArmType">
            <summary>
            Type of arm response when on knees falling forward 0=useFallArms (from RollDownstairs or catchFall), 1= armsIn, 2=armsOut.
            </summary>
            <remarks>
            Default value = 2.
            Min value = 0.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkReleaseReachForWound">
            <summary>
            Release the reachForWound this amount of time after the knees have hit.
            If LT 0.0 then keep reaching for wound regardless of fall/onground state.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkReachForWound">
            <summary>
            True = Keep reaching for wound regardless of fall/onground state.
            false = respect the shotConfigureArms params: reachFalling, reachFallingWithOneHand, reachOnFloor.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkReleasePointGun">
            <summary>
            Override the pointGun when knees hit.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkFailMustCollide">
            <summary>
            The upper body of the character must be colliding and other failure conditions met to fail.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ShotFromBehindHelper">
            <summary>
            Configure the shot from behind reaction.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ShotFromBehindHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ShotFromBehindHelper for sending a ShotFromBehind <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ShotFromBehind <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Configure the shot from behind reaction.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFromBehindHelper.ShotFromBehind">
            <summary>
            Type of reaction.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFromBehindHelper.SfbSpineAmount">
            <summary>
            SpineBend.
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFromBehindHelper.SfbNeckAmount">
            <summary>
            Neck Bend.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFromBehindHelper.SfbHipAmount">
            <summary>
            Hip Pitch.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFromBehindHelper.SfbKneeAmount">
            <summary>
            Knee bend.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFromBehindHelper.SfbPeriod">
            <summary>
            ShotFromBehind reaction period after being shot.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFromBehindHelper.SfbForceBalancePeriod">
            <summary>
            Amount of time not taking a step.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFromBehindHelper.SfbArmsOnset">
            <summary>
            Amount of time before applying spread out arms pose.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFromBehindHelper.SfbKneesOnset">
            <summary>
            Amount of time before bending knees a bit.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFromBehindHelper.SfbNoiseGain">
            <summary>
            Controls additional independent randomized bending of left/right elbows.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFromBehindHelper.SfbIgnoreFail">
            <summary>
            0 = balancer fails as normal,
            1 = ignore backArchedBack and leanedTooFarBack balancer failures,
            2 = ignore backArchedBack balancer failure only,
            3 = ignore leanedTooFarBack balancer failure only.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 3.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ShotInGutsHelper">
            <summary>
            Configure the shot in guts reaction.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ShotInGutsHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ShotInGutsHelper for sending a ShotInGuts <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ShotInGuts <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Configure the shot in guts reaction.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotInGutsHelper.ShotInGuts">
            <summary>
            Type of reaction.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotInGutsHelper.SigSpineAmount">
            <summary>
            SpineBend.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotInGutsHelper.SigNeckAmount">
            <summary>
            Neck Bend.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotInGutsHelper.SigHipAmount">
            <summary>
            Hip Pitch.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotInGutsHelper.SigKneeAmount">
            <summary>
            Knee bend.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotInGutsHelper.SigPeriod">
            <summary>
            Active time after being shot.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotInGutsHelper.SigForceBalancePeriod">
            <summary>
            Amount of time not taking a step.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotInGutsHelper.SigKneesOnset">
            <summary>
            Amount of time not taking a step.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ShotHeadLookHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ShotHeadLookHelper for sending a ShotHeadLook <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ShotHeadLook <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHeadLookHelper.UseHeadLook">
            <summary>
            Use head look.
            Default: looks at provided target or if this is zero - looks forward or in velocity direction.
            If reachForWound is enabled, switches between looking at the wound and at the default target.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHeadLookHelper.HeadLook">
            <summary>
            Position to look at with headlook flag.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHeadLookHelper.HeadLookAtWoundMinTimer">
            <summary>
            Min time to look at wound.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHeadLookHelper.HeadLookAtWoundMaxTimer">
            <summary>
            Max time to look at wound.
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHeadLookHelper.HeadLookAtHeadPosMaxTimer">
            <summary>
            Min time to look headLook or if zero - forward or in velocity direction.
            </summary>
            <remarks>
            Default value = 1.7f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHeadLookHelper.HeadLookAtHeadPosMinTimer">
            <summary>
            Max time to look headLook or if zero - forward or in velocity direction.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ShotConfigureArmsHelper">
            <summary>
            Configure the arm reactions in shot.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ShotConfigureArmsHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ShotConfigureArmsHelper for sending a ShotConfigureArms <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ShotConfigureArms <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Configure the arm reactions in shot.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Brace">
            <summary>
            Blind brace with arms if appropriate.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.PointGun">
            <summary>
            Point gun if appropriate.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.UseArmsWindmill">
            <summary>
            ArmsWindmill if going backwards fast enough.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.ReleaseWound">
            <summary>
            Release wound if going sideways/forward fast enough.
            0 = don't.
            1 = only if bracing.
            2 = any default arm reaction.
            </summary>
            <remarks>
            Default value = 1.
            Min value = 0.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.ReachFalling">
            <summary>
            Reach for wound when falling.
            0 = false,
            1 = true,
            2 = once per shot performance.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.ReachFallingWithOneHand">
            <summary>
            Force character to reach for wound with only one hand when falling or fallen.
            0 = allow two-handed reach,
            1 = left only if two-handed possible,
            2 = right only if two-handed possible,
            3 = one handed but automatic (allows switching of hands).
            </summary>
            <remarks>
            Default value = 3.
            Min value = 0.
            Max value = 3.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.ReachOnFloor">
            <summary>
            ReachForWound when on floor - 0 = false, 1 = true, 2 = once per shot performance.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.AlwaysReachTime">
            <summary>
            Inhibit arms brace for this amount of time after reachForWound has begun.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.AWSpeedMult">
            <summary>
            For armsWindmill, multiplier on character speed - increase of speed of circling is proportional to character speed (max speed of circliing increase = 1.5). Eg. lowering the value increases the range of velocity that the 0-1.5 is applied over.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.AWRadiusMult">
            <summary>
            For armsWindmill, multiplier on character speed - increase of radii is proportional to character speed (max radius increase = 0.45).
            E.g. lowering the value increases the range of velocity that the 0-0.45 is applied over.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.AWStiffnessAdd">
            <summary>
            For armsWindmill, added arm stiffness ranges from 0 to AWStiffnessAdd.
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.ReachWithOneHand">
            <summary>
            Force character to reach for wound with only one hand.
            0 = allow two-handed reach,
            1 = left only if two-handed possible,
            2 = right only if two-handed possible.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.AllowLeftPistolRFW">
            <summary>
            Allow character to reach for wound with left hand if holding a pistol.
            It never will for a rifle.
            If pointGun is running this will only happen if the hand cannot point and pointGun:poseUnusedGunArm = false.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.AllowRightPistolRFW">
            <summary>
            Allow character to reach for wound with right hand if holding a pistol.
            It never will for a rifle.
            If pointGun is running this will only happen if the hand cannot point and pointGun:poseUnusedGunArm = false.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.RfwWithPistol">
            <summary>
            Override pointGun and reachForWound if desired if holding a pistol.
            It never will for a rifle.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2">
            <summary>
            Type of reaction.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2Left">
            <summary>
            Fling the left arm.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2Right">
            <summary>
            Fling the right arm.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2OverrideStagger">
            <summary>
            Override stagger arms even if staggerFall:m_upperBodyReaction = true.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2TimeBefore">
            <summary>
            Time after hit that the fling will start (allows for a bit of loose arm movement from bullet impact.snap etc).
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2Time">
            <summary>
            Duration of the fling behavior.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2MStiffL">
            <summary>
            Muscle stiffness of the left arm.
            If negative then uses the shots underlying muscle stiffness from controlStiffness (i.e. respects looseness).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = -1.0f.
            Max value = 1.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2MStiffR">
            <summary>
            Muscle stiffness of the right arm.
            If negative then uses the shots underlying muscle stiffness from controlStiffness (i.e. respects looseness).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 1.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2RelaxTimeL">
            <summary>
            Maximum time before the left arm relaxes in the fling.
            It will relax automatically when the arm has completed it's bent arm fling.
            This is what causes the arm to straighten.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2RelaxTimeR">
            <summary>
            Maximum time before the right arm relaxes in the fling.
            It will relax automatically when the arm has completed it's bent arm fling.
            This is what causes the arm to straighten.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2AngleMinL">
            <summary>
            Minimum fling angle for left arm.
            Fling angle is random in the range fling2AngleMin:fling2AngleMax.
            Angle of fling in radians measured from the body horizontal sideways from shoulder.
            Positive is up, 0 shoulder level, negative down.
            </summary>
            <remarks>
            Default value = -1.5f.
            Min value = -1.5f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2AngleMaxL">
            <summary>
            Maximum fling angle for left arm.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = -1.5f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2AngleMinR">
            <summary>
            Minimum fling angle for right arm.
            </summary>
            <remarks>
            Default value = -1.5f.
            Min value = -1.5f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2AngleMaxR">
            <summary>
            Maximum fling angle for right arm.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = -1.5f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2LengthMinL">
            <summary>
            Minimum left arm length.
            Arm length is random in the range fling2LengthMin:fling2LengthMax.
            Arm length maps one to one with elbow angle.
            These values are scaled internally for the female character.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.3f.
            Max value = 0.6f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2LengthMaxL">
            <summary>
            Maximum left arm length.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.3f.
            Max value = 0.6f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2LengthMinR">
            <summary>
            Min right arm length.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.3f.
            Max value = 0.6f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2LengthMaxR">
            <summary>
            Max right arm length.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.3f.
            Max value = 0.6f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Bust">
            <summary>
            Has the character got a bust.
            If so then cupBust (move bust reach targets below bust) or bustElbowLift and cupSize (stop upperArm penetrating bust and move bust targets to surface of bust) are implemented.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.BustElbowLift">
            <summary>
            Lift the elbows up this much extra to avoid upper arm penetrating the bust (when target hits spine2 or spine3).
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.CupSize">
            <summary>
            Amount reach target to bust (spine2) will be offset forward by.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.CupBust">
            <summary>
            All reach targets above or on the bust will cause a reach below the bust.
            (specifically moves spine3 and spine2 targets to spine1).
            BustElbowLift and cupSize are ignored.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.SmartFallHelper">
            <summary>
            Clone of High Fall with a wider range of operating conditions.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.SmartFallHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the SmartFallHelper for sending a SmartFall <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the SmartFall <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Clone of High Fall with a wider range of operating conditions.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.BodyStiffness">
            <summary>
            Stiffness of body.
            Value feeds through to bodyBalance (synced with defaults), to armsWindmill (14 for this value at default ), legs pedal, head look and roll down stairs directly.
            </summary>
            <remarks>
            Default value = 11.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.Bodydamping">
            <summary>
            The damping of the joints.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.Catchfalltime">
            <summary>
            The length of time before the impact that the character transitions to the landing.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.CrashOrLandCutOff">
            <summary>
            0.52angle is 0.868 dot//A threshold for deciding how far away from upright the character needs to be before bailing out (going into a foetal) instead of trying to land (keeping stretched out).
            NB: never does bailout if ignorWorldCollisions true.
            </summary>
            <remarks>
            Default value = 0.9f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.PdStrength">
            <summary>
            Strength of the controller to keep the character at angle aimAngleBase from vertical.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.PdDamping">
            <summary>
            Damping multiplier of the controller to keep the character at angle aimAngleBase from vertical.
            The actual damping is pdDamping*pdStrength*constant*angVel.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.ArmAngSpeed">
            <summary>
            Arm circling speed in armWindMillAdaptive.
            </summary>
            <remarks>
            Default value = 7.9f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.ArmAmplitude">
            <summary>
            In armWindMillAdaptive.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.ArmPhase">
            <summary>
            In armWindMillAdaptive 3.1 opposite for stuntman.
            1.0 old default. 0.0 in phase.
            </summary>
            <remarks>
            Default value = 3.1f.
            Min value = 0.0f.
            Max value = 6.3f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.ArmBendElbows">
            <summary>
            In armWindMillAdaptive bend the elbows as a function of armAngle.
            For stunt man true otherwise false.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.LegRadius">
            <summary>
            Radius of legs on pedal.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 0.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.LegAngSpeed">
            <summary>
            In pedal.
            </summary>
            <remarks>
            Default value = 7.9f.
            Min value = 0.0f.
            Max value = 15.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.LegAsymmetry">
            <summary>
            0.0 for stunt man.
            Random offset applied per leg to the angular speed to desynchronize the pedaling - set to 0 to disable, otherwise should be set to less than the angularSpeed value.
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = -10.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.Arms2LegsPhase">
            <summary>
            Phase angle between the arms and legs circling angle.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 6.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.Arms2LegsSync">
            <summary>
            Syncs the arms angle to what the leg angle is.
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.Synchroisation.AlwaysSynced"/>.
            All speed/direction parameters of armswindmill are overwritten if = <see cref="F:GTA.NaturalMotion.Synchroisation.AlwaysSynced"/>.
            If <see cref="F:GTA.NaturalMotion.Synchroisation.SyncedAtStart"/> and you want synced arms/legs then armAngSpeed=legAngSpeed, legAsymmetry = 0.0 (to stop randomizations of the leg cicle speed).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.ArmsUp">
            <summary>
            Where to put the arms when preparing to land.
            Approx 1 = above head, 0 = head height, -1 = down.
            LT -2.0 use catchFall arms, LT -3.0 use prepare for landing pose if Agent is due to land vertically, feet first.
            </summary>
            <remarks>
            Default value = -3.1f.
            Min value = -4.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.OrientateBodyToFallDirection">
            <summary>
            Toggle to orientate to fall direction.  i.e. orientate so that the character faces the horizontal velocity direction.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.OrientateTwist">
            <summary>
            If false don't worry about the twist angle of the character when orientating the character.
            If false this allows the twist axis of the character to be free (You can get a nice twisting highFall like the one in dieHard 4 when the car goes into the helicopter).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.OrientateMax">
            <summary>
            DEVEL parameter - suggest you don't edit it.  Maximum torque the orientation controller can apply.
            If 0 then no helper torques will be used.
            300 will orientate the character softly for all but extreme angles away from aimAngleBase.
            If abs (current -aimAngleBase) is getting near 3.0 then this can be reduced to give a softer feel.
            </summary>
            <remarks>
            Default value = 300.0f.
            Min value = 0.0f.
            Max value = 2000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.AlanRickman">
            <summary>
            If true then orientate the character to face the point from where it started falling.
            High fall like the one in "Die Hard" with Alan Rickman.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.FowardRoll">
            <summary>
            Try to execute a forward Roll on landing.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.UseZeroPose_withFowardRoll">
            <summary>
            Blend to a zero pose when forward roll is attempted.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.AimAngleBase">
            <summary>
            Angle from vertical the pdController is driving to (positive = forwards).
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -3.1f.
            Max value = 3.1f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.FowardVelRotation">
            <summary>
            Scale to add/subtract from aimAngle based on forward speed (Internal).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.FootVelCompScale">
            <summary>
            Scale to change to amount of vel that is added to the foot ik from the velocity (Internal).
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.SideD">
            <summary>
            Sideoffset for the feet during prepareForLanding. +ve = right.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.FowardOffsetOfLegIK">
            <summary>
            Forward offset for the feet during prepareForLanding.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.LegL">
            <summary>
            Leg Length for ik (Internal)//unused.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.CatchFallCutOff">
            <summary>
            0.5angle is 0.878 dot. Cutoff to go to the catchFall (internal) //mmmtodo do like crashOrLandCutOff.
            </summary>
            <remarks>
            Default value = 0.9f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.LegStrength">
            <summary>
            Strength of the legs at landing.
            </summary>
            <remarks>
            Default value = 12.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.Balance">
            <summary>
            If true have enough strength to balance.
            If false not enough strength in legs to balance (even though bodyBlance called).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.IgnorWorldCollisions">
            <summary>
            Never go into bailout (foetal).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.AdaptiveCircling">
            <summary>
            Stunt man type fall.  Arm and legs circling direction controlled by angmom and orientation.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.Hula">
            <summary>
            With stunt man type fall.  Hula reaction if can't see floor and not rotating fast.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.MaxSpeedForRecoverableFall">
            <summary>
            Character needs to be moving less than this speed to consider fall as a recoverable one.
            </summary>
            <remarks>
            Default value = 15.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.MinSpeedForBrace">
            <summary>
            Character needs to be moving at least this fast horizontally to start bracing for impact if there is an object along its trajectory.
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.LandingNormal">
            <summary>
            Ray-cast normal doted with up direction has to be greater than this number to consider object flat enough to land on it.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.RdsForceMag">
            <summary>
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.RdsTargetLinVeDecayTime">
            <summary>
            RDS: Time for the targetlinearVelocity to decay to zero.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.RdsTargetLinearVelocity">
            <summary>
            RDS: Helper torques are applied to match the spin of the character to the max of targetLinearVelocity and COMVelMag.
            -1 to use initial character velocity.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 30.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.RdsUseStartingFriction">
            <summary>
            Start Catch Fall/RDS state with specified friction.
            Catch fall will overwrite based on setFallingReaction.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.RdsStartingFriction">
            <summary>
            Catch Fall/RDS starting friction.
            Catch fall will overwrite based on setFallingReaction.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.RdsStartingFrictionMin">
            <summary>
            Catch Fall/RDS starting friction minimum.
            Catch fall will overwrite based on setFallingReaction.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.RdsForceVelThreshold">
            <summary>
            Velocity threshold under which RDS force mag will be applied.
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.InitialState">
            <summary>
            Force initial state (used in vehicle bail out to start SF_CatchFall (6) earlier.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 7.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.ChangeExtremityFriction">
            <summary>
            Allow friction changes to be applied to the hands and feet.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.Teeter">
            <summary>
            Set up an immediate teeter in the direction of trave if initial state is SF_Balance.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.TeeterOffset">
            <summary>
            Offset the default Teeter edge in the direction of travel.
            Will need to be tweaked depending on how close to the real edge AI tends to trigger the behavior.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.StopRollingTime">
            <summary>
            Time in seconds before ped should start actively trying to stop rolling.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.ReboundScale">
            <summary>
            Scale for rebound assistance.
            0 = off,
            1 = very bouncy,
            2 = jbone crazy.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.ReboundMask">
            <summary>
            Part mask to apply rebound assistance.
            </summary>
            <remarks>
            Default value = uk.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.ForceHeadAvoid">
            <summary>
            Force head avoid to be active during Catch Fall even when character is not on the ground.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.CfZAxisSpinReduction">
            <summary>
            Pass-through parameter for Catch Fall spin reduction.  Increase to stop more spin. 0..1.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.SplatWhenStopped">
            <summary>
            Transition to splat state when com vel is below value, regardless of character health or fall velocity.
            Set to zero to disable.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.BlendHeadWhenStopped">
            <summary>
            Blend head to neutral pose com vel approaches zero.
            Linear between zero and value.
            Set to zero to disable.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.SpreadLegs">
            <summary>
            Spread legs amount for pedal during fall.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.StaggerFallHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the StaggerFallHelper for sending a StaggerFall <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the StaggerFall <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.ArmStiffness">
            <summary>
            Stiffness of arms. Catch_fall's stiffness scales with this value, but has default values when this is default.
            </summary>
            <remarks>
            Default value = 12.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.ArmDamping">
            <summary>
            Sets damping value for the arms.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.SpineDamping">
            <summary>
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.SpineStiffness">
            <summary>
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.ArmStiffnessStart">
            <summary>
            ArmStiffness during the yanked timescale i.e. timeAtStartValues.
            </summary>
            <remarks>
            Default value = 3.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.ArmDampingStart">
            <summary>
            ArmDamping during the yanked timescale i.e. timeAtStartValues.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.SpineDampingStart">
            <summary>
            SpineDamping during the yanked timescale i.e. timeAtStartValues.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.SpineStiffnessStart">
            <summary>
            SpineStiffness during the yanked timescale i.e. timeAtStartValues.
            </summary>
            <remarks>
            Default value = 3.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.TimeAtStartValues">
            <summary>
            Time spent with Start values for arms and spine stiffness and damping i.e. for whiplash effect.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.RampTimeFromStartValues">
            <summary>
            Time spent ramping from Start to end values for arms and spine stiffness and damping i.e. for whiplash effect (occurs after timeAtStartValues).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.StaggerStepProb">
            <summary>
            Probability per step of time spent in a stagger step.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.StepsTillStartEnd">
            <summary>
            Steps taken before lowerBodyStiffness starts ramping down by perStepReduction1.
            </summary>
            <remarks>
            Default value = 2.
            Min value = 0.
            Max value = 100.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.TimeStartEnd">
            <summary>
            Time from start of behavior before lowerBodyStiffness starts ramping down for rampTimeToEndValues to endValues.
            </summary>
            <remarks>
            Default value = 100.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.RampTimeToEndValues">
            <summary>
            Time spent ramping from lowerBodyStiffness to lowerBodyStiffnessEnd.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.LowerBodyStiffness">
            <summary>
            LowerBodyStiffness should be 12.
            </summary>
            <remarks>
            Default value = 13.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.LowerBodyStiffnessEnd">
            <summary>
            LowerBodyStiffness at end.
            </summary>
            <remarks>
            Default value = 8.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.PredictionTime">
            <summary>
            Amount of time (seconds) into the future that the character tries to step to.
            Bigger values try to recover with fewer, bigger steps.
            Smaller values recover with smaller steps, and generally recover less.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.PerStepReduction1">
            <summary>
            LowerBody stiffness will be reduced every step to make the character fallover.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.LeanInDirRate">
            <summary>
            LeanInDirection will be increased from 0 to leanInDirMax linearly at this rate.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.LeanInDirMaxF">
            <summary>
            Max of leanInDirection magnitude when going forwards.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.LeanInDirMaxB">
            <summary>
            Max of leanInDirection magnitude when going backwards.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.LeanHipsMaxF">
            <summary>
            Max of leanInDirectionHips magnitude when going forwards.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.LeanHipsMaxB">
            <summary>
            Max of leanInDirectionHips magnitude when going backwards.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.Lean2multF">
            <summary>
            Lean of spine to side in side velocity direction when going forwards.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -5.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.Lean2multB">
            <summary>
            Lean of spine to side in side velocity direction when going backwards.
            </summary>
            <remarks>
            Default value = -2.0f.
            Min value = -5.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.PushOffDist">
            <summary>
            Amount stance foot is behind com in the direction of velocity before the leg tries to pushOff to increase momentum.
            Increase to lower the probability of the pushOff making the character bouncy.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.MaxPushoffVel">
            <summary>
            Stance leg will only pushOff to increase momentum if the vertical hip velocity is less than this value. 0.4 seems like a good value.
            The higher it is the less this functionality is applied.
            If it is very low or negative this can stop the pushOff altogether.
            </summary>
            <remarks>
            Default value = 20.0f.
            Min value = -20.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.HipBendMult">
            <summary>
            HipBend scaled with velocity.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -10.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.AlwaysBendForwards">
            <summary>
            Bend forwards at the hip (hipBendMult) whether moving backwards or forwards.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.SpineBendMult">
            <summary>
            Spine bend scaled with velocity.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = -10.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.UseHeadLook">
            <summary>
            Enable and provide a look-at target to make the character's head turn to face it while balancing, balancer default is 0.2.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.HeadLookPos">
            <summary>
            Position of thing to look at.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.HeadLookInstanceIndex">
            <summary>
            Level index of thing to look at.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.HeadLookAtVelProb">
            <summary>
            Probability [0-1] that headLook will be looking in the direction of velocity when stepping.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.TurnOffProb">
            <summary>
            Weighted probability that turn will be off.
            This is one of six turn type weights.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.Turn2TargetProb">
            <summary>
            Weighted probability of turning towards headLook target.
            This is one of six turn type weights.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.Turn2VelProb">
            <summary>
            Weighted probability of turning towards velocity.
            This is one of six turn type weights.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.TurnAwayProb">
            <summary>
            Weighted probability of turning away from headLook target.
            This is one of six turn type weights.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.TurnLeftProb">
            <summary>
            Weighted probability of turning left.
            This is one of six turn type weights.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.TurnRightProb">
            <summary>
            Weighted probability of turning right.
            This is one of six turn type weights.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.UseBodyTurn">
            <summary>
            Enable and provide a positive bodyTurnTimeout and provide a look-at target to make the character turn to face it while balancing.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.UpperBodyReaction">
            <summary>
            Enable upper body reaction i.e. blindBrace and armswindmill.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.TeeterHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the TeeterHelper for sending a Teeter <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the Teeter <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.TeeterHelper.EdgeLeft">
            <summary>
            Defines the left edge point (left of character facing edge).
            </summary>
            <remarks>
            Default value = Vector3(39.5f, 38.9f, 21.1f).
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.TeeterHelper.EdgeRight">
            <summary>
            Defines the right edge point (right of character facing edge).
            </summary>
            <remarks>
            Default value = Vector3(39.5f, 39.9f, 21.1f).
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.TeeterHelper.UseExclusionZone">
            <summary>
            Stop stepping across the line defined by edgeLeft and edgeRight.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.TeeterHelper.UseHeadLook">
            <summary>
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.TeeterHelper.CallHighFall">
            <summary>
            Call highFall if fallen over the edge.
            If false just call blended writhe (to go over the top of the fall behavior of the underlying behavior e.g. bodyBalance).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.TeeterHelper.LeanAway">
            <summary>
            Lean away from the edge based on velocity towards the edge (if closer than 2m from edge).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.TeeterHelper.PreTeeterTime">
            <summary>
            Time-to-edge threshold to start pre-teeter (windmilling, etc).
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.TeeterHelper.LeanAwayTime">
            <summary>
            Time-to-edge threshold to start leaning away from a potential fall.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.TeeterHelper.LeanAwayScale">
            <summary>
            Scales stay upright lean and hip pitch.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.TeeterHelper.TeeterTime">
            <summary>
            Time-to-edge threshold to start full-on teeter (more aggressive lean, drop-and-twist, etc).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.UpperBodyFlinchHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the UpperBodyFlinchHelper for sending a UpperBodyFlinch <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the UpperBodyFlinch <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.HandDistanceLeftRight">
            <summary>
            Left-Right distance between the hands.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.HandDistanceFrontBack">
            <summary>
            Front-Back distance between the hands.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.HandDistanceVertical">
            <summary>
            Vertical distance between the hands.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.BodyStiffness">
            <summary>
            Stiffness of body. Value carries over to head look, spine twist.
            </summary>
            <remarks>
            Default value = 11.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.BodyDamping">
            <summary>
            Damping value used for upper body.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.BackBendAmount">
            <summary>
            Amount to bend the back during the flinch.
            </summary>
            <remarks>
            Default value = -0.6f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.UseRightArm">
            <summary>
            Toggle to use the right arm.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.UseLeftArm">
            <summary>
            Toggle to Use the Left arm.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.NoiseScale">
            <summary>
            Amplitude of the perlin noise applied to the arms positions in the flinch to the front part of the behavior.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.NewHit">
            <summary>
            Relaxes the character for 1 frame if set.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.ProtectHeadToggle">
            <summary>
            Always protect head.
            Note if false then character flinches if target is in front, protects head if target is behind.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.DontBraceHead">
            <summary>
            Don't protect head only brace from front. Turned on by bcr.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.ApplyStiffness">
            <summary>
            Turned of by bcr.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.HeadLookAwayFromTarget">
            <summary>
            Look away from target (unless protecting head then look between feet).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.UseHeadLook">
            <summary>
            Use headlook.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.TurnTowards">
            <summary>
            Ve balancer turn Towards, negative balancer turn Away, 0 balancer won't turn.
            There is a 50% chance that the character will not turn even if this parameter is set to turn.
            </summary>
            <remarks>
            Default value = 1.
            Min value = -2.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.Pos">
            <summary>
            Position in world-space of object to flinch from.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.YankedHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the YankedHelper for sending a Yanked <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the Yanked <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.ArmStiffness">
            <summary>
            Stiffness of arms when upright.
            </summary>
            <remarks>
            Default value = 11.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.ArmDamping">
            <summary>
            Sets damping value for the arms when upright.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.SpineDamping">
            <summary>
            Spine damping when upright.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.SpineStiffness">
            <summary>
            Spine stiffness when upright.
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.ArmStiffnessStart">
            <summary>
            Arm stiffness during the yanked timescale i.e. timeAtStartValues.
            </summary>
            <remarks>
            Default value = 3.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.ArmDampingStart">
            <summary>
            Arm damping during the yanked timescale i.e. timeAtStartValues.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.SpineDampingStart">
            <summary>
            Spine damping during the yanked timescale i.e. timeAtStartValues.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.SpineStiffnessStart">
            <summary>
            Spine stiffness during the yanked timescale i.e. timeAtStartValues.
            </summary>
            <remarks>
            Default value = 3.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.TimeAtStartValues">
            <summary>
            Time spent with Start values for arms and spine stiffness and damping i.e. for whiplash effect.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.RampTimeFromStartValues">
            <summary>
            Time spent ramping from Start to end values for arms and spine stiffness and damping i.e. for whiplash effect (occurs after timeAtStartValues).
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.StepsTillStartEnd">
            <summary>
            Steps taken before lowerBodyStiffness starts ramping down.
            </summary>
            <remarks>
            Default value = 2.
            Min value = 0.
            Max value = 100.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.TimeStartEnd">
            <summary>
            Time from start of behavior before lowerBodyStiffness starts ramping down by perStepReduction1.
            </summary>
            <remarks>
            Default value = 100.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.RampTimeToEndValues">
            <summary>
            Time spent ramping from lowerBodyStiffness to lowerBodyStiffnessEnd.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.LowerBodyStiffness">
            <summary>
            LowerBodyStiffness should be 12.
            </summary>
            <remarks>
            Default value = 12.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.LowerBodyStiffnessEnd">
            <summary>
            LowerBodyStiffness at end.
            </summary>
            <remarks>
            Default value = 8.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.PerStepReduction">
            <summary>
            LowerBody stiffness will be reduced every step to make the character fallover.
            </summary>
            <remarks>
            Default value = 1.5f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.HipPitchForward">
            <summary>
            Amount to bend forward at the hips (+ve forward, -ve backwards).
            Behavior switches between hipPitchForward and hipPitchBack.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = -1.3f.
            Max value = 1.3f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.HipPitchBack">
            <summary>
            Amount to bend backwards at the hips (+ve backwards, -ve forwards).
            Behavior switches between hipPitchForward and hipPitchBack.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = -1.3f.
            Max value = 1.3f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.SpineBend">
            <summary>
            Bend/Twist the spine amount.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.FootFriction">
            <summary>
            Foot friction when standing/stepping.  0.5 gives a good slide sometimes.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.TurnThresholdMin">
            <summary>
            Min angle at which the turn with toggle to the other direction (actual toggle angle is chosen randomly in range min to max).
            If it is 1 then it will never toggle.
            If negative then no turn is applied.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = -0.1f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.TurnThresholdMax">
            <summary>
            Max angle at which the turn with toggle to the other direction (actual toggle angle is chosen randomly in range min to max).
            If it is 1 then it will never toggle.
            If negative then no turn is applied.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = -0.1f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.UseHeadLook">
            <summary>
            Enable and provide a look-at target to make the character's head turn to face it while balancing.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.HeadLookPos">
            <summary>
            Position of thing to look at.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.HeadLookInstanceIndex">
            <summary>
            Level index of thing to look at.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.HeadLookAtVelProb">
            <summary>
            Probability [0-1] that headLook will be looking in the direction of velocity when stepping.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.ComVelRDSThresh">
            <summary>
            For handsAndKnees catchfall ONLY: comVel above which rollDownstairs will start.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.HulaPeriod">
            <summary>
            0.25 A complete wiggle will take 4*hulaPeriod.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.HipAmplitude">
            <summary>
            Amount of hip movement.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.SpineAmplitude">
            <summary>
            Amount of spine movement.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.MinRelaxPeriod">
            <summary>
            Wriggle relaxes for a minimum of minRelaxPeriod (if it is negative it is a multiplier on the time previously spent wriggling).
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = -5.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.MaxRelaxPeriod">
            <summary>
            Wriggle relaxes for a maximum of maxRelaxPeriod (if it is negative it is a multiplier on the time previously spent wriggling).
            </summary>
            <remarks>
            Default value = 1.5f.
            Min value = -5.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.RollHelp">
            <summary>
            Amount of cheat torque applied to turn the character over.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.GroundLegStiffness">
            <summary>
            Leg Stiffness when on the ground.
            </summary>
            <remarks>
            Default value = 11.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.GroundArmStiffness">
            <summary>
            Arm Stiffness when on the ground.
            </summary>
            <remarks>
            Default value = 11.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.GroundSpineStiffness">
            <summary>
            Spine Stiffness when on the ground.
            </summary>
            <remarks>
            Default value = 14.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.GroundLegDamping">
            <summary>
            Leg Damping when on the ground.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.GroundArmDamping">
            <summary>
            Arm Damping when on the ground.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.GroundSpineDamping">
            <summary>
            Spine Damping when on the ground.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.GroundFriction">
            <summary>
            Friction multiplier on body parts when on ground.
            Character can look too slidy with groundFriction = 1.
            Higher values give a more jerky reaction but this seems timestep dependent especially for dragged by the feet.
            </summary>
            <remarks>
            Default value = 8.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="M:GTA.UI.ContainerElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.ContainerElement"/> class used for grouping items on screen.
            </summary>
        </member>
        <member name="M:GTA.UI.ContainerElement.#ctor(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.ContainerElement"/> class used for grouping items on screen.
            </summary>
            <param name="position">Set the <see cref="P:GTA.UI.ContainerElement.Position"/> on screen where to draw the <see cref="T:GTA.UI.ContainerElement"/>.</param>
            <param name="size">Set the <see cref="P:GTA.UI.ContainerElement.Size"/> of the <see cref="T:GTA.UI.ContainerElement"/>.</param>
        </member>
        <member name="M:GTA.UI.ContainerElement.#ctor(System.Drawing.PointF,System.Drawing.SizeF,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.ContainerElement"/> class used for grouping items on screen.
            </summary>
            <param name="position">Set the <see cref="P:GTA.UI.ContainerElement.Position"/> on screen where to draw the <see cref="T:GTA.UI.ContainerElement"/>.</param>
            <param name="size">Set the <see cref="P:GTA.UI.ContainerElement.Size"/> of the <see cref="T:GTA.UI.ContainerElement"/>.</param>
            <param name="color">Set the <see cref="P:GTA.UI.ContainerElement.Color"/> used to draw the <see cref="T:GTA.UI.ContainerElement"/>.</param>
        </member>
        <member name="M:GTA.UI.ContainerElement.#ctor(System.Drawing.PointF,System.Drawing.SizeF,System.Drawing.Color,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.ContainerElement"/> class used for grouping items on screen.
            </summary>
            <param name="position">Set the <see cref="P:GTA.UI.ContainerElement.Position"/> on screen where to draw the <see cref="T:GTA.UI.ContainerElement"/>.</param>
            <param name="size">Set the <see cref="P:GTA.UI.ContainerElement.Size"/> of the <see cref="T:GTA.UI.ContainerElement"/>.</param>
            <param name="color">Set the <see cref="P:GTA.UI.ContainerElement.Color"/> used to draw the <see cref="T:GTA.UI.ContainerElement"/>.</param>
            <param name="centered">Position the <see cref="T:GTA.UI.ContainerElement"/> based on its center instead of top left corner, see also <seealso cref="P:GTA.UI.ContainerElement.Centered"/>.</param>
        </member>
        <member name="P:GTA.UI.ContainerElement.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.ContainerElement"/> will be drawn.
            </summary>
            <value>
              <see langword="true" /> if enabled; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.UI.ContainerElement.Color">
            <summary>
            Gets or sets the color of this <see cref="T:GTA.UI.ContainerElement"/>.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:GTA.UI.ContainerElement.Position">
            <summary>
            Gets or sets the position of this <see cref="T:GTA.UI.ContainerElement"/>.
            </summary>
            <value>
            The position scaled on a 1280*720 pixel base.
            </value>
            <remarks>
            If ScaledDraw is called, the position will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth"/>.
            </remarks>
        </member>
        <member name="P:GTA.UI.ContainerElement.Size">
            <summary>
            Gets or sets the size to draw the <see cref="T:GTA.UI.ContainerElement"/>
            </summary>
            <value>
            The size on a 1280*720 pixel base
            </value>
            <remarks>
            If ScaledDraw is called, the size will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth"/>.
            </remarks>
        </member>
        <member name="P:GTA.UI.ContainerElement.Centered">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.ContainerElement"/> should be positioned based on its center or top left corner
            </summary>
            <value>
              <see langword="true" /> if centered; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.UI.ContainerElement.Items">
            <summary>
            The <see cref="T:GTA.UI.IElement"/>s Contained inside this <see cref="T:GTA.UI.ContainerElement"/>
            </summary>
        </member>
        <member name="M:GTA.UI.ContainerElement.Draw">
            <summary>
            Draws this <see cref="T:GTA.UI.ContainerElement" /> this frame.
            </summary>
        </member>
        <member name="M:GTA.UI.ContainerElement.Draw(System.Drawing.SizeF)">
            <summary>
            Draws this <see cref="T:GTA.UI.ContainerElement" /> this frame at the specified offset.
            </summary>
            <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.ContainerElement" /> using a 1280*720 pixel base.</param>
        </member>
        <member name="M:GTA.UI.ContainerElement.ScaledDraw">
            <summary>
            Draws this <see cref="T:GTA.UI.ContainerElement" /> this frame using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
        </member>
        <member name="M:GTA.UI.ContainerElement.ScaledDraw(System.Drawing.SizeF)">
            <summary>
            Draws this <see cref="T:GTA.UI.ContainerElement" /> this frame at the specified offset using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
            <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.ContainerElement" /> using a <see cref="P:GTA.UI.Screen.ScaledWidth" />*720 pixel base.</param>
        </member>
        <member name="T:GTA.UI.CursorSprite">
            <summary>
            An enumeration of all possible cursor sprites.
            </summary>
        </member>
        <member name="T:GTA.UI.CustomSprite">
            <summary>
            A sprite element using a custom image texture.
            </summary>
        </member>
        <member name="M:GTA.UI.CustomSprite.#ctor(System.String,System.Drawing.SizeF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.CustomSprite"/> class used for drawing external textures on the screen.
            </summary>
            <param name="filename">Full path to location of the <see cref="T:GTA.UI.CustomSprite"/> on the disc.</param>
            <param name="size">Set the <see cref="P:GTA.UI.CustomSprite.Size"/> of the <see cref="T:GTA.UI.CustomSprite"/>.</param>
            <param name="position">Set the <see cref="P:GTA.UI.CustomSprite.Position"/> on screen where to draw the <see cref="T:GTA.UI.CustomSprite"/>.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the specified file doesn't exist</exception>
        </member>
        <member name="M:GTA.UI.CustomSprite.#ctor(System.String,System.Drawing.SizeF,System.Drawing.PointF,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.CustomSprite"/> class used for drawing external textures on the screen.
            </summary>
            <param name="filename">Full path to location of the <see cref="T:GTA.UI.CustomSprite"/> on the disc.</param>
            <param name="size">Set the <see cref="P:GTA.UI.CustomSprite.Size"/> of the <see cref="T:GTA.UI.CustomSprite"/>.</param>
            <param name="position">Set the <see cref="P:GTA.UI.CustomSprite.Position"/> on screen where to draw the <see cref="T:GTA.UI.CustomSprite"/>.</param>
            <param name="color">Set the <see cref="P:GTA.UI.CustomSprite.Color"/> used to draw the <see cref="T:GTA.UI.CustomSprite"/>.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the specified file doesn't exist</exception>
        </member>
        <member name="M:GTA.UI.CustomSprite.#ctor(System.String,System.Drawing.SizeF,System.Drawing.PointF,System.Drawing.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.CustomSprite"/> class used for drawing external textures on the screen.
            </summary>
            <param name="filename">Full path to location of the <see cref="T:GTA.UI.CustomSprite"/> on the disc.</param>
            <param name="size">Set the <see cref="P:GTA.UI.CustomSprite.Size"/> of the <see cref="T:GTA.UI.CustomSprite"/>.</param>
            <param name="position">Set the <see cref="P:GTA.UI.CustomSprite.Position"/> on screen where to draw the <see cref="T:GTA.UI.CustomSprite"/>.</param>
            <param name="color">Set the <see cref="P:GTA.UI.CustomSprite.Color"/> used to draw the <see cref="T:GTA.UI.CustomSprite"/>.</param>
            <param name="rotation">Set the rotation to draw the sprite, measured in degrees, see also <seealso cref="P:GTA.UI.CustomSprite.Rotation"/>.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the specified file doesn't exist</exception>
        </member>
        <member name="M:GTA.UI.CustomSprite.#ctor(System.String,System.Drawing.SizeF,System.Drawing.PointF,System.Drawing.Color,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.CustomSprite"/> class used for drawing external textures on the screen.
            </summary>
            <param name="filename">Full path to location of the <see cref="T:GTA.UI.CustomSprite"/> on the disc.</param>
            <param name="size">Set the <see cref="P:GTA.UI.CustomSprite.Size"/> of the <see cref="T:GTA.UI.CustomSprite"/>.</param>
            <param name="position">Set the <see cref="P:GTA.UI.CustomSprite.Position"/> on screen where to draw the <see cref="T:GTA.UI.CustomSprite"/>.</param>
            <param name="color">Set the <see cref="P:GTA.UI.CustomSprite.Color"/> used to draw the <see cref="T:GTA.UI.CustomSprite"/>.</param>
            <param name="rotation">Set the rotation to draw the sprite, measured in degrees, see also <seealso cref="P:GTA.UI.CustomSprite.Rotation"/>.</param>
            <param name="centered">Position the <see cref="T:GTA.UI.CustomSprite"/> based on its center instead of top left corner, see also <seealso cref="P:GTA.UI.CustomSprite.Centered"/>.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the specified file doesn't exist</exception>
        </member>
        <member name="P:GTA.UI.CustomSprite.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.CustomSprite" /> will be drawn.
            </summary>
            <value>
              <see langword="true" /> if enabled; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.UI.CustomSprite.Color">
            <summary>
            Gets or sets the color of this <see cref="T:GTA.UI.CustomSprite" />.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:GTA.UI.CustomSprite.Position">
            <summary>
            Gets or sets the position of this <see cref="T:GTA.UI.CustomSprite" />.
            </summary>
            <value>
            The position scaled on a 1280*720 pixel base.
            </value>
            <remarks>
            If ScaledDraw is called, the position will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </remarks>
        </member>
        <member name="P:GTA.UI.CustomSprite.Size">
            <summary>
            Gets or sets the size to draw the <see cref="T:GTA.UI.CustomSprite" />
            </summary>
            <value>
            The size on a 1280*720 pixel base
            </value>
            <remarks>
            If ScaledDraw is called, the size will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </remarks>
        </member>
        <member name="P:GTA.UI.CustomSprite.Rotation">
            <summary>
            Gets or sets the rotation to draw thie <see cref="T:GTA.UI.CustomSprite" />.
            </summary>
            <value>
            The rotation measured in degrees, clockwise increasing, 0.0 at vertical
            </value>
        </member>
        <member name="P:GTA.UI.CustomSprite.Centered">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.CustomSprite"/> should be positioned based on its center or top left corner
            </summary>
            <value>
              <see langword="true" /> if centered; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.UI.CustomSprite.Draw">
            <summary>
            Draws this <see cref="T:GTA.UI.CustomSprite" />.
            </summary>
        </member>
        <member name="M:GTA.UI.CustomSprite.Draw(System.Drawing.SizeF)">
            <summary>
            Draws the <see cref="T:GTA.UI.CustomSprite" /> at the specified offset.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:GTA.UI.CustomSprite.ScaledDraw">
            <summary>
            Draws this <see cref="T:GTA.UI.CustomSprite" /> using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
        </member>
        <member name="M:GTA.UI.CustomSprite.ScaledDraw(System.Drawing.SizeF)">
            <summary>
            Draws the <see cref="T:GTA.UI.CustomSprite" /> at the specified offset using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="T:GTA.UI.Font">
            <summary>
            An enumeration of fonts the game supports.
            </summary>
        </member>
        <member name="F:GTA.UI.Font.ChaletLondon">
            <summary>
            <para>This font is for the standard font.</para>
            <para>
            Chalet London 1960 from House Industries will be used when the game language is set to a non-CJK language.
            The alternative standard font that contains appropriate CJK characters will be used when the game language is set to a CJK language.
            </para>
            </summary>
        </member>
        <member name="F:GTA.UI.Font.HouseScript">
            <summary>
            <para>This font is for the cursive font.</para>
            <para>
            Sign Painter House Brush from House Industries will be used when the game language is set to a non-CJK language.
            The standard font, which is the same as <see cref="F:GTA.UI.Font.ChaletLondon"/>, will be used when the game language is set to a CJK language unless the player have custom font files installed.
            </para>
            </summary>
        </member>
        <member name="F:GTA.UI.Font.Monospace">
            <summary>
            <para>This font contains upper ASCII characters and some other shapes such as ones for tags.</para>
            <para>This font style specifies the same font unless the player have custom font files installed.</para>
            </summary>
        </member>
        <member name="F:GTA.UI.Font.Leaderboard">
            <summary>
            <para>This font contains only Chevron arrows, some shield symbols, and hexagons.</para>
            <para>This font style specifies the same font unless the player have custom font files installed.</para>
            </summary>
        </member>
        <member name="F:GTA.UI.Font.ChaletComprimeCologne">
            <summary>
            <para>
            This font is for the condensed font for gamer tags or the distance info on the radar.
            You should use <see cref="F:GTA.UI.Font.ChaletComprimeCologneNotGamerName"/> if you want to draw strings with condensed font if possible but strings can contain some CJK characters (e.g. localized strings from gxt files).
            </para>
            <para>
            The native functions for text drawing will use the condensed font Chalet Comprim? Cologne 1960 regardness of the game language setting.
            The natives will draw strings that contain only non-CJK characters without any trouble,
            but without having custom font files installed, the natives will draw rectangles (a.k.a. tofus) instead of CJK characters because Chalet Comprim? Cologne 1960 doesn't contain any CJK characters.
            </para>
            <para>This font style specifies the same font unless the player have custom font files installed.</para>
            </summary>
        </member>
        <member name="F:GTA.UI.Font.FixedWidthNumbersStyle">
            <summary>
            <para>This font contains only glyphs of numbers (0 to 9), dollar sign, asterisk, plus sign, colon, semicolon, equals sign, slash, and backslash in ASCII.</para>
            <para>This font style specifies the same font unless the player have custom font files installed.</para>
            </summary>
        </member>
        <member name="F:GTA.UI.Font.ChaletComprimeCologneNotGamerName">
            <summary>
            <para>
            This font is for the condensed font for generic uses.
            Consider using <see cref="F:GTA.UI.Font.ChaletComprimeCologne"/> instead when the texts you want to draw only contain only non-CJK characters.
            </para>
            <para>
            The native functions for text drawing will use the condensed font Chalet Comprim? Cologne 1960 when the game language is set to a non-CJK language,
            but they will use the standard font, which is the same as <see cref="F:GTA.UI.Font.ChaletLondon"/>, when the game language is set to a CJK language (unless the player have custom font files installed).
            </para>
            </summary>
        </member>
        <member name="F:GTA.UI.Font.Pricedown">
            <summary>
            Pricedown will be used when the game language is set to a non-CJK language.
            The standard font, which is the same as <see cref="F:GTA.UI.Font.ChaletLondon"/>, will be used when the game language is set to a CJK language unless the player have custom font files installed.
            </summary>
        </member>
        <member name="F:GTA.UI.Font.Taxi">
            <summary>
            The font for taxi will be used when the game language is set to a non-CJK language. The font does contain invisible glyphs for lower characters.
            The standard font, which is the same as <see cref="F:GTA.UI.Font.ChaletLondon"/>, will be used when the game language is set to a CJK language unless the player have custom font files installed.
            </summary>
        </member>
        <member name="T:GTA.UI.Hud">
            <summary>
            Methods to manipulate the HUD (heads-up-display) of the game.
            </summary>
        </member>
        <member name="M:GTA.UI.Hud.IsComponentActive(GTA.UI.HudComponent)">
            <summary>
            Determines whether a given <see cref="T:GTA.UI.HudComponent"/> is active.
            </summary>
            <param name="component">The <see cref="T:GTA.UI.HudComponent"/> to check</param>
            <returns><see langword="true" /> if the <see cref="T:GTA.UI.HudComponent"/> is active; otherwise, <see langword="false" /></returns>
        </member>
        <member name="M:GTA.UI.Hud.ShowComponentThisFrame(GTA.UI.HudComponent)">
             <summary>
             Draws the specified <see cref="T:GTA.UI.HudComponent"/> this frame.
             </summary>
             <param name="component">The <see cref="T:GTA.UI.HudComponent"/></param>
            <remarks>This will only draw the <see cref="T:GTA.UI.HudComponent"/> if the <see cref="T:GTA.UI.HudComponent"/> can be drawn</remarks>
        </member>
        <member name="M:GTA.UI.Hud.HideComponentThisFrame(GTA.UI.HudComponent)">
            <summary>
            Hides the specified <see cref="T:GTA.UI.HudComponent"/> this frame.
            </summary>
            <param name="component">The <see cref="T:GTA.UI.HudComponent"/> to hide.</param>
        </member>
        <member name="M:GTA.UI.Hud.ShowCursorThisFrame">
            <summary>
            Shows the mouse cursor this frame.
            </summary>
        </member>
        <member name="P:GTA.UI.Hud.CursorSprite">
            <summary>
            Gets or sets the sprite the cursor should used when drawn
            </summary>
        </member>
        <member name="P:GTA.UI.Hud.IsVisible">
            <summary>
            Gets or sets a value indicating whether any HUD components should be rendered.
            </summary>
        </member>
        <member name="P:GTA.UI.Hud.IsRadarVisible">
            <summary>
            Gets or sets a value indicating whether the radar is visible.
            </summary>
        </member>
        <member name="P:GTA.UI.Hud.RadarZoom">
            <summary>
            Sets how far the minimap should be zoomed in.
            </summary>
            <value>
            The radar zoom; accepts values from 0 to 200.
            </value>
        </member>
        <member name="T:GTA.UI.HudComponent">
            <summary>
            An enumeration of all possible component of the HUD.
            </summary>
        </member>
        <member name="P:GTA.UI.IElement.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.IElement"/> will be drawn.
            </summary>
            <value>
              <see langword="true" /> if enabled; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.UI.IElement.Color">
            <summary>
            Gets or sets the color of this <see cref="T:GTA.UI.IElement"/>.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:GTA.UI.IElement.Position">
            <summary>
            Gets or sets the position of this <see cref="T:GTA.UI.IElement"/>.
            </summary>
            <value>
            The position scaled on a 1280*720 pixel base.
            </value>
            <remarks>
            If ScaledDraw is called, the position will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth"/>.
            </remarks>
        </member>
        <member name="P:GTA.UI.IElement.Centered">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.IElement"/> should be positioned based on its center or top left corner
            </summary>
            <value>
              <see langword="true" /> if centered; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.UI.IElement.Draw">
            <summary>
            Draws this <see cref="T:GTA.UI.IElement"/> this frame.
            </summary>
        </member>
        <member name="M:GTA.UI.IElement.Draw(System.Drawing.SizeF)">
            <summary>
            Draws this <see cref="T:GTA.UI.IElement"/> this frame at the specified offset.
            </summary>
            <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.IElement"/> using a 1280*720 pixel base.</param>
        </member>
        <member name="M:GTA.UI.IElement.ScaledDraw">
            <summary>
            Draws this <see cref="T:GTA.UI.IElement"/> this frame using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth"/>.
            </summary>
        </member>
        <member name="M:GTA.UI.IElement.ScaledDraw(System.Drawing.SizeF)">
            <summary>
            Draws this <see cref="T:GTA.UI.IElement"/> this frame at the specified offset using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth"/>.
            </summary>
            <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.IElement"/> using a <see cref="P:GTA.UI.Screen.ScaledWidth"/>*720 pixel base.</param>
        </member>
        <member name="P:GTA.UI.ISpriteElement.Size">
            <summary>
            Gets or sets the size to draw the <see cref="T:GTA.UI.ISpriteElement"/>
            </summary>
            <value>
            The size on a 1280*720 pixel base
            </value>
            <remarks>
            If ScaledDraw is called, the size will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth"/>.
            </remarks>
        </member>
        <member name="P:GTA.UI.ISpriteElement.Rotation">
            <summary>
            Gets or sets the rotation to draw thie <see cref="T:GTA.UI.ISpriteElement"/>.
            </summary>
            <value>
            The rotation measured in degrees, clockwise increasing, 0.0 at vertical
            </value>
        </member>
        <member name="T:GTA.UI.LoadingPrompt">
            <summary>
            Methods to manage the display of a loading spinner prompt.
            </summary>
        </member>
        <member name="P:GTA.UI.LoadingPrompt.IsActive">
            <summary>
            Gets a value indicating whether the Loading Prompt is currently being displayed
            </summary>
        </member>
        <member name="M:GTA.UI.LoadingPrompt.Show(System.String,GTA.UI.LoadingSpinnerType)">
            <summary>
            Creates a loading prompt at the bottom right of the screen with the given text and spinner type
            </summary>
            <param name="loadingText">The text to display next to the spinner</param>
            <param name="spinnerType">The style of spinner to draw</param>
            <remarks>
            <see cref="F:GTA.UI.LoadingSpinnerType.Clockwise1"/>, <see cref="F:GTA.UI.LoadingSpinnerType.Clockwise2"/>, <see cref="F:GTA.UI.LoadingSpinnerType.Clockwise3"/> and <see cref="F:GTA.UI.LoadingSpinnerType.RegularClockwise"/> all see to be the same.
            But Rockstar apparently always uses <see cref="F:GTA.UI.LoadingSpinnerType.RegularClockwise"/> in their scripts.
            </remarks>
        </member>
        <member name="M:GTA.UI.LoadingPrompt.Hide">
            <summary>
            Remove the loading prompt at the bottom right of the screen
            </summary>
        </member>
        <member name="T:GTA.UI.LoadingSpinnerType">
            <summary>
            An enumeration of possible loading spinner styles.
            </summary>
        </member>
        <member name="T:GTA.UI.Notification">
            <summary>
            Methods to manage the display of notifications above the minimap.
            </summary>
        </member>
        <member name="M:GTA.UI.Notification.Show(System.String,System.Boolean)">
            <summary>
            Creates a <see cref="T:GTA.UI.Notification"/> above the minimap with the given message.
            </summary>
            <param name="message">The message in the notification.</param>
            <param name="blinking">if set to <see langword="true" /> the notification will blink.</param>
            <returns>The handle of the <see cref="T:GTA.UI.Notification"/> which can be used to hide it using <see cref="M:GTA.UI.Notification.Hide(System.Int32)"/>.</returns>
        </member>
        <member name="M:GTA.UI.Notification.Show(GTA.UI.NotificationIcon,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a more advanced (SMS-alike) <see cref="T:GTA.UI.Notification"/> above the minimap showing a sender icon, subject and the message.
            </summary>
            <param name="icon">The notification icon.</param>
            <param name="sender">The sender name.</param>
            <param name="subject">The subject line.</param>
            <param name="message">The message itself.</param>
            <param name="fadeIn">If <see langword="true" /> the message will fade in.</param>
            <param name="blinking">if set to <see langword="true" /> the notification will blink.</param>
            <returns>The handle of the <see cref="T:GTA.UI.Notification"/> which can be used to hide it using <see cref="M:GTA.UI.Notification.Hide(System.Int32)"/>.</returns>
        </member>
        <member name="M:GTA.UI.Notification.Hide(System.Int32)">
            <summary>
            Hides a <see cref="T:GTA.UI.Notification"/> instantly.
            </summary>
            <param name="handle">The handle of the <see cref="T:GTA.UI.Notification"/> to hide.</param>
        </member>
        <member name="T:GTA.UI.Screen">
            <summary>
            Methods to handle UI actions that affect the whole screen.
            </summary>
        </member>
        <member name="F:GTA.UI.Screen.Width">
            <summary>
            The base width of the screen used for all UI Calculations, unless ScaledDraw is used
            </summary>
        </member>
        <member name="F:GTA.UI.Screen.Height">
            <summary>
            The base height of the screen used for all UI Calculations
            </summary>
        </member>
        <member name="P:GTA.UI.Screen.Resolution">
            <summary>
            Gets the actual screen resolution the game is being rendered at
            </summary>
        </member>
        <member name="P:GTA.UI.Screen.AspectRatio">
            <summary>
            Gets the current screen aspect ratio
            </summary>
        </member>
        <member name="P:GTA.UI.Screen.ScaledWidth">
            <summary>
            Gets the screen width scaled against a 720pixel height base.
            </summary>
        </member>
        <member name="P:GTA.UI.Screen.IsFadedIn">
            <summary>
            Gets a value indicating whether the screen is faded in.
            </summary>
            <value>
            <see langword="true" /> if the screen is faded in; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.UI.Screen.IsFadedOut">
            <summary>
            Gets a value indicating whether the screen is faded out.
            </summary>
            <value>
            <see langword="true" /> if the screen is faded out; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.UI.Screen.IsFadingIn">
            <summary>
            Gets a value indicating whether the screen is fading in.
            </summary>
            <value>
            <see langword="true" /> if the screen is fading in; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.UI.Screen.IsFadingOut">
            <summary>
            Gets a value indicating whether the screen is fading out.
            </summary>
            <value>
            <see langword="true" /> if the screen is fading out; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.UI.Screen.FadeIn(System.Int32)">
            <summary>
            Fades the screen in over a specific time, useful for transitioning
            </summary>
            <param name="time">The time for the fade in to take</param>
        </member>
        <member name="M:GTA.UI.Screen.FadeOut(System.Int32)">
            <summary>
            Fades the screen out over a specific time, useful for transitioning
            </summary>
            <param name="time">The time for the fade out to take</param>
        </member>
        <member name="P:GTA.UI.Screen.AreScreenKillEffectsEnabled">
            <summary>
            Gets a value indicating whether screen kill effects are enabled.
            </summary>
            <value>
            <see langword="true" /> if screen kill effects are enabled; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.UI.Screen.IsEffectActive(GTA.UI.ScreenEffect)">
            <summary>
            Gets a value indicating whether the specific screen effect is running.
            </summary>
            <param name="effectName">The <see cref="T:GTA.UI.ScreenEffect"/> to check.</param>
            <returns><see langword="true" /> if the screen effect is active; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.UI.Screen.StartEffect(GTA.UI.ScreenEffect,System.Int32,System.Boolean)">
            <summary>
            Starts applying the specified effect to the screen.
            </summary>
            <param name="effectName">The <see cref="T:GTA.UI.ScreenEffect"/> to start playing.</param>
            <param name="duration">The duration of the effect in milliseconds or zero to use the default length.</param>
            <param name="looped">If <see langword="true" /> the effect won't stop until <see cref="M:GTA.UI.Screen.StopEffect(GTA.UI.ScreenEffect)"/> is called.</param>
        </member>
        <member name="M:GTA.UI.Screen.StopEffect(GTA.UI.ScreenEffect)">
            <summary>
            Stops applying the specified effect to the screen.
            </summary>
            <param name="effectName">The <see cref="T:GTA.UI.ScreenEffect"/> to stop playing.</param>
        </member>
        <member name="M:GTA.UI.Screen.StopEffects">
            <summary>
            Stops all currently running effects.
            </summary>
        </member>
        <member name="P:GTA.UI.Screen.IsHelpTextDisplayed">
            <summary>
            Gets a value indicating whether a help message is currently displayed.
            </summary>
        </member>
        <member name="M:GTA.UI.Screen.ShowSubtitle(System.String,System.Int32)">
            <summary>
            Shows a subtitle at the bottom of the screen for a given time
            </summary>
            <param name="message">The message to display.</param>
            <param name="duration">The duration to display the subtitle in milliseconds.</param>
        </member>
        <member name="M:GTA.UI.Screen.ShowSubtitle(System.String,System.Int32,System.Boolean)">
            <summary>
            Shows a subtitle at the bottom of the screen for a given time
            </summary>
            <param name="message">The message to display.</param>
            <param name="duration">The duration to display the subtitle in milliseconds.</param>
            <param name="drawImmediately">Whether to draw immediately or draw after all the queued subtitles have finished.</param>
        </member>
        <member name="M:GTA.UI.Screen.ShowHelpTextThisFrame(System.String)">
            <summary>
            Displays a help message in the top corner of the screen this frame. Beeping sound will be played.
            </summary>
            <param name="helpText">The text to display.</param>
        </member>
        <member name="M:GTA.UI.Screen.ShowHelpTextThisFrame(System.String,System.Boolean)">
            <summary>
            Displays a help message in the top corner of the screen this frame. Specify whether beeping sound plays.
            </summary>
            <param name="helpText">The text to display.</param>
            <param name="beep">Whether to play beeping sound</param>
        </member>
        <member name="M:GTA.UI.Screen.ShowHelpText(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Displays a help message in the top corner of the screen infinitely.
            </summary>
            <param name="helpText">The text to display.</param>
            <param name="duration">
            The duration how long the help text will be displayed in real time (not in game time which is influenced by game speed).
            if the value is not positive, the help text will be displayed for 7.5 seconds.
            </param>
            <param name="beep">Whether to play beeping sound.</param>
            <param name="looped">Whether to show this help message forever.</param>
        </member>
        <member name="M:GTA.UI.Screen.ClearHelpText">
            <summary>
            Clears a help message immediately.
            </summary>
        </member>
        <member name="M:GTA.UI.Screen.WorldToScreen(GTA.Math.Vector3,System.Boolean)">
            <summary>
            Translates a point in WorldSpace to its given Coordinates on the <see cref="T:GTA.UI.Screen"/>
            </summary>
            <param name="position">The position in the World.</param>
            <param name="scaleWidth">if set to <see langword="true" /> Returns the screen position scaled by <see cref="P:GTA.UI.Screen.ScaledWidth"/>; otherwise, returns the screen position scaled by <see cref="F:GTA.UI.Screen.Width"/>.</param>
            <returns></returns>
        </member>
        <member name="T:GTA.UI.ScreenEffect">
            <summary>
            An enumeration of possible screen effects.
            </summary>
        </member>
        <member name="T:GTA.UI.Sprite">
            <summary>
            A sprite element using a built-in texture.
            </summary>
        </member>
        <member name="M:GTA.UI.Sprite.#ctor(System.String,System.String,System.Drawing.SizeF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.Sprite"/> class used for drawing in game textures on the screen.
            </summary>
            <param name="textureDict">The Texture dictionary where the <see cref="T:GTA.UI.Sprite"/> is stored (the *.ytd file).</param>
            <param name="textureName">Name of the <see cref="T:GTA.UI.Sprite"/> inside the Texture dictionary.</param>
            <param name="size">Set the <see cref="P:GTA.UI.Sprite.Size"/> of the <see cref="T:GTA.UI.Sprite"/>.</param>
            <param name="position">Set the <see cref="P:GTA.UI.Sprite.Position"/> on screen where to draw the <see cref="T:GTA.UI.Sprite"/>.</param>
        </member>
        <member name="M:GTA.UI.Sprite.#ctor(System.String,System.String,System.Drawing.SizeF,System.Drawing.PointF,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.Sprite"/> class used for drawing in game textures on the screen.
            </summary>
            <param name="textureDict">The Texture dictionary where the <see cref="T:GTA.UI.Sprite"/> is stored (the *.ytd file).</param>
            <param name="textureName">Name of the <see cref="T:GTA.UI.Sprite"/> inside the Texture dictionary.</param>
            <param name="size">Set the <see cref="P:GTA.UI.Sprite.Size"/> of the <see cref="T:GTA.UI.Sprite"/>.</param>
            <param name="position">Set the <see cref="P:GTA.UI.Sprite.Position"/> on screen where to draw the <see cref="T:GTA.UI.Sprite"/>.</param>
            <param name="color">Set the <see cref="P:GTA.UI.Sprite.Color"/> used to draw the <see cref="T:GTA.UI.Sprite"/>.</param>
        </member>
        <member name="M:GTA.UI.Sprite.#ctor(System.String,System.String,System.Drawing.SizeF,System.Drawing.PointF,System.Drawing.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.Sprite"/> class used for drawing in game textures on the screen.
            </summary>
            <param name="textureDict">The Texture dictionary where the <see cref="T:GTA.UI.Sprite"/> is stored (the *.ytd file).</param>
            <param name="textureName">Name of the <see cref="T:GTA.UI.Sprite"/> inside the Texture dictionary.</param>
            <param name="size">Set the <see cref="P:GTA.UI.Sprite.Size"/> of the <see cref="T:GTA.UI.Sprite"/>.</param>
            <param name="position">Set the <see cref="P:GTA.UI.Sprite.Position"/> on screen where to draw the <see cref="T:GTA.UI.Sprite"/>.</param>
            <param name="color">Set the <see cref="P:GTA.UI.Sprite.Color"/> used to draw the <see cref="T:GTA.UI.Sprite"/>.</param>
            <param name="rotation">Set the rotation to draw the sprite, measured in degrees, see also <seealso cref="P:GTA.UI.Sprite.Rotation"/>.</param>
        </member>
        <member name="M:GTA.UI.Sprite.#ctor(System.String,System.String,System.Drawing.SizeF,System.Drawing.PointF,System.Drawing.Color,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.Sprite"/> class used for drawing in game textures on the screen.
            </summary>
            <param name="textureDict">The Texture dictionary where the <see cref="T:GTA.UI.Sprite"/> is stored (the *.ytd file).</param>
            <param name="textureName">Name of the <see cref="T:GTA.UI.Sprite"/> inside the Texture dictionary.</param>
            <param name="size">Set the <see cref="P:GTA.UI.Sprite.Size"/> of the <see cref="T:GTA.UI.Sprite"/>.</param>
            <param name="position">Set the <see cref="P:GTA.UI.Sprite.Position"/> on screen where to draw the <see cref="T:GTA.UI.Sprite"/>.</param>
            <param name="color">Set the <see cref="P:GTA.UI.Sprite.Color"/> used to draw the <see cref="T:GTA.UI.Sprite"/>.</param>
            <param name="rotation">Set the rotation to draw the sprite, measured in degrees, see also <seealso cref="P:GTA.UI.Sprite.Rotation"/>.</param>
            <param name="centered">Position the <see cref="T:GTA.UI.Sprite"/> based on its center instead of top left corner, see also <seealso cref="P:GTA.UI.Sprite.Centered"/>.</param>
        </member>
        <member name="P:GTA.UI.Sprite.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.Sprite" /> will be drawn.
            </summary>
            <value>
              <see langword="true" /> if enabled; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.UI.Sprite.Color">
            <summary>
            Gets or sets the color of this <see cref="T:GTA.UI.Sprite" />.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:GTA.UI.Sprite.Position">
            <summary>
            Gets or sets the position of this <see cref="T:GTA.UI.Sprite" />.
            </summary>
            <value>
            The position scaled on a 1280*720 pixel base.
            </value>
            <remarks>
            If ScaledDraw is called, the position will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </remarks>
        </member>
        <member name="P:GTA.UI.Sprite.Size">
            <summary>
            Gets or sets the size to draw the <see cref="T:GTA.UI.Sprite" />
            </summary>
            <value>
            The size on a 1280*720 pixel base
            </value>
            <remarks>
            If ScaledDraw is called, the size will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </remarks>
        </member>
        <member name="P:GTA.UI.Sprite.Rotation">
            <summary>
            Gets or sets the rotation to draw thie <see cref="T:GTA.UI.Sprite" />.
            </summary>
            <value>
            The rotation measured in degrees, clockwise increasing, 0.0 at vertical
            </value>
        </member>
        <member name="P:GTA.UI.Sprite.Centered">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.Sprite"/> should be positioned based on its center or top left corner
            </summary>
            <value>
              <see langword="true" /> if centered; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.UI.Sprite.Draw">
            <summary>
            Draws this <see cref="T:GTA.UI.Sprite" />.
            </summary>
        </member>
        <member name="M:GTA.UI.Sprite.Draw(System.Drawing.SizeF)">
            <summary>
            Draws the <see cref="T:GTA.UI.Sprite" /> at the specified offset.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:GTA.UI.Sprite.ScaledDraw">
            <summary>
            Draws this <see cref="T:GTA.UI.Sprite" /> using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
        </member>
        <member name="M:GTA.UI.Sprite.ScaledDraw(System.Drawing.SizeF)">
            <summary>
            Draws the <see cref="T:GTA.UI.Sprite" /> at the specified offset using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:GTA.UI.TextElement.#ctor(System.String,System.Drawing.PointF,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.TextElement"/> class used for drawing text on the screen.
            </summary>
            <param name="caption">The <see cref="T:GTA.UI.TextElement"/> to draw.</param>
            <param name="position">Set the <see cref="P:GTA.UI.TextElement.Position"/> on screen where to draw the <see cref="T:GTA.UI.TextElement"/>.</param>
            <param name="scale">Sets a <see cref="P:GTA.UI.TextElement.Scale"/> used to increase of decrease the size of the <see cref="T:GTA.UI.TextElement"/>, for no scaling use 1.0f.</param>
        </member>
        <member name="M:GTA.UI.TextElement.#ctor(System.String,System.Drawing.PointF,System.Single,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.TextElement"/> class used for drawing text on the screen.
            </summary>
            <param name="caption">The <see cref="T:GTA.UI.TextElement"/> to draw.</param>
            <param name="position">Set the <see cref="P:GTA.UI.TextElement.Position"/> on screen where to draw the <see cref="T:GTA.UI.TextElement"/>.</param>
            <param name="scale">Sets a <see cref="P:GTA.UI.TextElement.Scale"/> used to increase of decrease the size of the <see cref="T:GTA.UI.TextElement"/>, for no scaling use 1.0f.</param>
            <param name="color">Set the <see cref="P:GTA.UI.TextElement.Color"/> used to draw the <see cref="T:GTA.UI.TextElement"/>.</param>
        </member>
        <member name="M:GTA.UI.TextElement.#ctor(System.String,System.Drawing.PointF,System.Single,System.Drawing.Color,GTA.UI.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.TextElement"/> class used for drawing text on the screen.
            </summary>
            <param name="caption">The <see cref="T:GTA.UI.TextElement"/> to draw.</param>
            <param name="position">Set the <see cref="P:GTA.UI.TextElement.Position"/> on screen where to draw the <see cref="T:GTA.UI.TextElement"/>.</param>
            <param name="scale">Sets a <see cref="P:GTA.UI.TextElement.Scale"/> used to increase of decrease the size of the <see cref="T:GTA.UI.TextElement"/>, for no scaling use 1.0f.</param>
            <param name="color">Set the <see cref="P:GTA.UI.TextElement.Color"/> used to draw the <see cref="T:GTA.UI.TextElement"/>.</param>
            <param name="font">Sets the <see cref="P:GTA.UI.TextElement.Font"/> used when drawing the text.</param>
        </member>
        <member name="M:GTA.UI.TextElement.#ctor(System.String,System.Drawing.PointF,System.Single,System.Drawing.Color,GTA.UI.Font,GTA.UI.Alignment)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.TextElement"/> class used for drawing text on the screen.
            </summary>
            <param name="caption">The <see cref="T:GTA.UI.TextElement"/> to draw.</param>
            <param name="position">Set the <see cref="P:GTA.UI.TextElement.Position"/> on screen where to draw the <see cref="T:GTA.UI.TextElement"/>.</param>
            <param name="scale">Sets a <see cref="P:GTA.UI.TextElement.Scale"/> used to increase of decrease the size of the <see cref="T:GTA.UI.TextElement"/>, for no scaling use 1.0f.</param>
            <param name="color">Set the <see cref="P:GTA.UI.TextElement.Color"/> used to draw the <see cref="T:GTA.UI.TextElement"/>.</param>
            <param name="font">Sets the <see cref="P:GTA.UI.TextElement.Font"/> used when drawing the text.</param>
            <param name="alignment">Sets the <see cref="P:GTA.UI.TextElement.Alignment"/> used when drawing the text, <see cref="F:GTA.UI.Alignment.Left"/>,<see cref="F:GTA.UI.Alignment.Center"/> or <see cref="F:GTA.UI.Alignment.Right"/>.</param>
        </member>
        <member name="M:GTA.UI.TextElement.#ctor(System.String,System.Drawing.PointF,System.Single,System.Drawing.Color,GTA.UI.Font,GTA.UI.Alignment,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.TextElement"/> class used for drawing text on the screen.
            </summary>
            <param name="caption">The <see cref="T:GTA.UI.TextElement"/> to draw.</param>
            <param name="position">Set the <see cref="P:GTA.UI.TextElement.Position"/> on screen where to draw the <see cref="T:GTA.UI.TextElement"/>.</param>
            <param name="scale">Sets a <see cref="P:GTA.UI.TextElement.Scale"/> used to increase of decrease the size of the <see cref="T:GTA.UI.TextElement"/>, for no scaling use 1.0f.</param>
            <param name="color">Set the <see cref="P:GTA.UI.TextElement.Color"/> used to draw the <see cref="T:GTA.UI.TextElement"/>.</param>
            <param name="font">Sets the <see cref="P:GTA.UI.TextElement.Font"/> used when drawing the text.</param>
            <param name="alignment">Sets the <see cref="P:GTA.UI.TextElement.Alignment"/> used when drawing the text, <see cref="F:GTA.UI.Alignment.Left"/>,<see cref="F:GTA.UI.Alignment.Center"/> or <see cref="F:GTA.UI.Alignment.Right"/>.</param>
            <param name="shadow">Sets whether or not to draw the <see cref="T:GTA.UI.TextElement"/> with a <see cref="P:GTA.UI.TextElement.Shadow"/> effect.</param>
            <param name="outline">Sets whether or not to draw the <see cref="T:GTA.UI.TextElement"/> with an <see cref="P:GTA.UI.TextElement.Outline"/> around the letters.</param>
        </member>
        <member name="M:GTA.UI.TextElement.#ctor(System.String,System.Drawing.PointF,System.Single,System.Drawing.Color,GTA.UI.Font,GTA.UI.Alignment,System.Boolean,System.Boolean,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.TextElement"/> class used for drawing text on the screen.
            </summary>
            <param name="caption">The <see cref="T:GTA.UI.TextElement"/> to draw.</param>
            <param name="position">Set the <see cref="P:GTA.UI.TextElement.Position"/> on screen where to draw the <see cref="T:GTA.UI.TextElement"/>.</param>
            <param name="scale">Sets a <see cref="P:GTA.UI.TextElement.Scale"/> used to increase of decrease the size of the <see cref="T:GTA.UI.TextElement"/>, for no scaling use 1.0f.</param>
            <param name="color">Set the <see cref="P:GTA.UI.TextElement.Color"/> used to draw the <see cref="T:GTA.UI.TextElement"/>.</param>
            <param name="font">Sets the <see cref="P:GTA.UI.TextElement.Font"/> used when drawing the text.</param>
            <param name="alignment">Sets the <see cref="P:GTA.UI.TextElement.Alignment"/> used when drawing the text, <see cref="F:GTA.UI.Alignment.Left"/>,<see cref="F:GTA.UI.Alignment.Center"/> or <see cref="F:GTA.UI.Alignment.Right"/>.</param>
            <param name="shadow">Sets whether or not to draw the <see cref="T:GTA.UI.TextElement"/> with a <see cref="P:GTA.UI.TextElement.Shadow"/> effect.</param>
            <param name="outline">Sets whether or not to draw the <see cref="T:GTA.UI.TextElement"/> with an <see cref="P:GTA.UI.TextElement.Outline"/> around the letters.</param>
            <param name="wrapWidth">Sets how many horizontal pixel to draw before wrapping the <see cref="T:GTA.UI.TextElement"/> on the next line down.</param>
        </member>
        <member name="P:GTA.UI.TextElement.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.TextElement" /> will be drawn.
            </summary>
            <value>
              <see langword="true" /> if enabled; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.UI.TextElement.Color">
            <summary>
            Gets or sets the color of this <see cref="T:GTA.UI.TextElement" />.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:GTA.UI.TextElement.Position">
            <summary>
            Gets or sets the position of this <see cref="T:GTA.UI.TextElement" />.
            </summary>
            <value>
            The position scaled on a 1280*720 pixel base.
            </value>
            <remarks>
            If ScaledDraw is called, the position will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </remarks>
        </member>
        <member name="P:GTA.UI.TextElement.Scale">
            <summary>
            Gets or sets the scale of this <see cref="T:GTA.UI.TextElement"/>.
            </summary>
            <value>
            The scale usually a value between ~0.5 and 3.0, Default = 1.0
            </value>
        </member>
        <member name="P:GTA.UI.TextElement.Font">
            <summary>
            Gets or sets the font of this <see cref="T:GTA.UI.TextElement"/>.
            </summary>
            <value>
            The GTA Font use when drawing.
            </value>
        </member>
        <member name="P:GTA.UI.TextElement.Caption">
            <summary>
            Gets or sets the text to draw in this <see cref="T:GTA.UI.TextElement"/>.
            </summary>
            <value>
            The caption.
            </value>
        </member>
        <member name="P:GTA.UI.TextElement.Alignment">
            <summary>
            Gets or sets the alignment of this <see cref="T:GTA.UI.TextElement"/>.
            </summary>
            <value>
            The alignment:<c>Left</c>, <c>Center</c>, <c>Right</c> Justify
            </value>
        </member>
        <member name="P:GTA.UI.TextElement.Shadow">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.TextElement"/> is drawn with a shadow effect.
            </summary>
            <value>
              <see langword="true" /> if shadow; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.UI.TextElement.Outline">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.TextElement"/> is drawn with an outline.
            </summary>
            <value>
              <see langword="true" /> if outline; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.UI.TextElement.WrapWidth">
            <summary>
            Gets or sets the maximum size of the <see cref="T:GTA.UI.TextElement"/> before it wraps to a new line.
            </summary>
            <value>
            The width of the <see cref="T:GTA.UI.TextElement"/>.
            </value>
        </member>
        <member name="P:GTA.UI.TextElement.Centered">
            <summary>
            Gets or sets a value indicating whether the alignment of this <see cref="T:GTA.UI.TextElement" /> is centered.
            See <see cref="P:GTA.UI.TextElement.Alignment"/>
            </summary>
            <value>
              <see langword="true" /> if centered; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.UI.TextElement.Width">
            <summary>
            Measures how many pixels in the horizontal axis this <see cref="T:GTA.UI.TextElement"/> will use when drawn	against a 1280 pixel base
            </summary>
        </member>
        <member name="P:GTA.UI.TextElement.ScaledWidth">
            <summary>
            Measures how many pixels in the horizontal axis this <see cref="T:GTA.UI.TextElement"/> will use when drawn against a <see cref="P:GTA.UI.TextElement.ScaledWidth"/> pixel base
            </summary>
        </member>
        <member name="M:GTA.UI.TextElement.GetStringWidth(System.String,GTA.UI.Font,System.Single)">
            <summary>
            Measures how many pixels in the horizontal axis the string will use when drawn
            </summary>
            <param name="text">The string of text to measure.</param>
            <param name="font">The <see cref="T:GTA.UI.Font"/> of the textu to measure.</param>
            <param name="scale">Sets a sclae value for increasing or decreasing the size of the text, default value 1.0f - no scaling.</param>
            <returns>
            The amount of pixels scaled on a 1280 pixel width base
            </returns>
        </member>
        <member name="M:GTA.UI.TextElement.GetScaledStringWidth(System.String,GTA.UI.Font,System.Single)">
            <summary>
            Measures how many pixels in the horizontal axis the string will use when drawn
            </summary>
            <param name="text">The string of text to measure.</param>
            <param name="font">The <see cref="T:GTA.UI.Font"/> of the textu to measure.</param>
            <param name="scale">Sets a sclae value for increasing or decreasing the size of the text, default value 1.0f - no scaling.</param>
            <returns>
            The amount of pixels scaled by the pixel width base return in <see cref="P:GTA.UI.Screen.ScaledWidth"/>
            </returns>
        </member>
        <member name="M:GTA.UI.TextElement.Draw">
            <summary>
            Draws the <see cref="T:GTA.UI.TextElement" /> this frame.
            </summary>
        </member>
        <member name="M:GTA.UI.TextElement.Draw(System.Drawing.SizeF)">
            <summary>
            Draws the <see cref="T:GTA.UI.TextElement" /> this frame at the specified offset.
            </summary>
            <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.TextElement" /> using a 1280*720 pixel base.</param>
        </member>
        <member name="M:GTA.UI.TextElement.ScaledDraw">
            <summary>
            Draws the <see cref="T:GTA.UI.TextElement" /> this frame using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
        </member>
        <member name="M:GTA.UI.TextElement.ScaledDraw(System.Drawing.SizeF)">
            <summary>
            Draws the <see cref="T:GTA.UI.TextElement" /> this frame at the specified offset using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
            <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.TextElement" /> using a <see cref="P:GTA.UI.Screen.ScaledWidth" />*720 pixel base.</param>
        </member>
        <member name="T:GTA.Audio">
            <summary>
            Methods to manipulate audio.
            </summary>
        </member>
        <member name="M:GTA.Audio.PlayMusic(System.String)">
            <summary>
            Plays music from the game's music files.
            </summary>
            <param name="musicFile">The music file to play.</param>
        </member>
        <member name="M:GTA.Audio.StopMusic(System.String)">
            <summary>
            Cancels playing a music file.
            </summary>
            <param name="musicFile">The music file to stop.</param>
        </member>
        <member name="M:GTA.Audio.PlaySoundAt(GTA.Entity,System.String)">
            <summary>
            Plays a sound from the game's sound files at the specified <paramref name="entity"/>.
            </summary>
            <param name="entity">The entity to play the sound at.</param>
            <param name="soundFile">The sound file to play.</param>
            <returns>The identifier of the active sound effect instance.</returns>
        </member>
        <member name="M:GTA.Audio.PlaySoundAt(GTA.Entity,System.String,System.String)">
            <summary>
            Plays a sound from the game's sound files at the specified <paramref name="entity"/>.
            </summary>
            <param name="entity">The entity to play the sound at.</param>
            <param name="soundFile">The sound file to play.</param>
            <param name="soundSet">The name of the sound inside the file.</param>
            <returns>The identifier of the active sound effect instance.</returns>
        </member>
        <member name="M:GTA.Audio.PlaySoundAt(GTA.Math.Vector3,System.String)">
            <summary>
            Plays a sound from the game's sound files at the specified <paramref name="position"/>.
            </summary>
            <param name="position">The world coordinates to play the sound at.</param>
            <param name="soundFile">The sound file to play.</param>
            <returns>The identifier of the active sound effect instance.</returns>
        </member>
        <member name="M:GTA.Audio.PlaySoundAt(GTA.Math.Vector3,System.String,System.String)">
            <summary>
            Plays a sound from the game's sound files at the specified <paramref name="position"/>.
            </summary>
            <param name="position">The world coordinates to play the sound at.</param>
            <param name="soundFile">The sound file to play.</param>
            <param name="soundSet">The name of the sound inside the file.</param>
            <returns>The identifier of the active sound effect instance.</returns>
        </member>
        <member name="M:GTA.Audio.PlaySoundFrontend(System.String)">
            <summary>
            Plays a sound from the game's sound files without transformation.
            </summary>
            <param name="soundFile">The sound file to play.</param>
            <returns>The identifier of the active sound effect instance.</returns>
        </member>
        <member name="M:GTA.Audio.PlaySoundFrontend(System.String,System.String)">
            <summary>
            Plays a sound from the game's sound files without transformation.
            </summary>
            <param name="soundFile">The sound file to play.</param>
            <param name="soundSet">The name of the sound inside the file.</param>
            <returns>The identifier of the active sound effect instance.</returns>
        </member>
        <member name="M:GTA.Audio.StopSound(System.Int32)">
            <summary>
            Cancels playing the specified sound instance.
            </summary>
            <param name="id">The identifier of the active sound effect instance.</param>
        </member>
        <member name="M:GTA.Audio.ReleaseSound(System.Int32)">
            <summary>
            Releases the specified sound instance. Call this for every sound effect started.
            </summary>
            <param name="id">The identifier of the active sound effect instance.</param>
        </member>
        <member name="M:GTA.Audio.HasSoundFinished(System.Int32)">
            <summary>
            Gets a boolean indicating whether the specified sound instance has completed playing.
            </summary>
            <param name="id">The identifier of the active sound effect instance.</param>
        </member>
        <member name="M:GTA.Audio.SetAudioFlag(GTA.AudioFlags,System.Boolean)">
            <summary>
            Sets an audio flag to modify subsequent sounds.
            </summary>
            <param name="flag"></param>
            <param name="toggle"></param>
        </member>
        <member name="T:GTA.AudioFlags">
            <summary>
            An enumeration of all possible audio flags.
            </summary>
        </member>
        <member name="P:GTA.Blip.MemoryAddress">
            <summary>
            Gets the memory address where the <see cref="T:GTA.Entity"/> is stored in memory.
            </summary>
        </member>
        <member name="P:GTA.Blip.Type">
            <summary>
            Gets the type of this <see cref="T:GTA.Blip"/>.
            </summary>
        </member>
        <member name="P:GTA.Blip.DisplayType">
            <summary>
            Gets or sets the display type of this <see cref="T:GTA.Blip"/>.
            </summary>
        </member>
        <member name="P:GTA.Blip.CategoryType">
            <summary>
            Gets or sets the category type of this <see cref="T:GTA.Blip"/>.
            </summary>
        </member>
        <member name="P:GTA.Blip.Alpha">
            <summary>
            Gets or sets the alpha of this <see cref="T:GTA.Blip"/> on the map.
            The value is up to 255.
            </summary>
        </member>
        <member name="P:GTA.Blip.Priority">
            <summary>
            Gets or sets the priority of this <see cref="T:GTA.Blip"/>.
            Overlapping <see cref="T:GTA.Blip"/>s with a higher priority cover those with a smaller one.
            The value is up to 255.
            </summary>
        </member>
        <member name="P:GTA.Blip.NumberLabel">
            <summary>
            Gets or sets this <see cref="T:GTA.Blip"/>s label to the given number.
            </summary>
            <remarks>returns <c>-1</c> if the internal value of this property value is between <c>0x80</c> to <c>0xFF</c>.</remarks>
        </member>
        <member name="M:GTA.Blip.RemoveNumberLabel">
            <summary>
            Removes the number label from this <see cref="T:GTA.Blip"/>.
            </summary>
        </member>
        <member name="P:GTA.Blip.Color">
            <summary>
            Gets or sets the color of this <see cref="T:GTA.Blip"/>.
            </summary>
        </member>
        <member name="P:GTA.Blip.SecondaryColor">
            <summary>
            Gets or sets the secondary color of this <see cref="T:GTA.Blip"/>.
            </summary>
        </member>
        <member name="P:GTA.Blip.Sprite">
            <summary>
            Gets or sets the sprite of this <see cref="T:GTA.Blip"/>.
            </summary>
        </member>
        <member name="P:GTA.Blip.Name">
            <summary>
            Get or sets the custom name of this <see cref="T:GTA.Blip"/>.
            The custom name appears in the legends list on the map.
            </summary>
            <remarks>
            Returns <see langword="null" /> if the <see cref="T:GTA.Blip"/> does not exist.
            Setting <see cref="P:GTA.Blip.Sprite"/> will clear this name.
            </remarks>
            <seealso cref="P:GTA.Blip.DisplayNameHash"/>
        </member>
        <member name="P:GTA.Blip.DisplayNameHash">
            <summary>
            Get or sets this <see cref="T:GTA.Blip"/>s display name hash.
            When <see cref="P:GTA.Blip.Name"/> is not set, the game will show the localized <see cref="T:System.String"/> from the games language files with a specified GXT key hash.
            </summary>
            <remarks>Setting <see cref="P:GTA.Blip.Sprite"/> will reset this value.</remarks>
        </member>
        <member name="P:GTA.Blip.Position">
            <summary>
            Gets or sets the position of this <see cref="T:GTA.Blip"/>.
            </summary>
        </member>
        <member name="P:GTA.Blip.Rotation">
            <summary>
            Gets or sets the rotation of this <see cref="T:GTA.Blip"/> on the map as an <see cref="T:System.Int32"/>.
            <para>Use <see cref="P:GTA.Blip.RotationFloat"/> instead if you need to get or set the value precisely, since a rotation value of a <see cref="T:GTA.Blip"/> are stored as a <see cref="T:System.Single"/> in v1.0.944.2 or later versions.</para>
            </summary>
            <value>
            The rotation as an <see cref="T:System.Int32"/>.
            </value>
            <seealso cref="P:GTA.Blip.RotationFloat"/>
        </member>
        <member name="P:GTA.Blip.RotationFloat">
            <summary>
            Gets or sets the rotation of this <see cref="T:GTA.Blip"/> on the map as a <see cref="T:System.Single"/>.
            The value does not have any decimal places in v1.0.877.1 or earlier versions because the value is stored as <see cref="T:System.UInt16"/> in these versions.
            </summary>
            <value>
            The rotation as a <see cref="T:System.Single"/>.
            </value>
        </member>
        <member name="P:GTA.Blip.Scale">
            <summary>
            Sets the scale of this <see cref="T:GTA.Blip"/> on the map.
            </summary>
        </member>
        <member name="P:GTA.Blip.ScaleX">
            <summary>
            Gets or sets the x-axis scale of this <see cref="T:GTA.Blip"/> on the map.
            The value is the same as <see cref="P:GTA.Blip.ScaleY"/> in v1.0.393.4 or earlier versions.
            </summary>
        </member>
        <member name="P:GTA.Blip.ScaleY">
            <summary>
            Gets or sets the y-axis scale of this <see cref="T:GTA.Blip"/> on the map.
            The value is the same as <see cref="P:GTA.Blip.ScaleX"/> in v1.0.393.4 or earlier versions.
            </summary>
        </member>
        <member name="P:GTA.Blip.FlashInterval">
            <summary>
            Gets or sets the interval in ms between each blip flashing.
            The value is up to 65535.
            </summary>
        </member>
        <member name="P:GTA.Blip.FlashTimeLeft">
            <summary>
            Gets or sets the flash time left in ms before this <see cref="T:GTA.Blip"/> stops flashing.
            The max value is up to 65534.
            Set <c>-1</c> to let the <see cref="T:GTA.Blip"/> flash forever.
            </summary>
            <remarks>returns <c>-1</c> if the internal value of this property value is set to <c>65535</c>, which indicates that the flash timer is explicitly not set.</remarks>
        </member>
        <member name="P:GTA.Blip.Entity">
            <summary>
            Gets the <see cref="P:GTA.Blip.Entity"/> this <see cref="T:GTA.Blip"/> is attached to.
            </summary>
        </member>
        <member name="P:GTA.Blip.ShowRoute">
            <summary>
            Gets or sets a value indicating whether the route to this <see cref="T:GTA.Blip"/> should be shown on the map.
            </summary>
            <value>
              <see langword="true" /> to show the route; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Blip.ShowsDollarSign">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Blip"/> shows the dollar sign at the top left corner of the <see cref="T:GTA.Blip"/>.
            </summary>
            <value>
              <see langword="true" /> to show the dollar sign; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Blip.ShowsHeadingIndicator">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Blip"/> shows the heading indicator used for normal players in GTA: Online.
            </summary>
            <value>
              <see langword="true" /> to show the heading indicator; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Blip.ShowsOutlineIndicator">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Blip"/> shows outline.
            The outline color can be changed by setting <see cref="P:GTA.Blip.SecondaryColor"/>.
            </summary>
            <value>
              <see langword="true" /> to show outline; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Blip.ShowsFriendIndicator">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Blip"/> shows friend indicator, which highlights the <see cref="T:GTA.Blip"/> by a right half cyan circle.
            The right half cyan circle indicator is used to indicate friends in GTA: Online.
            </summary>
            <value>
              <see langword="true" /> to show friend indicator; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Blip.ShowsCrewIndicator">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Blip"/> shows crew member indicator, which highlights the <see cref="T:GTA.Blip"/> by a left half cyan circle.
            The right half cyan circle indicator is used to indicate crew members in GTA: Online.
            </summary>
            <value>
              <see langword="true" /> to show crew member indicator; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Blip.IsFriendly">
            <summary>
            Sets a value indicating whether this <see cref="T:GTA.Blip"/> is friendly.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Blip"/> is friendly; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Blip.IsFlashing">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Blip"/> is flashing.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Blip"/> is flashing; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Blip.IsOnMinimap">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Blip"/> is on minimap.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Blip"/> is on minimap; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Blip.IsShortRange">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Blip"/> is short range.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Blip"/> is short range; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Blip.IsHiddenOnLegend">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Blip"/> is hidden on the map legend.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Blip"/> is hidden on the map legend; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.Blip.GetAppropriateName">
            <summary>
            Gets the appropriate name of this <see cref="T:GTA.Blip"/> in the same way the game does.
            </summary>
            <value>
            The same <see cref="T:System.String"/> as <see cref="P:GTA.Blip.Name"/> if the custom string is set;
            otherwise, the localized <see cref="T:System.String"/> from the games language files with the same GXT key hash as <see cref="P:GTA.Blip.DisplayNameHash"/>.
            </value>
            Returns <see langword="null" /> if the <see cref="T:GTA.Blip"/> does not exist.
        </member>
        <member name="M:GTA.Blip.ResetName">
            <summary>
            Sets the name of this <see cref="T:GTA.Blip"/> based on its current <see cref="P:GTA.Blip.Sprite"/>.
            </summary>
        </member>
        <member name="M:GTA.Blip.Delete">
            <summary>
            Removes this <see cref="T:GTA.Blip"/>.
            </summary>
        </member>
        <member name="M:GTA.Blip.Exists">
            <summary>
            Determines if this <see cref="T:GTA.Blip"/> exists.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.Blip"/> exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Blip.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same blip as this <see cref="T:GTA.Blip"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same blip as this <see cref="T:GTA.Blip"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Blip.op_Equality(GTA.Blip,GTA.Blip)">
            <summary>
            Determines if two <see cref="T:GTA.Blip"/>s refer to the same blip.
            </summary>
            <param name="left">The left <see cref="T:GTA.Pickup"/>.</param>
            <param name="right">The right <see cref="T:GTA.Pickup"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same blip as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Blip.op_Inequality(GTA.Blip,GTA.Blip)">
            <summary>
            Determines if two <see cref="T:GTA.Blip"/>s don't refer to the same blip.
            </summary>
            <param name="left">The left <see cref="T:GTA.Pickup"/>.</param>
            <param name="right">The right <see cref="T:GTA.Pickup"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same blip as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Blip.op_Implicit(GTA.Blip)~GTA.Native.InputArgument">
            <summary>
            Converts a <see cref="T:GTA.Blip"/> to a native input argument.
            </summary>
        </member>
        <member name="F:GTA.BlipCategoryType.OtherPlayers">
            <summary>
            <para>Blips will show under the "Other Players" category listing in the map legend, regardless of name. Also shows distance in the map legend.</para>
            <para>the blip name will show with <see cref="F:GTA.UI.Font.ChaletComprimeCologneNotGamerName"/>.</para>
            </summary>
        </member>
        <member name="F:GTA.BlipCategoryType.Property">
            <summary>
            <para>Blips will show under the "Property" category listing in the map legend, regardless of name.</para>
            </summary>
        </member>
        <member name="F:GTA.BlipCategoryType.OwnedProperty">
            <summary>
            <para>Blips will show under the "Owned Property" category listing in the map legend, regardless of name.</para>
            </summary>
        </member>
        <member name="F:GTA.BlipColor.White">
            <summary>
            The default RGB value of this color is the same as HUD_COLOUR_PURE_WHITE, whose default RGB value is #FFFFFF.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.WhiteNotPure">
            <summary>
            The default RGB value of this color is the same as HUD_COLOUR_WHITE, whose default RGB value is #F0F0F0.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Yellow2">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Yellow"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Michael">
            <summary>
            This color is usually #65B4D4 sky blue, which is similar to <see cref="P:System.Drawing.Color.SkyBlue"></see>.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Franklin">
            <summary>
            This color is usually #ABEDAB light green, which is very similar to <see cref="P:System.Drawing.Color.LightGreen"></see>.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Trevor">
            <summary>
            This color is usually #ABEDAB orange, which is very similar to <see cref="P:System.Drawing.Color.SandyBrown"></see>.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Red2">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Red"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Blue2">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Blue"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Red3">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Red"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Yellow3">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Yellow"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Blue3">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Blue"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Blue4">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Blue"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Green2">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Green"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Yellow4">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Yellow"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Yellow5">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Yellow"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.White2">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.White"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Yellow6">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Yellow"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Blue5">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Blue"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Red4">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Red"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Blue6">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Blue"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.BlueDark2">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.BlueDark"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.RedDark2">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.RedDark"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Blue7">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Blue"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipDisplayType.Default">
            <summary>
            The default value on blip creation. Works in the same way as <see cref="F:GTA.BlipDisplayType.BothMapSelectable"/>.
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Standard">
            <summary>
            The default English text for this value is "Destination".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.BigBlip">
            <summary>
            The default English text for this value is "Destination".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.PoliceOfficer">
            <summary>The default English text for this value is "Police".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.PoliceArea">
            <summary>
            When this value is set, the blip will flash. The default English text for this value is "Objective".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Square">
            <summary>The sprite shape is square and the default English text for this value is "Objective".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Jet">
            <summary>
            The default English text for this value is "Police Plane".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Lift">
            <summary>
            The default English text for this value is "Cable Car".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.PoliceOfficer2">
            <summary>
            The default English text for this value is "Police".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.PoliceCarDot">
            <summary>
            The default English text for this value is "Police Chase".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.ChatBubble">
            <summary>
            The default English text for this value is "Snitch".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Garage2">
            <summary>
            The default English text for this value is "Criminal Carsteal".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Drugs">
            <summary>
            The default English text for this value is "Criminal Drugs".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Store">
            <summary>
            The default English text for this value is "Criminal Holdups".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Clothes">
            <summary>
            The default English text for this value is "Clothes Store".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Dart">
            <summary>
            The default English text for this value is "Darts".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.DollarSign">
            <summary>
            The default English text for this value is "Devin".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.OffRoadRaceFinish">
            <summary>
            The default English text for this value is "Off Road Racing".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Key">
            <summary>
            The default English text for this value is "Criminal Cuff Keys".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Music">
            <summary>
            The default English text for this value is "Music Venue".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Marijuana">
            <summary>
            The default English text for this value is "Stash".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Link">
            <summary>
            The default English text for this value is "Gang Police Partner".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Castle">
            <summary>
            The default English text for this value is "Property Takeover".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Handcuffs">
            <summary>
            The default English text for this value is "Biker Handcuffs Closed".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.PersonalVehicleCar">
            <summary>
            The default English text for this value is "Gang Vehicle".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.PersonalVehicleBike">
            <summary>
            The default English text for this value is "Gang Vehicle Bikers".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Hooker">
            <summary>
            The default English text for this value is "Drop Off Hooker".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.GTAOMission">
            <summary>
            The default English text for this value is "UGC Mission".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.GTAOSurvival">
            <summary>
            The default English text for this value is "Horde".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.RaceCar">
            <summary>
            The default English text for this value is "Street Race".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.RaceSea">
            <summary>
            The default English text for this value is "Sea Race".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.SafehouseForSale">
            <summary>
            The default English text for this value is "Property For Sale".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Package">
            <summary>
            The default English text for this value is "Gang Attack Package".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Masks">
            <summary>
            The default English text for this value is "Masks Store".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.PickupSpawn">
            <summary>
            The default English text for this value is "Spawn Point Pickup".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Rockets">
            <summary>
            The default English text for this value is "Missiles".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.MarinaForSale">
            <summary>
            The default English text for this value is "Dock For Sale".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.RaceBike">
            <summary>
            The default English text for this value is "Bike Race".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.RaceFoot">
            <summary>
            The default English text for this value is "Foot Race".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Crosshair">
            <summary>
            The default English text for this value is "Aim".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Testosterone">
            <summary>
            The default English text for this value is "Raging".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Invisible">
            <summary>
            This blip sprite is invisible and the default English text for this value is "Invisible".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.GTAOPlayerSafehouseDead">
            <summary>
            In GTA Online, when some player is a bounty and is in a safehouse, a blip with this sprite will be attached.
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Plane">
            <summary>
            The sprite is the same as <see cref="F:GTA.BlipSprite.Jet"></see> has, but the default English text for this value is "Jet".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.PlayerNoColor">
            <summary>
            This enum is wrongly named. The sprite doesn't have outline, but you can change the color.
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.GunCar">
            <summary>
            The default English text for this value is "Insurgent".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.King">
            <summary>
            The default English text for this value is "Player King".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Loading">
            <summary>
            The default English text for this value is "Zoned".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Flip">
            <summary>
            The default English text for this value is "Flipped".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Shield">
            <summary>
            The sprite image is a shield, but the default English text for this value is "Beast".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Weed">
            <summary>
            The default English text for this value is "Weed Production".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Cocaine">
            <summary>
            The default English text for this value is "Weed Production".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.IdentityCard">
            <summary>
            The default English text for this value is "Weed Production".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Meth">
            <summary>
            The default English text for this value is "Weed Production".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.DollarBill">
            <summary>
            The default English text for this value is "Weed Production".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Package2">
            <summary>
            The default English text for this value is "Package", whose label text hash is used in Biker Business missions in GTA Online.
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.DrugPackage">
            <summary>
            The default English text for this value is "Drugs Package".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Motorcycle">
            <summary>
            The default English text for this value is "Deadline".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Document">
            <summary>
            The default English text for this value is "Registration Papers".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.SteeringWheel">
            <summary>
            The default English text for this value is "Special Vehicle Race Series".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Cup">
            <summary>
            The default English text for this value is "Challenge Series".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Rocket">
            <summary>
            The default English text for this value is "Homing Rocket".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.WeaponizedTrailer">
            <summary>
            The default English text for this value is "Anti-Aircraft Trailer".
            </summary>
        </member>
        <member name="P:GTA.Camera.MemoryAddress">
            <summary>
            Gets the memory address of this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="P:GTA.Camera.MatrixAddress">
            <summary>
            Gets the memory address of the matrix for this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="P:GTA.Camera.IsActive">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Camera"/> is currently being rendered.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Camera"/> is active; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Camera.Matrix">
            <summary>
            Gets the matrix of this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="P:GTA.Camera.Position">
            <summary>
            Gets or sets the position of this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="P:GTA.Camera.Rotation">
            <summary>
            Gets or sets the rotation of this <see cref="T:GTA.Camera"/>.
            </summary>
            <value>
            The yaw, pitch and roll rotations measured in degrees.
            </value>
        </member>
        <member name="P:GTA.Camera.Direction">
            <summary>
            Gets or sets the direction this <see cref="T:GTA.Camera"/> is pointing in.
            </summary>
        </member>
        <member name="P:GTA.Camera.UpVector">
            <summary>
            Gets the up vector of this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="P:GTA.Camera.RightVector">
            <summary>
            Gets the right vector of this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="P:GTA.Camera.ForwardVector">
            <summary>
            Gets the forward vector of this <see cref="T:GTA.Camera"/>, see also <seealso cref="P:GTA.Camera.Direction"/>.
            </summary>
        </member>
        <member name="M:GTA.Camera.GetOffsetPosition(GTA.Math.Vector3)">
            <summary>
            Gets the position in world coordinates of an offset relative to this <see cref="T:GTA.Camera"/>
            </summary>
            <param name="offset">The offset from this <see cref="T:GTA.Camera"/>.</param>
        </member>
        <member name="M:GTA.Camera.GetPositionOffset(GTA.Math.Vector3)">
            <summary>
            Gets the relative offset of this <see cref="T:GTA.Camera"/> from a world coordinates position
            </summary>
            <param name="worldCoords">The world coordinates.</param>
        </member>
        <member name="P:GTA.Camera.FarClip">
            <summary>
            Gets or sets the far clip of this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="P:GTA.Camera.NearClip">
            <summary>
            Gets or sets the near clip of this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="P:GTA.Camera.FieldOfView">
            <summary>
            Gets or sets the field of view of this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="P:GTA.Camera.FarDepthOfField">
            <summary>
            Gets or sets the far depth of field of this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="P:GTA.Camera.NearDepthOfField">
            <summary>
            Sets the near depth of field for this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="P:GTA.Camera.MotionBlurStrength">
            <summary>
            Sets the strength of the motion blur for this <see cref="T:GTA.Camera"/>
            </summary>
        </member>
        <member name="P:GTA.Camera.DepthOfFieldStrength">
            <summary>
            Sets the depth of field strength for this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="M:GTA.Camera.Shake(GTA.CameraShake,System.Single)">
            <summary>
            Shakes this <see cref="T:GTA.Camera"/>.
            </summary>
            <param name="shakeType">Type of the shake to apply.</param>
            <param name="amplitude">The amplitude of the shaking.</param>
        </member>
        <member name="M:GTA.Camera.StopShaking">
            <summary>
            Stops shaking this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="P:GTA.Camera.IsShaking">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Camera"/> is shaking.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Camera"/> is shaking; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Camera.ShakeAmplitude">
            <summary>
            Sets the shake amplitude for this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="M:GTA.Camera.PointAt(GTA.Entity,GTA.Math.Vector3)">
            <summary>
            Points this <see cref="T:GTA.Camera"/> at a specified <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="target">The <see cref="T:GTA.Entity"/> to point at.</param>
            <param name="offset">The offset from the <paramref name="target"/> to point at.</param>
        </member>
        <member name="M:GTA.Camera.PointAt(GTA.PedBone,GTA.Math.Vector3)">
            <summary>
            Points this <see cref="T:GTA.Camera"/> at a specified <see cref="T:GTA.PedBone"/>.
            </summary>
            <param name="target">The <see cref="T:GTA.PedBone"/> to point at.</param>
            <param name="offset">The offset from the <paramref name="target"/> to point at</param>
        </member>
        <member name="M:GTA.Camera.PointAt(GTA.Math.Vector3)">
            <summary>
            Points this <see cref="T:GTA.Camera"/> at a specified position.
            </summary>
            <param name="target">The position to point at.</param>
        </member>
        <member name="M:GTA.Camera.StopPointing">
            <summary>
            Stops this <see cref="T:GTA.Camera"/> pointing at a specific target.
            </summary>
        </member>
        <member name="M:GTA.Camera.InterpTo(GTA.Camera,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves this <see cref="T:GTA.Camera"/> to the <paramref name="to"/> position.
            </summary>
        </member>
        <member name="P:GTA.Camera.IsInterpolating">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Camera"/> is interpolating.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Camera"/> is interpolating; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.Camera.AttachTo(GTA.Entity,GTA.Math.Vector3)">
            <summary>
            Attaches this <see cref="T:GTA.Camera"/> to a specific <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:GTA.Entity"/> to attach to.</param>
            <param name="offset">The offset from the <paramref name="entity"/> to attach to.</param>
        </member>
        <member name="M:GTA.Camera.AttachTo(GTA.PedBone,GTA.Math.Vector3)">
            <summary>
            Attaches this <see cref="T:GTA.Camera"/> to a specific <see cref="T:GTA.PedBone"/>.
            </summary>
            <param name="pedBone">The <see cref="T:GTA.PedBone"/> to attach to.</param>
            <param name="offset">The offset from the <paramref name="pedBone"/> to attach to.</param>
        </member>
        <member name="M:GTA.Camera.Detach">
            <summary>
            Detaches this <see cref="T:GTA.Camera"/> from any <see cref="T:GTA.Entity"/> or <see cref="T:GTA.PedBone"/> it may be attached to.
            </summary>
        </member>
        <member name="M:GTA.Camera.Delete">
            <summary>
            Destroys this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="M:GTA.Camera.Exists">
            <summary>
            Determines if this <see cref="T:GTA.Camera"/> exists.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.Camera"/> exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Camera.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same camera as this <see cref="T:GTA.Camera"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same camera as this <see cref="T:GTA.Camera"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Camera.op_Equality(GTA.Camera,GTA.Camera)">
            <summary>
            Determines if two <see cref="T:GTA.Camera"/>s refer to the same camera.
            </summary>
            <param name="left">The left <see cref="T:GTA.Camera"/>.</param>
            <param name="right">The right <see cref="T:GTA.Camera"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same camera as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Camera.op_Inequality(GTA.Camera,GTA.Camera)">
            <summary>
            Determines if two <see cref="T:GTA.Checkpoint"/>s don't refer to the same camera.
            </summary>
            <param name="left">The left <see cref="T:GTA.Camera"/>.</param>
            <param name="right">The right <see cref="T:GTA.Camera"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same camera as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Camera.op_Implicit(GTA.Camera)~GTA.Native.InputArgument">
            <summary>
            Converts a <see cref="T:GTA.Camera"/> to a native input argument.
            </summary>
        </member>
        <member name="P:GTA.Checkpoint.MemoryAddress">
            <summary>
            Gets the memory address of this <see cref="T:GTA.Checkpoint"/>.
            </summary>
        </member>
        <member name="P:GTA.Checkpoint.Position">
            <summary>
            Gets or sets the position of this <see cref="T:GTA.Checkpoint"/>.
            </summary>
        </member>
        <member name="P:GTA.Checkpoint.TargetPosition">
            <summary>
            Gets or sets the position where this <see cref="T:GTA.Checkpoint"/> points to.
            </summary>
        </member>
        <member name="P:GTA.Checkpoint.Icon">
            <summary>
            Gets or sets the icon drawn in this <see cref="T:GTA.Checkpoint"/>.
            </summary>
        </member>
        <member name="P:GTA.Checkpoint.CustomIcon">
            <summary>
            Gets or sets a custom icon to be drawn in this <see cref="T:GTA.Checkpoint"/>.
            </summary>
        </member>
        <member name="P:GTA.Checkpoint.Radius">
            <summary>
            Gets or sets the radius of this <see cref="T:GTA.Checkpoint"/>.
            </summary>
        </member>
        <member name="P:GTA.Checkpoint.Color">
            <summary>
            Gets or sets the color of this <see cref="T:GTA.Checkpoint"/>.
            </summary>
        </member>
        <member name="P:GTA.Checkpoint.IconColor">
            <summary>
            Gets or sets the color of the icon in this <see cref="T:GTA.Checkpoint"/>.
            </summary>
        </member>
        <member name="P:GTA.Checkpoint.CylinderRadius">
            <summary>
            Gets or sets the radius of the cylinder in this <see cref="T:GTA.Checkpoint"/>.
            </summary>
        </member>
        <member name="P:GTA.Checkpoint.CylinderNearHeight">
            <summary>
            Gets or sets the near height of the cylinder of this <see cref="T:GTA.Checkpoint"/>.
            </summary>
        </member>
        <member name="P:GTA.Checkpoint.CylinderFarHeight">
            <summary>
            Gets or sets the far height of the cylinder of this <see cref="T:GTA.Checkpoint"/>.
            </summary>
        </member>
        <member name="M:GTA.Checkpoint.Delete">
            <summary>
            Removes this <see cref="T:GTA.Checkpoint"/>.
            </summary>
        </member>
        <member name="M:GTA.Checkpoint.Exists">
            <summary>
            Determines if this <see cref="T:GTA.Checkpoint"/> exists.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.Checkpoint"/> exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Checkpoint.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same checkpoint as this <see cref="T:GTA.Checkpoint"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same checkpoint as this <see cref="T:GTA.Checkpoint"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Checkpoint.op_Equality(GTA.Checkpoint,GTA.Checkpoint)">
            <summary>
            Determines if two <see cref="T:GTA.Checkpoint"/>s refer to the same checkpoint.
            </summary>
            <param name="left">The left <see cref="T:GTA.Checkpoint"/>.</param>
            <param name="right">The right <see cref="T:GTA.Checkpoint"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same checkpoint as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Checkpoint.op_Inequality(GTA.Checkpoint,GTA.Checkpoint)">
            <summary>
            Determines if two <see cref="T:GTA.Checkpoint"/>s don't refer to the same checkpoint.
            </summary>
            <param name="left">The left <see cref="T:GTA.Checkpoint"/>.</param>
            <param name="right">The right <see cref="T:GTA.Checkpoint"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same checkpoint as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Checkpoint.op_Implicit(GTA.Checkpoint)~GTA.Native.InputArgument">
            <summary>
            Converts a <see cref="T:GTA.Checkpoint"/> to a native input argument.
            </summary>
        </member>
        <member name="M:GTA.CheckpointCustomIcon.#ctor(GTA.CheckpointCustomIconStyle,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.CheckpointCustomIcon" /> struct.
            </summary>
            <param name="iconStyle">The icon style.</param>
            <param name="iconNumber">The icon number,
            if <paramref name="iconStyle"/> is <see cref="F:GTA.CheckpointCustomIconStyle.Number"/> allowed range is 0 - 99
            otherwise allowed range is 0 - 9. </param>
        </member>
        <member name="P:GTA.CheckpointCustomIcon.Number">
            <summary>
            Gets or sets the number to display inside the icon.
            </summary>
            <value>
            If <see cref="P:GTA.CheckpointCustomIcon.Style"/> is <see cref="F:GTA.CheckpointCustomIconStyle.Number"/>, allowed range is 0 - 99; otherwise allowed range is 0 - 9.
            </value>
        </member>
        <member name="P:GTA.CheckpointCustomIcon.Style">
            <summary>
            Gets or sets the icon style.
            </summary>
        </member>
        <member name="M:GTA.CheckpointCustomIcon.op_Implicit(GTA.CheckpointCustomIcon)~GTA.Native.InputArgument">
            <summary>
            Converts a <see cref="T:GTA.CheckpointCustomIcon"/> to a native input argument.
            </summary>
        </member>
        <member name="M:GTA.AnimatedBuilding.FromHandle(System.Int32)">
            <summary>
            Creates a new instance of an <see cref="T:GTA.AnimatedBuilding"/> from the given handle.
            </summary>
            <param name="handle">The building handle.</param>
            <returns>
            Returns a <see cref="T:GTA.AnimatedBuilding"/> if this handle corresponds to a <see cref="T:GTA.AnimatedBuilding"/>.
            Returns <see langword="null" /> if no <see cref="T:GTA.AnimatedBuilding"/> exists this the specified <paramref name="handle"/>
            </returns>
        </member>
        <member name="P:GTA.AnimatedBuilding.Handle">
            <summary>
            The handle of this <see cref="T:GTA.AnimatedBuilding"/>. This property is provided mainly for safer instance handling, but this is also used for equality comparison.
            </summary>
        </member>
        <member name="P:GTA.AnimatedBuilding.MemoryAddress">
            <summary>
            Gets the memory address where the <see cref="T:GTA.AnimatedBuilding"/> is stored in memory.
            </summary>
        </member>
        <member name="P:GTA.AnimatedBuilding.Model">
            <summary>
            Gets the model of this <see cref="T:GTA.AnimatedBuilding"/>.
            </summary>
        </member>
        <member name="P:GTA.AnimatedBuilding.Matrix">
            <summary>
            Gets this <see cref="T:GTA.AnimatedBuilding"/>s matrix which stores position and rotation information.
            </summary>
        </member>
        <member name="P:GTA.AnimatedBuilding.Rotation">
            <summary>
            Gets the rotation of this <see cref="T:GTA.AnimatedBuilding"/>.
            </summary>
            <value>
            The yaw, pitch, roll rotation values in degree.
            </value>
        </member>
        <member name="P:GTA.AnimatedBuilding.Quaternion">
            <summary>
            Gets the quaternion of this <see cref="T:GTA.AnimatedBuilding"/>.
            </summary>
        </member>
        <member name="P:GTA.AnimatedBuilding.Position">
            <summary>
            Gets or sets the position of this <see cref="T:GTA.AnimatedBuilding"/>.
            </summary>
            <value>
            The position in world space.
            </value>
        </member>
        <member name="M:GTA.AnimatedBuilding.Exists">
            <summary>
            Determines if this <see cref="T:GTA.Building"/> exists.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.Building"/> exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.AnimatedBuilding.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same entity as this <see cref="T:GTA.AnimatedBuilding"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same entity as this <see cref="T:GTA.AnimatedBuilding"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.AnimatedBuilding.op_Equality(GTA.AnimatedBuilding,GTA.AnimatedBuilding)">
            <summary>
            Determines if two <see cref="T:GTA.AnimatedBuilding"/>s refer to the same entity.
            </summary>
            <param name="left">The left <see cref="T:GTA.AnimatedBuilding"/>.</param>
            <param name="right">The right <see cref="T:GTA.AnimatedBuilding"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same entity as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.AnimatedBuilding.op_Inequality(GTA.AnimatedBuilding,GTA.AnimatedBuilding)">
            <summary>
            Determines if two <see cref="T:GTA.AnimatedBuilding"/>s don't refer to the same entity.
            </summary>
            <param name="left">The left <see cref="T:GTA.AnimatedBuilding"/>.</param>
            <param name="right">The right <see cref="T:GTA.AnimatedBuilding"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same entity as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.InteriorInstance.FromHandle(System.Int32)">
            <summary>
            Creates a new instance of an <see cref="T:GTA.InteriorInstance"/> from the given handle.
            </summary>
            <param name="handle">The interior instance handle.</param>
            <returns>
            Returns a <see cref="T:GTA.InteriorInstance"/> if this handle corresponds to a <see cref="T:GTA.InteriorInstance"/>.
            Returns <see langword="null" /> if no <see cref="T:GTA.InteriorInstance"/> exists this the specified <paramref name="handle"/>
            </returns>
        </member>
        <member name="P:GTA.InteriorInstance.Handle">
            <summary>
            The handle of this <see cref="T:GTA.Building"/>. This property is provided mainly for safer instance handling, but this is also used for equality comparison.
            </summary>
        </member>
        <member name="P:GTA.InteriorInstance.MemoryAddress">
            <summary>
            Gets the memory address where the <see cref="T:GTA.InteriorInstance"/> is stored in memory.
            </summary>
        </member>
        <member name="P:GTA.InteriorInstance.Model">
            <summary>
            Gets the model of this <see cref="T:GTA.InteriorInstance"/>.
            </summary>
        </member>
        <member name="P:GTA.InteriorInstance.Matrix">
            <summary>
            Gets this <see cref="T:GTA.InteriorInstance"/>s matrix which stores position and rotation information.
            </summary>
        </member>
        <member name="P:GTA.InteriorInstance.Rotation">
            <summary>
            Gets the rotation of this <see cref="T:GTA.InteriorInstance"/>.
            </summary>
            <value>
            The yaw, pitch, roll rotation values in degree.
            </value>
        </member>
        <member name="P:GTA.InteriorInstance.Quaternion">
            <summary>
            Gets the quaternion of this <see cref="T:GTA.InteriorInstance"/>.
            </summary>
        </member>
        <member name="P:GTA.InteriorInstance.Position">
            <summary>
            Gets or sets the position of this <see cref="T:GTA.InteriorInstance"/>.
            </summary>
            <value>
            The position in world space.
            </value>
        </member>
        <member name="P:GTA.InteriorInstance.InteriorProxy">
            <summary>
            Gets the <see cref="P:GTA.InteriorInstance.InteriorProxy"/> this <see cref="T:GTA.InteriorInstance"/> is loaded from.
            </summary>
            <remarks>returns <see langword="null" /> if this <see cref="T:GTA.InteriorInstance"/> does not exist or SHVDN could not find the <see cref="P:GTA.InteriorInstance.InteriorProxy"/> pool for some reason.</remarks>
        </member>
        <member name="M:GTA.InteriorInstance.Exists">
            <summary>
            Determines if this <see cref="T:GTA.InteriorInstance"/> exists.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.InteriorInstance"/> exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.InteriorInstance.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same entity as this <see cref="T:GTA.InteriorInstance"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same entity as this <see cref="T:GTA.InteriorInstance"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.InteriorInstance.op_Equality(GTA.InteriorInstance,GTA.InteriorInstance)">
            <summary>
            Determines if two <see cref="T:GTA.InteriorInstance"/>s refer to the same entity.
            </summary>
            <param name="left">The left <see cref="T:GTA.InteriorInstance"/>.</param>
            <param name="right">The right <see cref="T:GTA.InteriorInstance"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same entity as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.InteriorInstance.op_Inequality(GTA.InteriorInstance,GTA.InteriorInstance)">
            <summary>
            Determines if two <see cref="T:GTA.InteriorInstance"/>s don't refer to the same entity.
            </summary>
            <param name="left">The left <see cref="T:GTA.InteriorInstance"/>.</param>
            <param name="right">The right <see cref="T:GTA.InteriorInstance"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same entity as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="F:GTA.EntityPopulationType.Unknown">
            <summary>
            The game does not automatically delete entities when this value is set.
            </summary>
        </member>
        <member name="F:GTA.EntityPopulationType.RandomPermanent">
            <summary>
            The game does not automatically delete entities when this value is set.
            </summary>
        </member>
        <member name="F:GTA.EntityPopulationType.RandomParked">
            <summary>
            This value is set when parked vehicles are created.
            </summary>
        </member>
        <member name="F:GTA.EntityPopulationType.RandomScenario">
            <summary>
            This value is set when scenario peds are created.
            </summary>
        </member>
        <member name="F:GTA.EntityPopulationType.RandomAmbient">
            <summary>
            This value is set when ambient entities are created or when SET_ENTITY_AS_NO_LONGER_NEEDED is called.
            </summary>
        </member>
        <member name="F:GTA.EntityPopulationType.Permanent">
            <summary>
            The game does not automatically delete entities when this value is set.
            </summary>
        </member>
        <member name="F:GTA.EntityPopulationType.Mission">
            <summary>
            This value is set when entities are created via native functions or when SET_ENTITY_AS_MISSION_ENTITY is called.
            The game does not automatically delete entities when this value is set.
            </summary>
        </member>
        <member name="F:GTA.EntityPopulationType.Replay">
            <summary>
            The game does not automatically delete entities when this value is set.
            </summary>
        </member>
        <member name="M:GTA.Building.FromHandle(System.Int32)">
            <summary>
            Creates a new instance of an <see cref="T:GTA.Building"/> from the given handle.
            </summary>
            <param name="handle">The building handle.</param>
            <returns>
            Returns a <see cref="T:GTA.Building"/> if this handle corresponds to a <see cref="T:GTA.Building"/>.
            Returns <see langword="null" /> if no <see cref="T:GTA.Building"/> exists this the specified <paramref name="handle"/>
            </returns>
        </member>
        <member name="P:GTA.Building.Handle">
            <summary>
            The handle of this <see cref="T:GTA.Building"/>. This property is provided mainly for safer instance handling, but this is also used for equality comparison.
            </summary>
        </member>
        <member name="P:GTA.Building.MemoryAddress">
            <summary>
            Gets the memory address where the <see cref="T:GTA.Building"/> is stored in memory.
            </summary>
        </member>
        <member name="P:GTA.Building.Model">
            <summary>
            Gets the model of this <see cref="T:GTA.Building"/>.
            </summary>
        </member>
        <member name="P:GTA.Building.Matrix">
            <summary>
            Gets this <see cref="T:GTA.Building"/>s matrix which stores position and rotation information.
            </summary>
        </member>
        <member name="P:GTA.Building.Rotation">
            <summary>
            Gets or sets the rotation of this <see cref="T:GTA.Building"/>.
            </summary>
            <value>
            The yaw, pitch, roll rotation values in degree.
            </value>
        </member>
        <member name="P:GTA.Building.Quaternion">
            <summary>
            Gets the quaternion of this <see cref="T:GTA.Building"/>.
            </summary>
        </member>
        <member name="P:GTA.Building.Position">
            <summary>
            Gets or sets the position of this <see cref="T:GTA.Building"/>.
            </summary>
            <value>
            The position in world space.
            </value>
        </member>
        <member name="M:GTA.Building.Exists">
            <summary>
            Determines if this <see cref="T:GTA.Building"/> exists.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.Building"/> exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Building.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same entity as this <see cref="T:GTA.Building"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same entity as this <see cref="T:GTA.Building"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Building.op_Equality(GTA.Building,GTA.Building)">
            <summary>
            Determines if two <see cref="T:GTA.Building"/>s refer to the same entity.
            </summary>
            <param name="left">The left <see cref="T:GTA.Building"/>.</param>
            <param name="right">The right <see cref="T:GTA.Building"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same entity as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Building.op_Inequality(GTA.Building,GTA.Building)">
            <summary>
            Determines if two <see cref="T:GTA.Building"/>s don't refer to the same entity.
            </summary>
            <param name="left">The left <see cref="T:GTA.Building"/>.</param>
            <param name="right">The right <see cref="T:GTA.Building"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same entity as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="F:GTA.VehicleType.None">
            <summary>
            The default/invalid type.
            </summary>
            <remarks>
            The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_NONE</c>.
            The hash value for <c>VEHICLE_TYPE_NONE</c> is <c>0x2F2B9BC</c> (hashed by Jenkins one-at-a-time hash but without lowercase conversion before hashing).
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.Automobile">
            <summary>
            The non-special automobile type, such as general cars, taxis, trucks, and tanks.
            </summary>
            <remarks>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_CAR</c>.</para>
            <para>The internal class in memory is <c>CAutomobile</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.Plane">
            <summary>
            The airplane type.
            </summary>
            <remarks>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_PLANE</c>.</para>
            <para>The internal class in memory is <c>CPlane</c>, which is a subclass of <c>CAutomobile</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.Trailer">
            <summary>
            The trailer type.
            </summary>
            <remarks>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_TRAILER</c>.</para>
            <para>The internal class in memory is <c>CTrailer</c>, which is a subclass of <c>CAutomobile</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.QuadBike">
            <summary>
            The non-special quad bike type. Also includes tricycles, such as <see cref="F:GTA.VehicleHash.Chimera"/>, <see cref="F:GTA.VehicleHash.RRocket"/>, and <see cref="F:GTA.VehicleHash.Stryder"/>.
            </summary>
            <remarks>
            <para>Amphibious quad bikes are not classified as this type but classified as <see cref="F:GTA.VehicleType.AmphibiousQuadBike"/>.</para>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_QUADBIKE</c>.</para>
            <para>The internal class in memory is <c>CQuadBike</c>, which is a subclass of <c>CAutomobile</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.SubmarineCar">
            <summary>
            The submarine car type for the submarine cars, which can travel underwater like submarines.
            </summary>
            <remarks>
            <para>Amphibious automobiles are not classified as this type but classified as <see cref="F:GTA.VehicleType.AmphibiousAutomobile"/>.</para>
            <para>Submarines are not classified as this type but classified as <see cref="F:GTA.VehicleType.Submarine"/>.</para>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_SUBMARINECAR</c>.</para>
            <para>The internal class in memory is <c>CSubmarineCar</c>, which is a subclass of <c>CAutomobile</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.AmphibiousAutomobile">
            <summary>
            The amphibious automobile type.
            </summary>
            <remarks>
            <para>Submarine cars are not classified as this type but classified as <see cref="F:GTA.VehicleType.SubmarineCar"/>.</para>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_AMPHIBIOUS_AUTOMOBILE</c>.</para>
            <para>The internal class in memory is <c>CAmphibiousAutomobile</c>, which is a subclass of <c>CAutomobile</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.AmphibiousQuadBike">
            <summary>
            The amphibious quad bike type.
            </summary>
            <remarks>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_AMPHIBIOUS_QUADBIKE</c>.</para>
            <para>The internal class in memory is <c>CAmphibiousQuadBike</c>, which is a subclass of <c>CAmphibiousAutomobile</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.Helicopter">
            <summary>
            The helicopter type. <see cref="F:GTA.VehicleHash.Thruster"/> is also classified as this type.
            </summary>
            <remarks>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_HELI</c>.</para>
            <para>The internal class in memory is <c>CHeli</c>, which is a subclass of <c>CAutomobile</c> via <c>CRotaryWingAircraft</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.Blimp">
            <summary>
            The blimp type.
            </summary>
            <remarks>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_BLIMP</c>.</para>
            <para>The internal class in memory is <c>CBlimp</c>, which is a subclass of <c>CHeli</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.Autogyro">
            <summary>
            The autogyro type, which is not used in the stock game.
            </summary>
            <remarks>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_AUTOGYRO</c>.</para>
            <para>The internal class in memory is <c>CAutogyro</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.Motorcycle">
            <summary>
            The motorcycle type.
            </summary>
            <remarks>
            <para>Tricycles are not classified as this type but classified as <see cref="F:GTA.VehicleType.QuadBike"/>.</para>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_BIKE</c>.</para>
            <para>The internal class in memory is <c>CBike</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.Bicycle">
            <summary>
            The bicycle type.
            </summary>
            <remarks>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_BICYCLE</c>.</para>
            <para>The internal class in memory is <c>CBmx</c>, which is a subclass of <c>CBike</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.Boat">
            <summary>
            The boat type.
            </summary>
            <remarks>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_BOAT</c>.</para>
            <para>The internal class in memory is <c>CBoat</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.Train">
            <summary>
            The train type.
            </summary>
            <remarks>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_TRAIN</c>.</para>
            <para>The internal class in memory is <c>CTrain</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.Submarine">
            <summary>
            The submarine type.
            </summary>
            <remarks>
            <para>Submarine cars are not classified as this type but classified as <see cref="F:GTA.VehicleType.SubmarineCar"/>.</para>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_TRAIN</c>.</para>
            <para>The internal class in memory is <c>CSubmarine</c></para>
            </remarks>
        </member>
        <member name="F:GTA.ShapeTestStatus.NonExistent">
            <summary>
            Shapetest requests are discarded if they are ignored for a frame or as soon as the results are returned.
            </summary>
        </member>
        <member name="F:GTA.ShapeTestStatus.NotReady">
            <summary>
            Not ready yet; try again next frame.
            </summary>
        </member>
        <member name="F:GTA.ShapeTestStatus.Ready">
            <summary>
            The result is ready and the results have been returned to you.
            The shape test request has also just been destroyed.
            </summary>
        </member>
        <member name="M:GTA.Entity.FromHandle(System.Int32)">
            <summary>
            Creates a new instance of an <see cref="T:GTA.Entity"/> from the given handle.
            </summary>
            <param name="handle">The entity handle.</param>
            <returns>Returns a <see cref="T:GTA.Ped"/> if this handle corresponds to a Ped.
            Returns a <see cref="T:GTA.Vehicle"/> if this handle corresponds to a Vehicle.
            Returns a <see cref="T:GTA.Prop"/> if this handle corresponds to a Prop.
            Returns <see langword="null" /> if no <see cref="T:GTA.Entity"/> exists this the specified <paramref name="handle"/></returns>
        </member>
        <member name="P:GTA.Entity.MemoryAddress">
            <summary>
            Gets the memory address where the <see cref="T:GTA.Entity"/> is stored in memory.
            </summary>
        </member>
        <member name="P:GTA.Entity.EntityType">
            <summary>
            Gets the type of the current <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.PopulationType">
            <summary>
            Gets or sets the population type of the current <see cref="T:GTA.Entity"/>.
            This property can also be used to add or remove <see cref="T:GTA.Entity"/> persistence.
            </summary>
        </member>
        <member name="P:GTA.Entity.IsDead">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Entity"/> is dead or does not exist.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> is dead or does not exist; otherwise, <see langword="false" />.
            </value>
            <seealso cref="M:GTA.Entity.Exists"/>
            <seealso cref="P:GTA.Ped.IsInjured"/>
        </member>
        <member name="P:GTA.Entity.IsAlive">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Entity"/> exists and is alive.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> exists and is alive; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.Model">
            <summary>
            Gets the model of the current <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.Opacity">
            <summary>
            Gets or sets how opaque this <see cref="T:GTA.Entity"/> is.
            </summary>
            <value>
            0 for completely see through, 255 for fully opaque
            </value>
        </member>
        <member name="M:GTA.Entity.ResetOpacity">
            <summary>
            Resets the <seealso cref="P:GTA.Entity.Opacity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.LodDistance">
            <summary>
            Gets or sets the level of detail distance of this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.IsPersistent">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is persistent.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is persistent; otherwise, <see langword="false" />.
            </value>
            <remarks>
            If this <see cref="T:GTA.Entity"/> is <see cref="T:GTA.Ped"/>, setting to <see langword="true" /> can clear ambient tasks and setting to <see langword="false" /> will clear all tasks immediately.
            Use <see cref="M:GTA.Ped.SetIsPersistentNoClearTask(System.Boolean)"/> instead if you need to keep assigned tasks.
            </remarks>
        </member>
        <member name="P:GTA.Entity.IsPositionFrozen">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is frozen.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is position frozen; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.Bones">
            <summary>
            Gets a collection of the <see cref="T:GTA.EntityBone"/>s in this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.Health">
            <summary>
            Gets or sets the health of this <see cref="T:GTA.Entity"/> as an <see cref="T:System.Int32"/>.
            <para>Use <see cref="P:GTA.Entity.HealthFloat"/> instead if you need to get or set the value precisely, since a health value of a <see cref="T:GTA.Entity"/> are stored as a <see cref="T:System.Single"/>.</para>
            </summary>
            <value>
            The health as an <see cref="T:System.Int32"/>.
            </value>
            <seealso cref="P:GTA.Entity.HealthFloat"/>
        </member>
        <member name="P:GTA.Entity.MaxHealth">
            <summary>
            Gets or sets the maximum health of this <see cref="T:GTA.Entity"/> as an <see cref="T:System.Int32"/>.
            <para>Use <see cref="P:GTA.Entity.MaxHealthFloat"/> instead if you need to get or set the value precisely, since a max health value of a <see cref="T:GTA.Entity"/> are stored as a <see cref="T:System.Single"/>.</para>
            </summary>
            <value>
            The maximum health as a <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="P:GTA.Entity.HealthFloat">
            <summary>
            Gets or sets the health of this <see cref="T:GTA.Entity"/> as a <see cref="T:System.Single"/>.
            </summary>
            <value>
            The health as a <see cref="T:System.Single"/>.
            </value>
        </member>
        <member name="P:GTA.Entity.MaxHealthFloat">
            <summary>
            Gets or sets the maximum health of this <see cref="T:GTA.Entity"/> as a <see cref="T:System.Single"/>.
            </summary>
            <value>
            The maximum health as a <see cref="T:System.Single"/>.
            </value>
        </member>
        <member name="P:GTA.Entity.Matrix">
            <summary>
            Gets this <see cref="T:GTA.Entity"/>s matrix which stores position and rotation information.
            </summary>
        </member>
        <member name="P:GTA.Entity.Position">
            <summary>
            Gets or sets the position of this <see cref="T:GTA.Entity"/>.
            If the <see cref="T:GTA.Entity"/> is <see cref="T:GTA.Ped"/> and the <see cref="T:GTA.Ped"/> is in a <see cref="T:GTA.Vehicle"/>, the <see cref="T:GTA.Vehicle"/>'s position will be returned or changed.
            </summary>
            <value>
            The position in world space.
            </value>
        </member>
        <member name="P:GTA.Entity.PositionNoOffset">
            <summary>
            Sets the position of this <see cref="T:GTA.Entity"/> without any offset.
            </summary>
            <value>
            The position in world space.
            </value>
        </member>
        <member name="P:GTA.Entity.Rotation">
            <summary>
            Gets or sets the rotation of this <see cref="T:GTA.Entity"/>.
            </summary>
            <value>
            The yaw, pitch, roll rotation values.
            </value>
        </member>
        <member name="P:GTA.Entity.Heading">
            <summary>
            Gets or sets the heading of this <see cref="T:GTA.Entity"/>.
            </summary>
            <value>
            The heading in degrees.
            </value>
        </member>
        <member name="P:GTA.Entity.SubmersionLevel">
            <summary>
            Gets a value indicating how submersed this <see cref="T:GTA.Entity"/> is, 1.0f means the whole entity is submerged.
            </summary>
        </member>
        <member name="P:GTA.Entity.HeightAboveGround">
            <summary>
            Gets how high above ground this <see cref="T:GTA.Entity"/> is.
            </summary>
        </member>
        <member name="P:GTA.Entity.Quaternion">
            <summary>
            Gets or sets the quaternion of this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.UpVector">
            <summary>
            Gets the vector that points above this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.RightVector">
            <summary>
            Gets the vector that points to the right of this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.ForwardVector">
            <summary>
            Gets the vector that points in front of this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.LeftPosition">
            <summary>
            Gets a position directly to the left of this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.RightPosition">
            <summary>
            Gets a position directly to the right of this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.RearPosition">
            <summary>
            Gets a position directly behind this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.FrontPosition">
            <summary>
            Gets a position directly in front of this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.AbovePosition">
            <summary>
            Gets a position directly above this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.BelowPosition">
            <summary>
            Gets a position directly below this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="M:GTA.Entity.GetOffsetPosition(GTA.Math.Vector3)">
            <summary>
            Gets the position in world coordinates of an offset relative this <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="offset">The offset from this <see cref="T:GTA.Entity"/>.</param>
        </member>
        <member name="M:GTA.Entity.GetPositionOffset(GTA.Math.Vector3)">
            <summary>
            Gets the relative offset of this <see cref="T:GTA.Entity"/> from a world coordinates position.
            </summary>
            <param name="worldCoords">The world coordinates.</param>
        </member>
        <member name="P:GTA.Entity.Speed">
            <summary>
            Gets or sets this <see cref="T:GTA.Entity"/>s speed.
            </summary>
            <value>
            The speed in m/s.
            </value>
        </member>
        <member name="P:GTA.Entity.MaxSpeed">
            <summary>
            Sets the maximum speed this <see cref="T:GTA.Entity"/> can move at.
            </summary>
        </member>
        <member name="P:GTA.Entity.Velocity">
            <summary>
            Gets or sets the velocity of this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.RotationVelocity">
            <summary>
            Gets or sets the rotation velocity of this <see cref="T:GTA.Entity"/> in local space.
            </summary>
        </member>
        <member name="P:GTA.Entity.WorldRotationVelocity">
            <summary>
            Gets or sets the rotation velocity of this <see cref="T:GTA.Entity"/> in world space.
            </summary>
        </member>
        <member name="P:GTA.Entity.DamageRecords">
            <summary>
            Gets a collection of the <see cref="T:GTA.EntityDamageRecord"/>s in this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="M:GTA.Entity.HasBeenDamagedBy(GTA.Entity)">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> has been damaged by a specified <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:GTA.Entity"/> to check</param>
            <returns>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> has been damaged by the specified <see cref="T:GTA.Entity"/>; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.HasBeenDamagedBy(GTA.WeaponHash)">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> has been damaged by a specific weapon].
            </summary>
            <param name="weapon">The weapon to check.</param>
            <returns>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> has been damaged by the specified weapon; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.HasBeenDamagedByAnyWeapon">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> has been damaged by any weapon.
            </summary>
            <returns>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> has been damaged by any weapon; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.HasBeenDamagedByAnyMeleeWeapon">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> has been damaged by any melee weapon.
            </summary>
            <returns>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> has been damaged by any melee weapon; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.ClearLastWeaponDamage">
            <summary>
            Clears the last weapon damage this <see cref="T:GTA.Entity"/> received.
            </summary>
        </member>
        <member name="P:GTA.Entity.FragmentGroupCount">
            <summary>
            Returns the number of fragment group of this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.IsFragmentObject">
            <summary>
            Determines if this <see cref="T:GTA.Entity"/> is a fragment object.
            </summary>
            <returns>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is a fragment object; otherwise, <see langword="false" />.
            This will return <see langword="true" /> if this <see cref="T:GTA.Entity"/> is a <see cref="T:GTA.Ped"/> or a <see cref="T:GTA.Vehicle"/>.
            </returns>
        </member>
        <member name="M:GTA.Entity.DetachFragmentPart(System.Int32)">
            <summary>
            Detachs a fragment part of this <see cref="T:GTA.Entity"/>. Can create a new <see cref="T:GTA.Entity"/>.
            </summary>
            <returns>
              <para><see langword="true" /> if a new <see cref="T:GTA.Entity"/> is created; otherwise, <see langword="false" />.</para>
              <para>Returning <see langword="false" /> does not necessarily mean detaching the part did not change the <see cref="T:GTA.Entity"/> in any ways.
              For example, detaching <c>seat_f</c> for <see cref="T:GTA.Vehicle"/> will return <see langword="false" /> but the <see cref="T:GTA.Ped"/> on the front seat will not be able to sit properly.</para>
            </returns>
        </member>
        <member name="P:GTA.Entity.IsFireProof">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is fire proof.
            This <see cref="T:GTA.Entity"/> does not catch fire naturally and <see cref="T:GTA.Ped"/>s do not getting ragdolled for being burned when this property is set to <see langword="true" />.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is fire proof; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsMeleeProof">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is melee proof.
            <see cref="T:GTA.Ped"/>s are not susceptible to the reactions of melee attacks when this property is set to <see langword="true" />.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is melee proof; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsBulletProof">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is bullet proof.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is bullet proof; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsExplosionProof">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is explosion proof.
            Explosions cannot add force to this <see cref="T:GTA.Entity"/> and <see cref="T:GTA.Ped"/>s do not getting ragdolled with explosions when this property is set to <see langword="true" />.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is explosion proof; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsCollisionProof">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is collision proof.
            Setting this property to <see langword="true" /> only does not prevent this <see cref="T:GTA.Entity"/> from getting ragdolled when another <see cref="T:GTA.Entity"/> collide with this <see cref="T:GTA.Entity"/>.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is collision proof; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsWaterCannonProof">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is water cannon proof.
            <see cref="T:GTA.Ped"/>s does not get ragdolled by the water jet from fire hydrants when this property is set to <see langword="true" />.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is water cannon proof; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsSteamProof">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is steam proof.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is steam proof; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsSmokeProof">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is smoke proof.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is smoke proof; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsInvincible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is invincible.
            Setting this property to <see langword="true" /> does not prevent <see cref="T:GTA.Ped"/>s from doing the reactions for getting hit with melee attacks.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is invincible; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsOnlyDamagedByPlayer">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> can only be damaged by <see cref="T:GTA.Player"/>s.
            <see cref="T:GTA.Ped"/>s are not susceptible to the reactions of melee attacks when this property is set to <see langword="true" />, unlike <see cref="P:GTA.Entity.IsInvincible"/>.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> can only be damaged by <see cref="T:GTA.Player"/>s; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsVisible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is visible.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is visible; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsOccluded">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Entity"/> is occluded.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is occluded; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsRendered">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Entity"/> is rendered.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is rendered; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsOnFire">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Entity"/> is on fire.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is on fire; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsOnScreen">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Entity"/> is on screen.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is on screen; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsUpright">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Entity"/> is upright.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is upright; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsUpsideDown">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Entity"/> is upside down.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is upside down; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsInAir">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Entity"/> is in the air.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> is in the air; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsInWater">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Entity"/> is in water.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is in water; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.HasGravity">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> has gravity.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> has gravity; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.Entity.RemoveParticleEffects">
            <summary>
            Stops all particle effects attached to this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.HasCollided">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Entity"/> has collided with anything.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> has collided; otherwise, <see langword="false" />.
            </value>
            <remarks><see cref="P:GTA.Entity.IsRecordingCollisions"/> must be <see langword="true" /> for this to work.</remarks>
        </member>
        <member name="P:GTA.Entity.MaterialCollidingWith">
            <summary>
            Gets the material this <see cref="T:GTA.Entity"/> is pushing up against.
            </summary>
            <value>
            A material hash if this <see cref = "T:GTA.Entity"/> has collision; otherwise, <see cref = "F:GTA.MaterialHash.None"/>.
            </value>
            <remarks>
            <para>This returns <see cref = "F:GTA.MaterialHash.None"/> in some cases, although this enrity is internally considered touched with something.
            For example, this returns <see cref = "F:GTA.MaterialHash.None"/> when this <see cref = "T:GTA.Entity"/> is a <see cref = "T:GTA.Ped"/> and this <see cref = "T:GTA.Entity"/> doesn't push none of the touching entities, including buildings.
            However, this returns <see cref = "F:GTA.MaterialHash.None"/> when this <see cref = "T:GTA.Entity"/> touches any ragdolled peds.</para>
            <para>Note that when this <see cref = "T:GTA.Entity"/> is a this <see cref = "T:GTA.Vehicle"/> and only its wheels touches something, the game will consider the entity touching nothing and this returns <see cref = "F:GTA.MaterialHash.None"/>.</para>
            </remarks>
        </member>
        <member name="P:GTA.Entity.IsCollisionEnabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> has collision.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> has collision; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsRecordingCollisions">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is recording collisions.
            </summary>
        </member>
        <member name="M:GTA.Entity.SetNoCollision(GTA.Entity,System.Boolean)">
            <summary>
            Sets the collision between this <see cref="T:GTA.Entity"/> and another <see cref="T:GTA.Entity"/>
            </summary>
            <param name="entity">The <see cref="T:GTA.Entity"/> to set collision with</param>
            <param name="toggle">if set to <see langword="true" /> the 2 <see cref="T:GTA.Entity"/>s wont collide with each other.</param>
        </member>
        <member name="M:GTA.Entity.IsInArea(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> is in a specified area
            </summary>
            <param name="minBounds">The minimum bounds.</param>
            <param name="maxBounds">The maximum bounds.</param>
            <returns>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> is in the specified area; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.IsInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single)">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> is in a specified angled area
            </summary>
            <param name="origin">The mid-point along a base edge of the rectangle.</param>
            <param name="edge">The mid-point of opposite base edge on the other Z.</param>
            <param name="angle">The width. Wrongly named parameter but is kept for existing script compatibilities.</param>
            <returns>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> is in the specified angled area; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.IsInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean)">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> is in a specified angled area.
            An angled area is an X-Z oriented rectangle with three parameters: origin, extent, and width.
            </summary>
            <param name="originEdge">The mid-point along a base edge of the rectangle.</param>
            <param name="extentEdge">The mid-point of opposite base edge on the other Z.</param>
            <param name="width">The length of the base edge.</param>
            <param name="includeZAxis">
            If set to <see langword="true" />, the method will also check if the point is in area in Z axis as well as X and Y axes.
            If set to <see langword="false" />, the method will only check if the point is in area in X and Y axes.
            </param>
            <returns>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> is in the specified angled area; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.IsInRange(GTA.Math.Vector3,System.Single)">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> is in range of a specified position
            </summary>
            <param name="position">The position.</param>
            <param name="range">The maximum range.</param>
            <returns>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> is in range of the <paramref name="position"/>; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.IsNearEntity(GTA.Entity,GTA.Math.Vector3)">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> is near a specified <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:GTA.Entity"/> to check.</param>
            <param name="bounds">The max displacement from the <paramref name="entity"/>.</param>
            <returns>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> is near the <paramref name="entity"/>; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.IsTouching(GTA.Model)">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> is touching an <see cref="T:GTA.Entity"/> with the <see cref="P:GTA.Entity.Model"/> <paramref name="model"/>.
            </summary>
            <param name="model">The <see cref="P:GTA.Entity.Model"/> to check</param>
            <returns>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> is touching a <paramref name="model"/>; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.IsTouching(GTA.Entity)">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> is touching the <see cref="T:GTA.Entity"/> <paramref name="entity"/>.
            </summary>
            <param name="entity">The <see cref="T:GTA.Entity"/> to check.</param>
            <returns>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> is touching <paramref name="entity"/>; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.AddBlip">
            <summary>
            Creates a <see cref="T:GTA.Blip"/> on this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.AttachedBlip">
            <summary>
            Gets the <see cref="T:GTA.Blip"/> attached to this <see cref="T:GTA.Entity"/>.
            </summary>
            <remarks>returns <see langword="null" /> if no <see cref="T:GTA.Blip"/>s are attached to this <see cref="T:GTA.Entity"/></remarks>
        </member>
        <member name="P:GTA.Entity.AttachedBlips">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Blip"/>s attached to this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="M:GTA.Entity.Detach">
            <summary>
            Detaches this <see cref="T:GTA.Entity"/> from any <see cref="T:GTA.Entity"/> it may be attached to.
            </summary>
        </member>
        <member name="M:GTA.Entity.AttachTo(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Attaches this <see cref="T:GTA.Entity"/> to a different <see cref="T:GTA.Entity"/>
            </summary>
            <param name="entity">The <see cref="T:GTA.Entity"/> to attach this <see cref="T:GTA.Entity"/> to.</param>
            <param name="position">The position relative to the <paramref name="entity"/> to attach this <see cref="T:GTA.Entity"/> to.</param>
            <param name="rotation">The rotation to apply to this <see cref="T:GTA.Entity"/> relative to the <paramref name="entity"/></param>
        </member>
        <member name="M:GTA.Entity.AttachTo(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Attaches this <see cref="T:GTA.Entity"/> to a different <see cref="T:GTA.Entity"/>
            </summary>
            <param name="entityBone">The <see cref="T:GTA.EntityBone"/> to attach this <see cref="T:GTA.Entity"/> to.</param>
            <param name="position">The position relative to the <paramref name="entityBone"/> to attach this <see cref="T:GTA.Entity"/> to.</param>
            <param name="rotation">The rotation to apply to this <see cref="T:GTA.Entity"/> relative to the <paramref name="entityBone"/></param>
        </member>
        <member name="M:GTA.Entity.IsAttached">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> is attached to any other <see cref="T:GTA.Entity"/>.
            </summary>
            <returns>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> is attached to another <see cref="T:GTA.Entity"/>; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.IsAttachedTo(GTA.Entity)">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> is attached to the specified <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:GTA.Entity"/> to check if this <see cref="T:GTA.Entity"/> is attached to.</param>
            <returns>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> is attached to <paramref name="entity"/>; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="P:GTA.Entity.AttachedEntity">
            <summary>
            Gets the <see cref="T:GTA.Entity"/> this <see cref="T:GTA.Entity"/> is attached to.
            <remarks>returns <see langword="null" /> if this <see cref="T:GTA.Entity"/> isnt attached to any entity</remarks>
            </summary>
        </member>
        <member name="M:GTA.Entity.ApplyForce(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType)">
            <summary>
            Applies a force to this <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="direction">The direction to apply the force relative to world coordinates.</param>
            <param name="rotation">The offset from the root bone of this <see cref="T:GTA.Entity"/> where the force applies. "rotation" is incorrectly named parameter but is left for scripts that use the method with named parameters.</param>
            <param name="forceType">Type of the force to apply.</param>
        </member>
        <member name="M:GTA.Entity.ApplyForceRelative(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType)">
            <summary>
            Applies a force to this <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="direction">The direction to apply the force relative to this <see cref="T:GTA.Entity"/>s rotation</param>
            <param name="rotation">The offset from the root bone of this <see cref="T:GTA.Entity"/> where the force applies. "rotation" is incorrectly named parameter but is left for scripts that use the method with named parameters.</param>
            <param name="forceType">Type of the force to apply.</param>
        </member>
        <member name="M:GTA.Entity.MarkAsNoLongerNeeded">
            <summary>
            Marks this <see cref="T:GTA.Entity"/> as no longer needed to keep and lets the game delete it when its too far away.
            You can still manipulate this <see cref="T:GTA.Entity"/> as long as the <see cref="T:GTA.Entity"/> exists.
            </summary>
        </member>
        <member name="M:GTA.Entity.Delete">
            <summary>
            <para>Destroys this <see cref="T:GTA.Entity"/> and sets <see cref="P:GTA.PoolObject.Handle"/> to 0.</para>
            <para>
            If you need to remove this <see cref="T:GTA.Entity"/> from collections that use <see cref="M:System.Object.Equals(System.Object)"/> for equality comparison (e.g. <see cref="T:System.Collections.Generic.Dictionary`2"/>),
            remove this <see cref="T:GTA.Entity"/> element from these collections before calling this method.
            </para>
            </summary>
        </member>
        <member name="M:GTA.Entity.Exists">
            <summary>
            Determines if this <see cref="T:GTA.Entity"/> exists.
            You should ensure <see cref="T:GTA.Entity"/>s still exist before manipulating them or getting some values for them on every tick, since some native functions may crash the game if invalid entity handles are passed.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.Entity"/> exists; otherwise, <see langword="false" /></returns>.
            <seealso cref="P:GTA.Entity.IsDead"/>
        </member>
        <member name="M:GTA.Entity.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same entity as this <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same entity as this <see cref="T:GTA.Entity"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Entity.op_Equality(GTA.Entity,GTA.Entity)">
            <summary>
            Determines if two <see cref="T:GTA.Entity"/>s refer to the same entity.
            </summary>
            <param name="left">The left <see cref="T:GTA.Entity"/>.</param>
            <param name="right">The right <see cref="T:GTA.Entity"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same entity as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Entity.op_Inequality(GTA.Entity,GTA.Entity)">
            <summary>
            Determines if two <see cref="T:GTA.Entity"/>s don't refer to the same entity.
            </summary>
            <param name="left">The left <see cref="T:GTA.Entity"/>.</param>
            <param name="right">The right <see cref="T:GTA.Entity"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same entity as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Entity.op_Implicit(GTA.Entity)~GTA.Native.InputArgument">
            <summary>
            Converts an <see cref="T:GTA.Entity"/> to a native input argument.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.Index">
            <summary>
            Gets the bone index of this <see cref="T:GTA.EntityBone"/>.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.Owner">
            <summary>
            Gets the owner <see cref="T:GTA.Entity"/> this bone belongs to.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.IsValid">
            <summary>
            Determines if this <see cref="T:GTA.EntityBone"/> is valid.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.PoseMatrix">
            <summary>
            Gets or sets the dynamic <see cref="T:GTA.Math.Matrix"/> of this <see cref="T:GTA.EntityBone"/> relative to the <see cref="T:GTA.Entity"/> its part of.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.RelativeMatrix">
            <summary>
            Gets the <see cref="T:GTA.Math.Matrix"/> of this <see cref="T:GTA.EntityBone"/> relative to the <see cref="T:GTA.Entity"/> its part of.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.Pose">
            <summary>
            Gets or sets the current pose offset (dynamic position) of this <see cref="T:GTA.EntityBone"/> relative to the <see cref="T:GTA.Entity"/> its part of.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.Position">
            <summary>
            Gets the position of this <see cref="T:GTA.EntityBone"/> in world coordinates.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.RelativePosition">
            <summary>
            Gets the position of this <see cref="T:GTA.EntityBone"/> relative to the <see cref="T:GTA.Entity"/> its part of.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.UpVector">
            <summary>
            Gets the vector that points above this <see cref="T:GTA.EntityBone"/> relative to the world.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.RightVector">
            <summary>
            Gets the vector that points to the right of this <see cref="T:GTA.EntityBone"/> relative to the world.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.ForwardVector">
            <summary>
            Gets the vector that points in front of this <see cref="T:GTA.EntityBone"/> relative to the world.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.RelativeUpVector">
            <summary>
            Gets the vector that points above this <see cref="T:GTA.EntityBone"/> relative to the <see cref="T:GTA.Entity"/> its part of.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.RelativeRightVector">
            <summary>
            Gets the vector that points to the right of this <see cref="T:GTA.EntityBone"/> relative to the <see cref="T:GTA.Entity"/> its part of.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.RelativeForwardVector">
            <summary>
            Gets the vector that points in front of this <see cref="T:GTA.EntityBone"/> relative to the <see cref="T:GTA.Entity"/> its part of.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.FragmentGroupIndex">
            <summary>
            Gets the fragment group index of this <see cref="T:GTA.EntityBone"/>. -1 will be returned if the <see cref="T:GTA.Entity"/> does not exist or <see cref="P:GTA.EntityBone.Index"/> is invalid.
            </summary>
        </member>
        <member name="M:GTA.EntityBone.GetOffsetPosition(GTA.Math.Vector3)">
            <summary>
            Gets the position in world coordinates of an offset relative this <see cref="T:GTA.EntityBone"/>
            </summary>
            <param name="offset">The offset from this <see cref="T:GTA.EntityBone"/>.</param>
        </member>
        <member name="M:GTA.EntityBone.GetRelativeOffsetPosition(GTA.Math.Vector3)">
            <summary>
            Gets the position relative to the <see cref="T:GTA.Entity"/> of an offset relative this <see cref="T:GTA.EntityBone"/>
            </summary>
            <param name="offset">The offset from this <see cref="T:GTA.EntityBone"/>.</param>
        </member>
        <member name="M:GTA.EntityBone.GetPositionOffset(GTA.Math.Vector3)">
            <summary>
            Gets the relative offset of this <see cref="T:GTA.EntityBone"/> from a world coordinates position
            </summary>
            <param name="worldCoords">The world coordinates.</param>
        </member>
        <member name="M:GTA.EntityBone.GetRelativePositionOffset(GTA.Math.Vector3)">
            <summary>
            Gets the relative offset of this <see cref="T:GTA.EntityBone"/> from an offset from the <see cref="T:GTA.Entity"/>
            </summary>
            <param name="entityOffset">The <see cref="T:GTA.Entity"/> offset.</param>
        </member>
        <member name="M:GTA.EntityBone.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same bone as this <see cref="T:GTA.EntityBone"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same bone as this <see cref="T:GTA.EntityBone"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.EntityBone.op_Equality(GTA.EntityBone,GTA.EntityBone)">
            <summary>
            Determines if two <see cref="T:GTA.EntityBone"/>s refer to the same bone.
            </summary>
            <param name="left">The left <see cref="T:GTA.EntityBone"/>.</param>
            <param name="right">The right <see cref="T:GTA.EntityBone"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same bone as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.EntityBone.op_Inequality(GTA.EntityBone,GTA.EntityBone)">
            <summary>
            Determines if two <see cref="T:GTA.EntityBone"/>s don't refer to the same bone.
            </summary>
            <param name="left">The left <see cref="T:GTA.EntityBone"/>.</param>
            <param name="right">The right <see cref="T:GTA.EntityBone"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same bone as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.EntityBone.op_Equality(GTA.EntityBone,GTA.Bone)">
            <summary>
            Determines if an <see cref="T:GTA.EntityBone"/> refers to a specific bone.
            </summary>
            <param name="entityBone">The <see cref="T:GTA.EntityBone"/> to check.</param>
            <param name="boneId">The <see cref="T:GTA.Bone"/> ID to check against.</param>
            <returns><see langword="true" /> if <paramref name="entityBone"/> refers to the <paramref name="boneId"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.EntityBone.op_Inequality(GTA.EntityBone,GTA.Bone)">
            <summary>
            Determines if an <see cref="T:GTA.EntityBone"/> doesn't refer to a specific bone.
            </summary>
            <param name="entityBone">The <see cref="T:GTA.EntityBone"/> to check.</param>
            <param name="boneId">The <see cref="T:GTA.Bone"/> ID to check against.</param>
            <returns><see langword="true" /> if <paramref name="entityBone"/> does not refer to the <paramref name="boneId"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.EntityBone.op_Implicit(GTA.EntityBone)~System.Int32">
            <summary>
            Converts an <see cref="T:GTA.EntityBone"/> to a bone index.
            </summary>
        </member>
        <member name="M:GTA.EntityBone.op_Implicit(GTA.EntityBone)~GTA.Native.InputArgument">
            <summary>
            Converts an <see cref="T:GTA.EntityBone"/> to a native input argument.
            </summary>
        </member>
        <member name="P:GTA.EntityBoneCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:GTA.EntityBone"/> at the specified bone index.
            </summary>
            <param name="boneIndex">The bone index.</param>
        </member>
        <member name="P:GTA.EntityBoneCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:GTA.EntityBone"/> with the specified bone name.
            </summary>
            <param name="boneName">Name of the bone.</param>
        </member>
        <member name="P:GTA.EntityBoneCollection.Count">
            <summary>
            Gets the number of bones that this <see cref="T:GTA.Entity"/> has.
            </summary>
        </member>
        <member name="M:GTA.EntityBoneCollection.Contains(System.String)">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> has a bone with the specified bone name
            </summary>
            <param name="boneName">Name of the bone.</param>
            <returns>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> has a bone with the specified bone name; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="P:GTA.EntityBoneCollection.Core">
            <summary>
            Gets the core bone of this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.EntityDamageRecord.Victim">
            <summary>
            Gets the victim <see cref="T:GTA.Entity" />.
            </summary>
        </member>
        <member name="P:GTA.EntityDamageRecord.Attacker">
            <summary>
            Gets the attacker <see cref="T:GTA.Entity" />. Can be <c>null</c>.
            </summary>
        </member>
        <member name="P:GTA.EntityDamageRecord.GameTime">
            <summary>
            Gets the game time when the <see cref="P:GTA.EntityDamageRecord.Victim" /> took damage.
            </summary>
        </member>
        <member name="P:GTA.EntityDamageRecord.WeaponHash">
            <summary>
            Gets the weapon hash what the <see cref="P:GTA.EntityDamageRecord.Victim" /> took damage with.
            </summary>
        </member>
        <member name="M:GTA.EntityDamageRecord.Equals(GTA.EntityDamageRecord)">
            <summary>
            Determines if <paramref name="entityDamageRecord"/> has the same properties as this <see cref="T:GTA.EntityDamageRecord"/>.
            </summary>
            <param name="entityDamageRecord">The <see cref="T:System.Object"/> to check.</param>
            <returns><c>true</c> if the <paramref name="entityDamageRecord"/> has the same properties as this <see cref="T:GTA.EntityDamageRecord"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GTA.EntityDamageRecord.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> is an <see cref="T:GTA.EntityDamageRecord"/> and has the same properties as this <see cref="T:GTA.EntityDamageRecord"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><c>true</c> if the <paramref name="obj"/> is an <see cref="T:GTA.EntityDamageRecord"/> and has the same properties as this <see cref="T:GTA.EntityDamageRecord"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GTA.EntityDamageRecord.op_Equality(GTA.EntityDamageRecord,GTA.EntityDamageRecord)">
            <summary>
            Determines if two <see cref="T:GTA.EntityDamageRecord"/>s have the same properties.
            </summary>
            <param name="left">The left <see cref="T:GTA.Entity"/>.</param>
            <param name="right">The right <see cref="T:GTA.Entity"/>.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same properties as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GTA.EntityDamageRecord.op_Inequality(GTA.EntityDamageRecord,GTA.EntityDamageRecord)">
            <summary>
            Determines if two <see cref="T:GTA.Entity"/>s do not have the same properties.
            </summary>
            <param name="left">The left <see cref="T:GTA.Entity"/>.</param>
            <param name="right">The right <see cref="T:GTA.Entity"/>.</param>
            <returns><c>true</c> if <paramref name="left"/> does not have the same properties as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:GTA.Model.Hash">
            <summary>
            Gets the hash for this <see cref="T:GTA.Model"/>.
            </summary>
        </member>
        <member name="P:GTA.Model.NativeValue">
            <summary>
            Gets the native representation of this <see cref="T:GTA.Model"/>.
            </summary>
        </member>
        <member name="P:GTA.Model.IsValid">
            <summary>
            Gets if this <see cref="T:GTA.Model"/> is valid.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Model"/> is valid; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsInCdImage">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is in the CD image.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is in the CD image; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsLoaded">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is loaded so it can be spawned.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Model"/> is loaded; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsCollisionLoaded">
            <summary>
            Gets a value indicating whether the collision for this <see cref="T:GTA.Model"/> is loaded.
            </summary>
            <value>
            <see langword="true" /> if the collision is loaded; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsAmphibiousCar">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is an amphibious car.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is an amphibious car; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsAmphibiousQuadBike">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is an amphibious quad bike.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is an amphibious quad bike; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsAmphibiousVehicle">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is an amphibious vehicle.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is an amphibious vehicle; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsAnimalPed">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a animal pedestrian.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a animal pedestrian; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsBicycle">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a bicycle.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a bicycle; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsBigVehicle">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a big vehicle whose vehicle flag has "FLAG_BIG".
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a big vehicle; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsBike">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a bike (either a motorcycle or a bicycle).
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a bike; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsBlimp">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a blimp.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a blimp; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsBoat">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a boat.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a boat; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsBus">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is an emergency vehicle.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is an emergency vehicle; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsCar">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a car.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a car; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsCargobob">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a cargobob.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a cargobob; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsDonk">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a donk car.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a donk car; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsElectricVehicle">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is an electric vehicle.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is an electric vehicle; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsEmergencyVehicle">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is an emergency vehicle.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is an emergency vehicle; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsFemalePed">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a female pedestrian.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a female pedestrian; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsGangPed">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a gangster pedestrian.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a gangster pedestrian; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsHelicopter">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a helicopter.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a helicopter; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsHumanPed">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a human pedestrian.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a human pedestrian; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsJetSki">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a jet ski.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a jet ski; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsLawEnforcementVehicle">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a law enforcement vehicle.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a law enforcement vehicle; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsLowrider">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a regular lowrider.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a regular lowrider; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsMlo">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a movable interior loader (also known as MLO or MILO).
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a car; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsMalePed">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a male pedestrian.
            Without modding <c>pedpersonality.ymt</c>, returns <see langword="true" /> if the <see cref="P:GTA.Model.Hash"/> is one of the animal hashes.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a male pedestrian; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsMotorcycle">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a motorcycle.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a motorcycle; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsOffRoadVehicle">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is an off-road vehicle.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is an off-road vehicle; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsPed">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a pedestrian.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a pedestrian; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsPlane">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a plane.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a plane; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsProp">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a prop.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a prop; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsQuadBike">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a quad bike.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a quad bike; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsSubmarine">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a submarine.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is an submarine; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsSubmarineCar">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a submarine car.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is an submarine car; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsTank">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a tank.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a tank; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsTrain">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a train.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a train; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsTrailer">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a trailer.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a trailer; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsVan">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a van.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a van; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsVehicle">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a vehicle.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a vehicle; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.Dimensions">
            <summary>
            Gets the dimensions of this <see cref="T:GTA.Model"/>.
            </summary>
            <returns>
            rearBottomLeft is the minimum dimensions, which contains the rear bottom left relative offset from the origin of the model,
             frontTopRight is the maximum dimensions, which contains the front top right relative offset from the origin of the model.
            </returns>
        </member>
        <member name="M:GTA.Model.Request">
            <summary>
            Attempts to load this <see cref="T:GTA.Model"/> into memory.
            </summary>
        </member>
        <member name="M:GTA.Model.Request(System.Int32)">
            <summary>
            Attempts to load this <see cref="T:GTA.Model"/> into memory for a given period of time.
            </summary>
            <param name="timeout">The time (in milliseconds) before giving up trying to load this <see cref="T:GTA.Model"/>.</param>
            <returns><see langword="true" /> if this <see cref="T:GTA.Model"/> is loaded; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Model.RequestCollision">
            <summary>
            Attempts to load this <see cref="T:GTA.Model"/>'s collision into memory.
            </summary>
        </member>
        <member name="M:GTA.Model.RequestCollision(System.Int32)">
            <summary>
            Attempts to load this <see cref="T:GTA.Model"/>'s collision into memory for a given period of time.
            </summary>
            <param name="timeout">The time (in milliseconds) before giving up trying to load this <see cref="T:GTA.Model"/>.</param>
            <returns><see langword="true" /> if this <see cref="T:GTA.Model"/>'s collision is loaded; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Model.MarkAsNoLongerNeeded">
            <summary>
            Tells the game we have finished using this <see cref="T:GTA.Model"/> and it can be freed from memory.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.Loop">
            <summary>
            Repeat the animation.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.StayInEndFrame">
            <summary>
            Hold on the last frame of the animation.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.RepositionWhenFinished">
            <summary>
            When the animation finishes pop the peds physical reprsentation position to match the visual representations position.
            Note that the animator of the animation must not unwind the animation and must have an independent mover node.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.NotInterruptable">
            <summary>
            The task cannot be interupted by extenal events.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.UpperBodyOnly">
            <summary>
            Only plays the upper body part of the animation.
            Dampens any motion caused by the lower body animation.Note that the animation should include the root node.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.Secondary">
            <summary>
            The task will run in the secondary task slot. This means it can be used aswell as a movement task (for instance).
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.ReorientWhenFinished">
            <summary>
            When the animation finishes pop the peds physical reprsentation direction to match the visual representations direction.
            Note that the animator of the animation must not unwind the animation and must have an independent mover node.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.AbortOnPedMovement">
            <summary>
            Ends the animation early if the ped attemps to move e.g. if the player tries to move using the controller.
            Can also be used to blend out automatically when an AI ped starts moving by combining it with the <see cref="F:GTA.AnimationFlags.Secondary"/> flag.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.Additive">
            <summary>
            Play back the animation additively. Note that this will only produce sensible results on specifically authored additive animations.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.TurnOffCollision">
            <summary>
            Do not react to collision detection whilst this anim is playing.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.OverridePhysics">
            <summary>
            Do not apply any physics forces whilst the anim is playing.
            Automatically turns off collision, extracts any initial offset provided in the clip and uses per frame mover extraction.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.IgnoreGravity">
            <summary>
            Do not apply gravity while the anim is playing.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.ExtractInitialOffset">
            <summary>
            Extract an initial offset from the playback position authored by the animator.
            Use this flag when playing back anims on different peds which have been authored to sync with each other.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.ExitAfterInterrupted">
            <summary>
            Exit the animation task if it is interrupted by another task (ie Natural Motion).
            Without this flag bing set looped animations will restart ofter the NM task
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.TagSyncIn">
            <summary>
            Sync the anim whilst blending in (use for seamless transitions from walk / run into a full body anim).
            </summary>
            <remarks>Tag synchronizer flags are for syncing the anim against ped movement (walking / running / etc).</remarks>
        </member>
        <member name="F:GTA.AnimationFlags.TagSyncOut">
            <summary>
            Sync the anim whilst blending out (use for seamless transitions from a full body anim into walking / running behaviour).
            </summary>
            <remarks>Tag synchronizer flags are for syncing the anim against ped movement (walking / running / etc).</remarks>
        </member>
        <member name="F:GTA.AnimationFlags.TagSyncContinuous">
            <summary>
            Sync all the time (Only usefull to synchronize a partial anim e.g. an upper body).
            </summary>
            <remarks>Tag synchronizer flags are for syncing the anim against ped movement (walking / running / etc).</remarks>
        </member>
        <member name="F:GTA.AnimationFlags.ForceStart">
            <summary>
            Force the anim task to start even if the ped is falling / ragdolling / etc.
            Can fix issues with peds not playing their anims immediately after a warp / etc.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.UseKinematicPhysics">
            <summary>
            Use the kinematic physics mode on the entity for the duration of the anim (it should push other entities out of the way, and not be pushed around by players / etc).
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.UseMoverExtraction">
            <summary>
            Updates the peds capsule position every frame based on the animation.
            Use in conjunction with <see cref="F:GTA.AnimationFlags.UseKinematicPhysics"/> to create characters that cannot be pushed off course by other entities / geometry / etc whilst playing the anim.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.HideWeapon">
            <summary>
            Indicates that the ped's weapon should be hidden while this animation is playing.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.EndsInDeadPose">
            <summary>
            When the anim ends, kill the ped and use the currently playing anim as the dead pose.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.RagdollOnCollision">
            <summary>
            If the peds ragdoll bounds make contact with something physical (that isn't flat ground) activate the ragdoll and fall over.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.DontExitOnDeath">
            <summary>
            Currently used only on secondary anim tasks. Secondary anim tasks will end automatically when the ped dies. Setting this flag stops that from happening.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.AbortOnWeaponDamage">
            <summary>
            Allow aborting from damage events (including non-ragdoll damage events) even when blocking other ai events using <see cref="F:GTA.AnimationFlags.NotInterruptable"/>.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.DisableForcedPhysicsUpdate">
            <summary>
            Prevent adjusting the capsule on the enter state (useful if script is doing a sequence of scripted anims and they are known to more or less stand still).
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.ProcessAttachmentsOnStart">
            <summary>
            Force the attachments to be processed at the start of the clip.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.ExpandPedCapsuleFromSkeleton">
            <summary>
            Expands the capsule to the extents of the skeleton.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.UseAlternativeFirstPersonAnim">
            <summary>
            Plays an alternative first person version of the clip on the player when in first person mode.
            The first person clip must be in the same dictionary, and be named the same as the anim you're playing, but with <c>_FP</c> appended on the end.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.BlendOutWRTLastFrame">
            <summary>
            Start blending out the anim early, so that the blend out duration completes at the end of the animation.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.UseFullBlending">
            <summary>
            Use full blending for this anim and override the heading/position adjustment in CTaskScriptedAnimation::CheckIfClonePlayerNeedsHeadingPositionAdjust(),
            so that the game doesn't correct errors (special case such as scrip-side implemented AI tasks, i.e. diving)
            </summary>
        </member>
        <member name="T:GTA.EnterVehicleFlags">
            <summary>
            Set of flags to define the behaviour of the enter and exit vehicle tasks.
            Shares the same flags with <see cref="T:GTA.LeaveVehicleFlags"/>.
            </summary>
        </member>
        <member name="F:GTA.EnterVehicleFlags.ResumeIfInterupted">
            <summary>
            Resume the enter vehicle task even if the task is interupted (bumped, shot).
            </summary>
        </member>
        <member name="F:GTA.EnterVehicleFlags.WarpToDoor">
            <summary>
            Warp the <see cref="T:GTA.Ped"/> to entry point ready to open the door/enter seat.
            </summary>
        </member>
        <member name="F:GTA.EnterVehicleFlags.JackAnyone">
            <summary>
            Allow the <see cref="T:GTA.Ped"/> to jack regardless of relationship status if they have to jack someone to complete the enter vehicle task.
            Without this flag, the <see cref="T:GTA.Ped"/> won't jack those they respect or like where the relationship is set to <see cref="F:GTA.Relationship.Companion"/> or <see cref="F:GTA.Relationship.Respect"/> towards them,
            but may jack those they don't respect or like.
            Without this flag, the <see cref="T:GTA.Ped"/> will abort the enter vehicle task if they have to jack one of those who respect or like to complete the enter vehicle task.
            </summary>
        </member>
        <member name="F:GTA.EnterVehicleFlags.WarpIn">
            <summary>
            Warp the <see cref="T:GTA.Ped"/> onto the <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="F:GTA.EnterVehicleFlags.DontCloseDoor">
            <summary>
            Dont close the vehicle door.
            </summary>
        </member>
        <member name="F:GTA.EnterVehicleFlags.WarpIfDoorIsBlocked">
            <summary>
            Allow ped to warp to the seat if entry is blocked.
            If the shuffle link to that seat is blocked by someone but the entry point for the shuffle link is not directly blocked, the <see cref="T:GTA.Ped"/> won't warp.
            Consider using <see cref="F:GTA.EnterVehicleFlags.WarpIfShuffleLinkIsBlocked"/> if you want the <see cref="T:GTA.Ped"/> to warp when the direct door and the shuffle link to that seat is blocked by someone.
            </summary>
        </member>
        <member name="F:GTA.EnterVehicleFlags.UseLeftEntry">
            <summary>
            Use entry/exit point on the left hand side.
            </summary>
        </member>
        <member name="F:GTA.EnterVehicleFlags.UseRightEntry">
            <summary>
            Use entry/exit point on the right hand side.
            </summary>
        </member>
        <member name="F:GTA.EnterVehicleFlags.JustPullPedOut">
            <summary>
            When jacking just open the door and/or pull the ped out, but don't get in.
            </summary>
        </member>
        <member name="F:GTA.EnterVehicleFlags.BlockSeatShuffling">
            <summary>
            Disable shuffling, forcing ped to use direct door only.
            </summary>
        </member>
        <member name="F:GTA.EnterVehicleFlags.WarpIfShuffleLinkIsBlocked">
            <summary>
            Allow ped to warp if the direct door is blocked and the shuffle link to that seat is blocked by someone.
            Unlike <see cref="F:GTA.EnterVehicleFlags.WarpIfDoorIsBlocked"/>, this flag allows the the <see cref="T:GTA.Ped"/> to warp when the direct door and the shuffle link to that seat is blocked by someone (regardless of whether the door linked to the shuffle link is directly blocked).
            </summary>
        </member>
        <member name="F:GTA.EnterVehicleFlags.DontJackAnyone">
            <summary>
            Never jack anyone when entering/exiting.
            This flag takes precedence over <see cref="F:GTA.EnterVehicleFlags.AllowJacking"/>.
            </summary>
        </member>
        <member name="F:GTA.Formation.Loose">
            <summary>
            The default value.
            </summary>
        </member>
        <member name="T:GTA.LeaveVehicleFlags">
            <summary>
            Set of flags to define the behaviour of the enter and exit vehicle tasks.
            Shares the same flags with <see cref="T:GTA.EnterVehicleFlags"/>.
            </summary>
        </member>
        <member name="F:GTA.LeaveVehicleFlags.WarpOut">
            <summary>
            Warp the ped out of the vehicle.
            </summary>
        </member>
        <member name="F:GTA.LeaveVehicleFlags.DontWaitForVehicleToStop">
            <summary>
            Don't wait for the vehicle to stop before exiting.
            </summary>
        </member>
        <member name="F:GTA.LeaveVehicleFlags.LeaveDoorOpen">
            <summary>
            Dont close the vehicle door.
            </summary>
        </member>
        <member name="F:GTA.LeaveVehicleFlags.WarpIfDoorIsBlocked">
            <summary>
            Allow ped to warp to the seat if entry is blocked. The player <see cref="T:GTA.Ped"/> will warp out of the vehicle without any flags if the entry is blocked.
            If the shuffle link to that seat is blocked by someone but the entry point for the shuffle link is not directly blocked, the <see cref="T:GTA.Ped"/> won't warp.
            Consider using <see cref="F:GTA.LeaveVehicleFlags.WarpIfShuffleLinkIsBlocked"/> if you want the <see cref="T:GTA.Ped"/> to warp when the direct door and the shuffle link to that seat is blocked by someone.
            </summary>
        </member>
        <member name="F:GTA.LeaveVehicleFlags.BailOut">
            <summary>
            Jump out of the vehicle regardness of its speed.
            </summary>
        </member>
        <member name="F:GTA.LeaveVehicleFlags.DontDefaultWarpIfDoorBlocked">
            <summary>
            <see cref="M:GTA.TaskInvoker.LeaveVehicle(GTA.LeaveVehicleFlags)"/> (or <c>TASK_LEAVE_ANY_VEHICLE</c>) auto defaults the <see cref="F:GTA.LeaveVehicleFlags.WarpIfDoorIsBlocked"/>, set this flag to not set that.
            </summary>
        </member>
        <member name="F:GTA.LeaveVehicleFlags.FromLeftSide">
            <summary>
            Use entry/exit point on the left hand side.
            </summary>
        </member>
        <member name="F:GTA.LeaveVehicleFlags.FromRightSide">
            <summary>
            Use entry/exit point on the right hand side.
            </summary>
        </member>
        <member name="F:GTA.LeaveVehicleFlags.BlockSeatShuffling">
            <summary>
            Disable shuffling, forcing ped to use direct door only.
            </summary>
        </member>
        <member name="F:GTA.LeaveVehicleFlags.WarpIfShuffleLinkIsBlocked">
            <summary>
            Allow ped to warp if the direct door is blocked and the shuffle link to that seat is blocked by someone. The player <see cref="T:GTA.Ped"/> will warp out of the vehicle without any flags if the entry is blocked.
            Unlike <see cref="F:GTA.LeaveVehicleFlags.WarpIfDoorIsBlocked"/>, this flag allows the the <see cref="T:GTA.Ped"/> to warp when the direct door and the shuffle link to that seat is blocked by someone (regardless of whether the door linked to the shuffle link is directly blocked).
            </summary>
        </member>
        <member name="F:GTA.LeaveVehicleFlags.DontJackAnyone">
            <summary>
            Never jack anyone when entering/exiting.
            </summary>
        </member>
        <member name="F:GTA.LeaveVehicleFlags.WaitForEntryPointToBeClear">
            <summary>
            Wait for our entry point to be clear of peds before exiting.
            </summary>
        </member>
        <member name="F:GTA.ParachuteLandingType.Invalid">
            <summary>
            Ped is not in a valid parachute landing state.
            </summary>
        </member>
        <member name="F:GTA.ParachuteLandingType.Regular">
            <summary>
            Ped is landing at regular speed (they are stumbling).
            </summary>
        </member>
        <member name="F:GTA.ParachuteLandingType.Fast">
            <summary>
            Ped is landing at fast speed (they are rolling).
            </summary>
        </member>
        <member name="F:GTA.ParachuteLandingType.Crashing">
            <summary>
            Ped is crashing (ragdolling).
            </summary>
        </member>
        <member name="M:GTA.Ped.Clone(System.Single)">
            <summary>
            Spawn an identical clone of this <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="heading">The direction the clone should be facing.</param>
        </member>
        <member name="M:GTA.Ped.Kill">
            <summary>
            Kills this <see cref="T:GTA.Ped"/> immediately.
            </summary>
        </member>
        <member name="M:GTA.Ped.Resurrect">
            <summary>
            Resurrects this <see cref="T:GTA.Ped"/> from death.
            </summary>
        </member>
        <member name="M:GTA.Ped.Exists">
            <summary>
            Determines if this <see cref="T:GTA.Ped"/> exists.
            You should ensure <see cref="T:GTA.Ped"/>s still exist before manipulating them or getting some values for them on every tick, since some native functions may crash the game if invalid entity handles are passed.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.Ped"/> exists; otherwise, <see langword="false" /></returns>
            <seealso cref="P:GTA.Entity.IsDead"/>
            <seealso cref="P:GTA.Ped.IsInjured"/>
        </member>
        <member name="P:GTA.Ped.IsHuman">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Ped"/> is human.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Ped"/> is human; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Ped.Style">
            <summary>
            Opens a list of clothing and prop configurations that this <see cref="T:GTA.Ped"/> can wear.
            </summary>
        </member>
        <member name="P:GTA.Ped.Gender">
            <summary>
            Gets the gender of this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.Ped.Sweat">
            <summary>
            Gets or sets the how much sweat should be rendered on this <see cref="T:GTA.Ped"/>.
            </summary>
            <value>
            The sweat from 0 to 100, 0 being no sweat, 100 being saturated.
            </value>
        </member>
        <member name="P:GTA.Ped.WetnessHeight">
            <summary>
            Sets how high up on this <see cref="T:GTA.Ped"/>s body water should be visible.
            </summary>
            <value>
            The height ranges from 0.0f to 1.99f, 0.0f being no water visible, 1.99f being covered in water.
            </value>
        </member>
        <member name="P:GTA.Ped.Armor">
            <summary>
            Gets or sets how much armor this <see cref="T:GTA.Ped"/> is wearing as an <see cref="T:System.Int32"/>.
            </summary>
            <remarks>if you need to get or set the value precisely, use <see cref="P:GTA.Ped.ArmorFloat"/> instead.</remarks>
            <value>
            The armor as an <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="P:GTA.Ped.ArmorFloat">
            <summary>
            Gets or sets how much Armor this <see cref="T:GTA.Ped"/> is wearing as a <see cref="T:System.Single"/>.
            </summary>
            <value>
            The armor as a <see cref="T:System.Single"/>.
            </value>
        </member>
        <member name="P:GTA.Ped.Money">
            <summary>
            Gets or sets how much money this <see cref="T:GTA.Ped"/> is carrying.
            </summary>
        </member>
        <member name="P:GTA.Ped.MaxHealth">
            <summary>
            Gets or sets the maximum health of this <see cref="T:GTA.Ped"/> as an <see cref="T:System.Int32"/>.
            </summary>
            <value>
            The maximum health as an <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="M:GTA.Ped.SetIsPersistentNoClearTask(System.Boolean)">
            <summary>
            Sets a value indicating whether this <see cref="T:GTA.Entity"/> is persistent.
            Unlike <see cref="P:GTA.Entity.IsPersistent"/>, calling this method does not affect assigned tasks.
            </summary>
        </member>
        <member name="P:GTA.Ped.Bones">
            <summary>
            Gets a collection of the <see cref="T:GTA.PedBone"/>s in this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.Ped.AlwaysKeepTask">
            <summary>
            <para>
            Sets whether this <see cref="T:GTA.Ped"/> keeps their tasks when they are marked as no longer needed by <see cref="M:GTA.Entity.MarkAsNoLongerNeeded"/> or gets cleaned up by the mission script.
            Despite the property name, this property does not determine whether permanent events can interrupt the <see cref="T:GTA.Ped"/>'s tasks (e.g. seeing hated peds or getting shot at).
            </para>
            <para>
            If set to <see langword="false" />, this <see cref="T:GTA.Ped"/>'s task will be immediately cleared and start some ambient tasks (most likely start wandering) when they are marked as no longer needed.
            </para>
            <para>
            If set to <see langword="true" />, this <see cref="T:GTA.Ped"/> will keep their task until they have nothing to do (where their task stacks only contains <c>CTaskDoNothing</c>).
            Once this <see cref="T:GTA.Ped"/> has nothing to do, their task will clear and they'll start some ambient tasks (one-time-only).
            </para>
            </summary>
        </member>
        <member name="P:GTA.Ped.BlockPermanentEvents">
            <summary>
            Sets whether permanent events are blocked for this <see cref="T:GTA.Ped"/>.
            <para>
            If set to <see langword="true" />, this <see cref="T:GTA.Ped"/> will no longer react to permanent events and will only do as they're told.
            For example, the <see cref="T:GTA.Ped"/> will not flee when get shot at and they will not begin combat even if the decision maker specifies that seeing a hated ped should.
            However, the <see cref="T:GTA.Ped"/> will still respond to temporary events like walking around other peds or vehicles even if this property is set to <see langword="true" />.
            </para>
            </summary>
            <value>
              <see langword="true" /> if permanent events are blocked; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Ped.Task">
            <summary>
            Opens a list of <see cref="T:GTA.TaskInvoker"/> that this <see cref="T:GTA.Ped"/> can carry out.
            </summary>
        </member>
        <member name="P:GTA.Ped.TaskSequenceProgress">
            <summary>
            Gets the stage of the <see cref="T:GTA.TaskSequence"/> this <see cref="T:GTA.Ped"/> is currently executing.
            </summary>
        </member>
        <member name="M:GTA.Ped.Ragdoll(System.Int32,GTA.RagdollType)">
            <summary>
            Enables this <see cref="T:GTA.Ped"/>'s ragdoll by starting a ragdoll task and applying to this <see cref="T:GTA.Ped"/>.
            If <paramref name="ragdollType"/> is not set to <see cref="F:GTA.RagdollType.Relax"/> or <see cref="F:GTA.RagdollType.ScriptControl"/>, the ragdoll behavior for <see cref="F:GTA.RagdollType.Balance"/> will be used.
            </summary>
        </member>
        <member name="P:GTA.Ped.Euphoria">
            <summary>
            Opens a list of <see cref="T:GTA.NaturalMotion.Euphoria"/> Helpers which can be applied to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.Ped.Accuracy">
            <summary>
            Gets or sets how accurate this <see cref="T:GTA.Ped"/>s shooting ability is.
             The higher the value of this property is, the more likely it is that this <see cref="T:GTA.Ped"/> will shoot at exactly where they are aiming at.
            </summary>
            <value>
            The accuracy from 0 to 100, 0 being very inaccurate, which means this <see cref="T:GTA.Ped"/> cannot shoot at exactly where they are aiming at,
             100 being perfectly accurate.
            </value>
        </member>
        <member name="P:GTA.Ped.ShootRate">
            <summary>
            Sets the rate this <see cref="T:GTA.Ped"/> will shoot at.
            </summary>
            <value>
            The shoot rate from 0.0f to 1000.0f, 100.0f is the default value.
            </value>
        </member>
        <member name="P:GTA.Ped.FiringPattern">
            <summary>
            Gets of sets the pattern this <see cref="T:GTA.Ped"/> uses to fire weapons.
            </summary>
        </member>
        <member name="P:GTA.Ped.Weapons">
            <summary>
            Gets a collection of all this <see cref="T:GTA.Ped"/>s <see cref="T:GTA.Weapon"/>s.
            </summary>
        </member>
        <member name="P:GTA.Ped.VehicleWeapon">
            <summary>
            Gets the vehicle weapon this <see cref="T:GTA.Ped"/> is using.
            <remarks>The vehicle weapon, returns <see cref="F:GTA.VehicleWeaponHash.Invalid"/> if this <see cref="T:GTA.Ped"/> isnt using a vehicle weapon.</remarks>
            </summary>
        </member>
        <member name="P:GTA.Ped.CanSwitchWeapons">
            <summary>
            Sets if this <see cref="T:GTA.Ped"/> can switch between different weapons.
            </summary>
        </member>
        <member name="P:GTA.Ped.IsJumpingOutOfVehicle">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Ped"/> is jumping out of their vehicle.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Ped"/> is jumping out of their vehicle; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Ped.LastVehicle">
            <summary>
            Gets the last <see cref="T:GTA.Vehicle"/> this <see cref="T:GTA.Ped"/> used.
            </summary>
            <remarks>returns <see langword="null" /> if the last vehicle doesn't exist.</remarks>
        </member>
        <member name="P:GTA.Ped.CurrentVehicle">
            <summary>
            Gets the current <see cref="T:GTA.Vehicle"/> this <see cref="T:GTA.Ped"/> is using.
            </summary>
            <remarks>returns <see langword="null" /> if this <see cref="T:GTA.Ped"/> isn't in a <see cref="T:GTA.Vehicle"/>.</remarks>
        </member>
        <member name="P:GTA.Ped.VehicleTryingToEnter">
            <summary>
            Gets the <see cref="T:GTA.Vehicle"/> this <see cref="T:GTA.Ped"/> is trying to enter.
            </summary>
            <remarks>returns <see langword="null" /> if this <see cref="T:GTA.Ped"/> isn't trying to enter a <see cref="T:GTA.Vehicle"/>.</remarks>
        </member>
        <member name="P:GTA.Ped.SeatIndex">
            <summary>
            Gets the <see cref="T:GTA.VehicleSeat"/> this <see cref="T:GTA.Ped"/> is in.
            </summary>
            <value>
            The <see cref="T:GTA.VehicleSeat"/> this <see cref="T:GTA.Ped"/> is in if this <see cref="T:GTA.Ped"/> is in a <see cref="T:GTA.Vehicle"/>; otherwise, <see cref="F:GTA.VehicleSeat.None"/>.
            </value>
        </member>
        <member name="P:GTA.Ped.MaxDrivingSpeed">
            <summary>
            Sets the maximum driving speed this <see cref="T:GTA.Ped"/> can drive at.
            </summary>
        </member>
        <member name="P:GTA.Ped.StaysInVehicleWhenJacked">
            <summary>
            Sets a value indicating whether this <see cref="T:GTA.Ped"/> will stay in the vehicle when the driver gets jacked.
            </summary>
            <value>
            <see langword="true" /> if <see cref="T:GTA.Ped"/> stays in vehicle when jacked; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Ped.IsInjured">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Ped"/> is injured (<see cref="P:GTA.Entity.Health"/> of the <see cref="T:GTA.Ped"/> is lower than <see cref="P:GTA.Ped.InjuryHealthThreshold"/>) or does not exist.
            Can be called safely to check if <see cref="T:GTA.Ped"/>s exist and are not injured without calling <see cref="M:GTA.Ped.Exists"/>.
            </summary>
            <value>
              <see langword="true" /> this <see cref="T:GTA.Ped"/> is injured or does not exist; otherwise, <see langword="false" />.
            </value>
            <seealso cref="P:GTA.Entity.IsDead"/>
            <seealso cref="M:GTA.Ped.Exists"/>
        </member>
        <member name="P:GTA.Ped.WasKilledByStealth">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Ped"/> was killed by a stealth attack.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Ped"/> was killed by stealth; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Ped.WasKilledByTakedown">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Ped"/> was killed by a takedown.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Ped"/> was killed by a takedown; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Ped.Killer">
            <summary>
            Gets the <see cref="T:GTA.Entity"/> that killed this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.Ped.CauseOfDeath">
            <summary>
            Gets the <see cref="T:GTA.WeaponHash"/> that this <see cref="T:GTA.Ped"/> is killed with. The return value is not necessarily a weapon hash for a human <see cref="T:GTA.Ped"/>s (e.g. can be the hash of <c>WEAPON_COUGAR</c>).
            </summary>
        </member>
        <member name="P:GTA.Ped.TimeOfDeath">
            <summary>
            Gets the time when this <see cref="T:GTA.Ped"/> is killed. This value determines how this <see cref="T:GTA.Ped"/> is rendered when <see cref="P:GTA.Game.IsThermalVisionActive"/> is <see langword="true" /> and the <see cref="T:GTA.Ped"/> is dead.
            </summary>
        </member>
        <member name="M:GTA.Ped.ClearKillerRecord">
            <summary>
            <para>Clears the <see cref="T:GTA.Entity"/> record that killed this <see cref="T:GTA.Ped"/>. Can be useful after resurrecting this <see cref="T:GTA.Ped"/>.</para>
            <para>Internally, when a <see cref="T:GTA.Ped"/> killed and the value for the source of death in the instance of this <see cref="T:GTA.Ped"/> is not <c>0</c> (not <see langword="null" />), the game does not write the memory address of the <see cref="T:GTA.Ped"/> that killed this <see cref="T:GTA.Ped"/>.</para>
            </summary>
        </member>
        <member name="M:GTA.Ped.ClearCauseOfDeathRecord">
            <summary>
            <para>Clears the record of the cause of death that killed this <see cref="T:GTA.Ped"/> with. Can be useful after resurrecting this <see cref="T:GTA.Ped"/>.</para>
            <para>Internally, when a <see cref="T:GTA.Ped"/> killed and the value for the cause of death in the instance of this <see cref="T:GTA.Ped"/> is not <c>0</c>, the game does not write the weapon hash value for the cause of death.</para>
            </summary>
        </member>
        <member name="M:GTA.Ped.ClearTimeOfDeathRecord">
            <summary>
            <para>Clears the time record when this <see cref="T:GTA.Ped"/> is killed. Can be useful after resurrecting this <see cref="T:GTA.Ped"/>.</para>
            <para>Internally, when a <see cref="T:GTA.Ped"/> killed and the value for the time of death in the instance of this <see cref="T:GTA.Ped"/> is not <c>0</c>, the game does not write the game time value for the time of death.</para>
            </summary>
        </member>
        <member name="P:GTA.Ped.CanSufferCriticalHits">
            <summary>
            Gets or Sets whether this <see cref="T:GTA.Ped"/> can suffer critical damage (which deals 1000 times base damages to non-player characters with default weapon configs) when bullets hit this <see cref="T:GTA.Ped"/>'s head bone or its child bones.
             If this <see cref="T:GTA.Ped"/> can't suffer critical damage, they will take base damage of weapons when bullets hit their head bone or its child bones, just like when bullets hit a bone other than their head bone, its child bones, or limb bones.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Ped"/> can suffer critical damage; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Ped.DropsEquippedWeaponOnDeath">
            <summary>
            Sets whether this <see cref="T:GTA.Ped"/> will drop the equipped weapon when they get killed.
             Note that <see cref="T:GTA.Ped"/>s will drop only their equipped weapon when they get killed.
            </summary>
            <value>
            <see langword="true" /> if <see cref="T:GTA.Ped"/> drops the equipped weapon when killed; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Ped.InjuryHealthThreshold">
            <summary>
            Gets or sets the injury health threshold for this <see cref="T:GTA.Ped"/>.
            The pedestrian is considered injured when its health drops below this value.
            The pedestrian dies on attacks when its health is below this value.
            </summary>
            <value>
            The injury health threshold. Should be below <see cref="P:GTA.Entity.MaxHealth"/>.
            </value>
            <remarks>
            Note on player controlled pedestrians: One of the game scripts will consider the player wasted when their health drops below this setting value.
            </remarks>
        </member>
        <member name="P:GTA.Ped.FatalInjuryHealthThreshold">
            <summary>
            Gets or sets the fatal injury health threshold for this <see cref="T:GTA.Ped"/>.
            The pedestrian health will be set to 0.0 when it drops below this value.
            </summary>
            <value>
            The fatal injury health threshold. Should be below <see cref="P:GTA.Entity.MaxHealth"/>.
            </value>
            <remarks>
            Note on player controlled pedestrians: One of the game scripts will consider the player wasted when their health drops below <see cref="P:GTA.Ped.InjuryHealthThreshold"/>, regardless of this setting.
            </remarks>
        </member>
        <member name="P:GTA.Ped.IsInGroup">
            <summary>
            Gets if this <see cref="T:GTA.Ped"/> is in a <see cref="P:GTA.Ped.PedGroup"/>.
            </summary>
        </member>
        <member name="P:GTA.Ped.PedGroup">
            <summary>
            Gets the PedGroup this <see cref="T:GTA.Ped"/> is in.
            </summary>
        </member>
        <member name="P:GTA.Ped.Voice">
            <summary>
            Sets the voice to use when this <see cref="T:GTA.Ped"/> speaks.
            </summary>
        </member>
        <member name="P:GTA.Ped.MovementAnimationSet">
            <summary>
            Sets the animation dictionary or set this <see cref="T:GTA.Ped"/> should use or <see langword="null" /> to clear it.
            </summary>
        </member>
        <member name="M:GTA.Ped.GetAllLoadedModelsAppropriateForAmbientPeds">
            <summary>
            Gets an <c>array</c> of all loaded <see cref="T:GTA.PedHash"/>s that is appropriate to spawn as ambient vehicles.
            The result array can contains animal hashes, which CREATE_RANDOM_PED excludes to spawn.
            All the model hashes of the elements are loaded and the <see cref="T:GTA.Ped"/>s with the model hashes can be spawned immediately.
            </summary>
        </member>
        <member name="P:GTA.PedBoneCollection.Item(GTA.Bone)">
            <summary>
            Gets the <see cref="T:GTA.PedBone"/> with the specified <paramref name="boneId"/>.
            </summary>
            <param name="boneId">The bone Id.</param>
        </member>
        <member name="P:GTA.PedBoneCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:GTA.PedBone"/> at the specified bone index.
            </summary>
            <param name="boneIndex">The bone index.</param>
        </member>
        <member name="P:GTA.PedBoneCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:GTA.PedBone"/> with the specified bone name.
            </summary>
            <param name="boneName">Name of the bone.</param>
        </member>
        <member name="P:GTA.PedBoneCollection.Core">
            <summary>
            Gets the core bone of this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.PedBoneCollection.LastDamaged">
            <summary>
            Gets the last damaged bone for this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="M:GTA.PedBoneCollection.ClearLastDamaged">
            <summary>
            Clears the last damage a bone on this <see cref="T:GTA.Ped"/> received.
            </summary>
        </member>
        <member name="M:GTA.PedGroup.Delete">
            <summary>
            Removes this <see cref="T:GTA.PedGroup"/>.
            </summary>
        </member>
        <member name="M:GTA.PedGroup.Exists">
            <summary>
            Determines if this <see cref="T:GTA.PedGroup"/> exists.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.PedGroup"/> exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.PedGroup.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same group as this <see cref="T:GTA.PedGroup"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same group as this <see cref="T:GTA.PedGroup"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.PedGroup.op_Equality(GTA.PedGroup,GTA.PedGroup)">
            <summary>
            Determines if two <see cref="T:GTA.PedGroup"/>s refer to the same group.
            </summary>
            <param name="left">The left <see cref="T:GTA.Checkpoint"/>.</param>
            <param name="right">The right <see cref="T:GTA.Checkpoint"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same group as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.PedGroup.op_Inequality(GTA.PedGroup,GTA.PedGroup)">
            <summary>
            Determines if two <see cref="T:GTA.PedGroup"/>s don't refer to the same group.
            </summary>
            <param name="left">The left <see cref="T:GTA.PedGroup"/>.</param>
            <param name="right">The right <see cref="T:GTA.PedGroup"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same group as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.PedGroup.op_Implicit(GTA.PedGroup)~GTA.Native.InputArgument">
            <summary>
            Converts a <see cref="T:GTA.PedGroup"/> to a native input argument.
            </summary>
        </member>
        <member name="F:GTA.PedHash.Franklin02">
            <summary>
            The Franklin Clinton model added in the Contract update, and this model is not used for story mode. The model name is <c>P_Franklin_02</c>.
            The leader player will control a <see cref="T:GTA.Ped" /> with this model in Short Trip missions.
            </summary>
        </member>
        <member name="F:GTA.PedHash.ARY">
            <summary>
            The first in-game model of Andre Romelle Young, known professionally as Dr. Dre.
            </summary>
        </member>
        <member name="F:GTA.PedHash.ARY02">
            <summary>
            The second in-game model of Andre Romelle Young, known professionally as Dr. Dre.
            </summary>
        </member>
        <member name="F:GTA.PedHash.JIO">
            <summary>
            The first in-game model of Jimmy Iovine.
            </summary>
        </member>
        <member name="F:GTA.PedHash.JIO02">
            <summary>
            The second in-game model of Jimmy Iovine.
            </summary>
        </member>
        <member name="F:GTA.PedHash.MJO">
            <summary>
            The first in-game model of Mark Jordan, known professionally as DJ Pooh.
            </summary>
        </member>
        <member name="F:GTA.PedHash.MJO02">
            <summary>
            The second in-game model of Mark Jordan, known professionally as DJ Pooh.
            </summary>
        </member>
        <member name="F:GTA.PedHash.ARYCutscene">
            <summary>
            The first cutscene model of Andre Romelle Young, known professionally as Dr. Dre.
            </summary>
        </member>
        <member name="F:GTA.PedHash.ARY02Cutscene">
            <summary>
            The second cutscene model of Andre Romelle Young, known professionally as Dr. Dre.
            </summary>
        </member>
        <member name="F:GTA.PedHash.JIOCutscene">
            <summary>
            The first cutscene model of Jimmy Iovine.
            </summary>
        </member>
        <member name="F:GTA.PedHash.JIO02Cutscene">
            <summary>
            The second cutscene model of Jimmy Iovine.
            </summary>
        </member>
        <member name="F:GTA.PedHash.MJOCutscene">
            <summary>
            The first cutscene model of Mark Jordan, known professionally as DJ Pooh.
            </summary>
        </member>
        <member name="F:GTA.PedHash.MJO02Cutscene">
            <summary>
            The second cutscene model of Mark Jordan, known professionally as DJ Pooh.
            </summary>
        </member>
        <member name="F:GTA.RagdollType.Relax">
            <summary>
            <see cref="T:GTA.Ped"/>s will fall with their muscle relax, just like when <see cref="T:GTA.Ped"/>s' healths are set to zero and get killed by setting the healths.
            </summary>
        </member>
        <member name="F:GTA.RagdollType.ScriptControl">
            <summary>
            You can control <see cref="T:GTA.Ped"/>s' ragdoll behaviors by additional configrations. Consider using the <see cref="T:GTA.NaturalMotion.Euphoria"/> class for advanced and easier ragdoll configrations.
            </summary>
        </member>
        <member name="F:GTA.RagdollType.Balance">
            <summary>
            <see cref="T:GTA.Ped"/>s will try to balance.
            </summary>
        </member>
        <member name="F:GTA.Relationship.Companion">
            <summary>
            The correct relationship name for this enum would be <c>Respect</c>.
            </summary>
        </member>
        <member name="F:GTA.Relationship.Respect">
            <summary>
            The correct relationship name for this enum would be <c>Like</c>.
            </summary>
        </member>
        <member name="F:GTA.Relationship.Like">
            <summary>
            The correct relationship name for this enum would be <c>Ignore</c>.
            </summary>
        </member>
        <member name="F:GTA.Relationship.Neutral">
            <summary>
            The correct relationship name for this enum would be <c>Dislike</c>.
            </summary>
        </member>
        <member name="F:GTA.Relationship.Dislike">
            <summary>
            The correct relationship name for this enum would be <c>Wanted</c>.
            Will be used for cops towards the player relationship group when the player is wanted.
            </summary>
        </member>
        <member name="F:GTA.Relationship.Pedestrians">
            <summary>
            The correct relationship name for this enum would be <c>None</c>.
            </summary>
        </member>
        <member name="P:GTA.RelationshipGroup.Hash">
            <summary>
            Gets the hash for this <see cref="T:GTA.RelationshipGroup"/>.
            </summary>
        </member>
        <member name="P:GTA.RelationshipGroup.NativeValue">
            <summary>
            Gets the native representation of this <see cref="T:GTA.RelationshipGroup"/>.
            </summary>
        </member>
        <member name="M:GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)">
            <summary>Tells the <see cref="T:GTA.Ped"/> to perform a task when in a <see cref="T:GTA.Vehicle"/> against another <see cref="T:GTA.Vehicle"/>.</summary>
            <param name="vehicle">The <see cref="T:GTA.Vehicle"/> to use to achieve the task.</param>
            <param name="target">The target <see cref="T:GTA.Vehicle"/>.</param>
            <param name="missionType">The vehicle mission type.</param>
            <param name="cruiseSpeed">The cruise speed for the task.</param>
            <param name="drivingFlags">The driving flags for the task.</param>
            <param name="targetReachedDist">The distance at which the AI thinks the target has been reached and the car stops. To pick default value, the parameter can be passed in as <c>-1</c>.</param>
            <param name="straightLineDist">The distance at which the AI switches to heading for the target directly instead of following the nodes. To pick default value, the parameter can be passed in as <c>-1</c>.</param>
            <param name="driveAgainstTraffic">if set to <see langword="true" />, allows the car to drive on the opposite side of the road into incoming traffic.</param>
        </member>
        <member name="M:GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Ped,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)">
            <summary>Tells the <see cref="T:GTA.Ped"/> to target another ped with a vehicle.</summary>
            <param name="vehicle">The <see cref="T:GTA.Vehicle"/> to use to achieve the task.</param>
            <param name="target">The target <see cref="T:GTA.Ped"/>.</param>
            <param name="missionType">The vehicle mission type.</param>
            <param name="cruiseSpeed">The cruise speed for the task.</param>
            <param name="drivingFlags">The driving flags for the task.</param>
            <param name="targetReachedDist">The distance at which the AI thinks the target has been reached and the car stops. To pick default value, the parameter can be passed in as <c>-1</c>.</param>
            <param name="straightLineDist">The distance at which the AI switches to heading for the target directly instead of following the nodes. To pick default value, the parameter can be passed in as <c>-1</c>.</param>
            <param name="driveAgainstTraffic">if set to <see langword="true" />, allows the car to drive on the opposite side of the road into incoming traffic.</param>
        </member>
        <member name="M:GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Math.Vector3,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)">
            <summary>Tells the <see cref="T:GTA.Ped"/> to target a coord with a <see cref="T:GTA.Vehicle"/>.</summary>
            <param name="vehicle">The <see cref="T:GTA.Vehicle"/> to use to achieve the task.</param>
            <param name="target">The target coordinates.</param>
            <param name="missionType">The vehicle mission type.</param>
            <param name="cruiseSpeed">The cruise speed for the task.</param>
            <param name="drivingFlags">The driving flags for the task.</param>
            <param name="targetReachedDist">The distance at which the AI thinks the target has been reached and the car stops. To pick default value, the parameter can be passed in as <c>-1</c>.</param>
            <param name="straightLineDist">The distance at which the AI switches to heading for the target directly instead of following the nodes. To pick default value, the parameter can be passed in as <c>-1</c>.</param>
            <param name="driveAgainstTraffic">if set to <see langword="true" />, allows the car to drive on the opposite side of the road into incoming traffic.</param>
        </member>
        <member name="M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)">
            <summary>Gives the helicopter a mission.</summary>
            <param name="heli">The helicopter.</param>
            <param name="target">The target <see cref="T:GTA.Vehicle"/>.</param>
            <param name="missionType">The vehicle mission type.</param>
            <param name="cruiseSpeed">The cruise speed for the task.</param>
            <param name="targetReachedDist">distance (in meters) at which heli thinks it's arrived. Also used as the hover distance for <see cref="F:GTA.VehicleMissionType.Attack"/> and <see cref="F:GTA.VehicleMissionType.Circle"/></param>
            <param name="flightHeight">The Z coordinate the heli tries to maintain (i.e. 30 == 30 meters above sea level).</param>
            <param name="minHeightAboveTerrain">The height in meters that the heli will try to stay above terrain (ie 20 == always tries to stay at least 20 meters above ground).</param>
            <param name="heliOrientation">The orientation the heli tries to be in (<c>0f</c> to <c>360f</c>). Use <c>-1f</c> if not bothered. <c>-1f</c> Should be used in 99% of the times.</param>
            <param name="slowDownDistance">In general, get more control with big number and more dynamic with smaller. Setting to <c>-1</c> means use default tuning(<c>100</c>).</param>
            <param name="missionFlags">The heli mission flags for the task.</param>
        </member>
        <member name="M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Ped,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)">
            <summary>Gives the helicopter a mission.</summary>
            <param name="heli">The helicopter.</param>
            <param name="target">The target <see cref="T:GTA.Ped"/>.</param>
            <param name="missionType">The vehicle mission type.</param>
            <param name="cruiseSpeed">The cruise speed for the task.</param>
            <param name="targetReachedDist">distance (in meters) at which heli thinks it's arrived. Also used as the hover distance for <see cref="F:GTA.VehicleMissionType.Attack"/> and <see cref="F:GTA.VehicleMissionType.Circle"/></param>
            <param name="flightHeight">The Z coordinate the heli tries to maintain (i.e. 30 == 30 meters above sea level).</param>
            <param name="minHeightAboveTerrain">The height in meters that the heli will try to stay above terrain (ie 20 == always tries to stay at least 20 meters above ground).</param>
            <param name="heliOrientation">The orientation the heli tries to be in (<c>0f</c> to <c>360f</c>). Use <c>-1f</c> if not bothered. <c>-1f</c> Should be used in 99% of the times.</param>
            <param name="slowDownDistance">In general, get more control with big number and more dynamic with smaller. Setting to <c>-1</c> means use default tuning(<c>100</c>).</param>
            <param name="missionFlags">The heli mission flags for the task.</param>
        </member>
        <member name="M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Math.Vector3,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)">
            <summary>Gives the helicopter a mission.</summary>
            <param name="heli">The helicopter.</param>
            <param name="target">The target coodinate.</param>
            <param name="missionType">The vehicle mission type.</param>
            <param name="cruiseSpeed">The cruise speed for the task.</param>
            <param name="targetReachedDist">distance (in meters) at which heli thinks it's arrived. Also used as the hover distance for <see cref="F:GTA.VehicleMissionType.Attack"/> and <see cref="F:GTA.VehicleMissionType.Circle"/></param>
            <param name="flightHeight">The Z coordinate the heli tries to maintain (i.e. 30 == 30 meters above sea level).</param>
            <param name="minHeightAboveTerrain">The height in meters that the heli will try to stay above terrain (ie 20 == always tries to stay at least 20 meters above ground).</param>
            <param name="heliOrientation">The orientation the heli tries to be in (<c>0f</c> to <c>360f</c>). Use <c>-1f</c> if not bothered. <c>-1f</c> Should be used in 99% of the times.</param>
            <param name="slowDownDistance">In general, get more control with big number and more dynamic with smaller. Setting to <c>-1</c> means use default tuning(<c>100</c>).</param>
            <param name="missionFlags">The heli mission flags for the task.</param>
        </member>
        <member name="M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)">
            <summary>Gives the plane a mission.</summary>
            <param name="plane">The helicopter.</param>
            <param name="target">The target <see cref="T:GTA.Vehicle"/>.</param>
            <param name="missionType">The vehicle mission type.</param>
            <param name="cruiseSpeed">The cruise speed for the task.</param>
            <param name="targetReachedDist">distance (in meters) at which heli thinks it's arrived. Also used as the hover distance for <see cref="F:GTA.VehicleMissionType.Attack"/> and <see cref="F:GTA.VehicleMissionType.Circle"/></param>
            <param name="flightHeight">The Z coordinate the heli tries to maintain (i.e. 30 == 30 meters above sea level).</param>
            <param name="minHeightAboveTerrain">The height in meters that the heli will try to stay above terrain (ie 20 == always tries to stay at least 20 meters above ground).</param>
            <param name="planeOrientation">The orientation the plane tries to be in (<c>0f</c> to <c>360f</c>). Use <c>-1f</c> if not bothered. <c>-1f</c> Should be used in 99% of the times.</param>
        </member>
        <member name="M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Ped,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)">
            <summary>Gives the plane a mission.</summary>
            <param name="plane">The helicopter.</param>
            <param name="target">The target <see cref="T:GTA.Ped"/>.</param>
            <param name="missionType">The vehicle mission type.</param>
            <param name="cruiseSpeed">The cruise speed for the task.</param>
            <param name="targetReachedDist">distance (in meters) at which heli thinks it's arrived. Also used as the hover distance for <see cref="F:GTA.VehicleMissionType.Attack"/> and <see cref="F:GTA.VehicleMissionType.Circle"/></param>
            <param name="flightHeight">The Z coordinate the heli tries to maintain (i.e. 30 == 30 meters above sea level).</param>
            <param name="minHeightAboveTerrain">The height in meters that the heli will try to stay above terrain (ie 20 == always tries to stay at least 20 meters above ground).</param>
            <param name="planeOrientation">The orientation the plane tries to be in (<c>0f</c> to <c>360f</c>). Use <c>-1f</c> if not bothered. <c>-1f</c> Should be used in 99% of the times.</param>
        </member>
        <member name="M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Math.Vector3,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)">
            <summary>Gives the plane a mission.</summary>
            <param name="plane">The plane.</param>
            <param name="target">The target coodinate.</param>
            <param name="missionType">The vehicle mission type.</param>
            <param name="cruiseSpeed">The cruise speed for the task.</param>
            <param name="targetReachedDist">distance (in meters) at which heli thinks it's arrived. Also used as the hover distance for <see cref="F:GTA.VehicleMissionType.Attack"/> and <see cref="F:GTA.VehicleMissionType.Circle"/></param>
            <param name="flightHeight">The Z coordinate the heli tries to maintain (i.e. 30 == 30 meters above sea level).</param>
            <param name="minHeightAboveTerrain">The height in meters that the heli will try to stay above terrain (ie 20 == always tries to stay at least 20 meters above ground).</param>
            <param name="planeOrientation">The orientation the plane tries to be in (<c>0f</c> to <c>360f</c>). Use <c>-1f</c> if not bothered. <c>-1f</c> Should be used in 99% of the times.</param>
        </member>
        <member name="M:GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)">
            <summary>Gives the boat a mission.</summary>
            <param name="boat">The boat.</param>
            <param name="target">The target <see cref="T:GTA.Vehicle"/>.</param>
            <param name="missionType">The vehicle mission type.</param>
            <param name="cruiseSpeed">The cruise speed for the task.</param>
            <param name="drivingFlags">The driving flags for the task.</param>
            <param name="targetReachedDist">distance (in meters) at which boat thinks it's arrived. Also used as the hover distance for <see cref="F:GTA.VehicleMissionType.Attack"/> and <see cref="F:GTA.VehicleMissionType.Circle"/></param>
            <param name="missionFlags">The boat mission flags for the task.</param>
        </member>
        <member name="M:GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Ped,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)">
            <summary>Gives the boat a mission.</summary>
            <param name="boat">The boat.</param>
            <param name="target">The target <see cref="T:GTA.Ped"/>.</param>
            <param name="missionType">The vehicle mission type.</param>
            <param name="cruiseSpeed">The cruise speed for the task.</param>
            <param name="drivingFlags">The driving flags for the task.</param>
            <param name="targetReachedDist">distance (in meters) at which boat thinks it's arrived. Also used as the hover distance for <see cref="F:GTA.VehicleMissionType.Attack"/> and <see cref="F:GTA.VehicleMissionType.Circle"/></param>
            <param name="missionFlags">The boat mission flags for the task.</param>
        </member>
        <member name="M:GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Math.Vector3,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)">
            <summary>Gives the boat a mission.</summary>
            <param name="boat">The boat.</param>
            <param name="target">The target coordinate.</param>
            <param name="missionType">The vehicle mission type.</param>
            <param name="cruiseSpeed">The cruise speed for the task.</param>
            <param name="drivingFlags">The driving flags for the task.</param>
            <param name="targetReachedDist">distance (in meters) at which boat thinks it's arrived. Also used as the hover distance for <see cref="F:GTA.VehicleMissionType.Attack"/> and <see cref="F:GTA.VehicleMissionType.Circle"/></param>
            <param name="missionFlags">The boat mission flags for the task.</param>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.DontSteerAroundPlayerPed">
            <summary>Don't steer around the player ped even if <see cref="F:GTA.VehicleDrivingFlags.SteerAroundPeds"/> is set.</summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.GoOffRoadWhenAvoiding">
            <summary>
            Make the <see cref="T:GTA.Ped"/> prefer to go off the road rather than enter oncoming lanes when avoiding (steering around) obstacles if the correct lanes are full.
            Even if this value is set, the <see cref="T:GTA.Ped"/> will try to steer around obstacles by entering other correct lanes if the correct lanes are not full. 
            </summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.AllowGoingWrongWay">
            <summary>
            Allow the <see cref="T:GTA.Ped"/> to drive into the oncoming traffic if the correct lanes are full.
            Even if this value is set, the <see cref="T:GTA.Ped"/> will try to reach the correct lanes again as soon as possible. 
            </summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.UseWanderFallbackInsteadOfStraightLine">
            <summary>
            If pathfinding fails, cruise randomly instead of going on a straight line.
            </summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.PreventBackgroundPathfinding">
            <summary>
            Only works when the car mission is set to MISSION_CRUISE.
            </summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.AdjustCruiseSpeedBasedOnRoadSpeed">
            <summary>
            Limit the speed based on the road speed if the max cruise speed for driving tasks exceeds the road speed. Only works when the car mission is set to MISSION_CRUISE.
            </summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.UseShortCutLinks">
            <summary>
            Allow the <see cref="T:GTA.Ped"/> to use short cut links (e.g. the 180? turns on the highways without the direction sign).
            </summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.ChangeLanesAroundObstructions">
            <summary>
            Make the driver change lanes around obstructions.
            Without this flag, even small obstacles make the driver completely change lanes.
            </summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.UseSwitchedOffNodes">
            <summary>
            Allow the <see cref="T:GTA.Ped"/> to drive on switched off nodes, which are usually located at paths whose colors on the map are darker than roads for driving (e.g. some dirt roads), and on parking lots.
            You can check if some nodes are marked as switched off with <c>GET_VEHICLE_NODE_IS_SWITCHED_OFF</c>.
            </summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.PreferNavmeshRoute">
            <summary>
            Make <see cref="T:GTA.Ped"/> prefer navigation mesh routes rather than vehicle nodes.
            Can be useful if you're going to be primarily driving off road.
            </summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.PlaneTaxiMode">
            <summary>
            Only works for planes using <c>MISSION_GOTO</c>, will cause them to drive along the ground instead of fly.
            </summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.ForceStraightLine">
            <summary>
            Force to go to the target directly instead of following the nodes regardless of the distance config for driving or vehicle mission tasks at which the ai switches to heading for the target directly.
            </summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.TryToAvoidHighways">
            <summary>
            Avoid the highway unless the <see cref="T:GTA.Ped"/> has to drive on it to achieve the vehicle task.
            </summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.DrivingModeStopForVehicles">
            <summary>Standard driving mode. stops for cars, peds, and lights, goes around stationary obstructions, and obey lights.</summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.DrivingModeStopForVehiclesStrict">
            <summary>Like <see cref="F:GTA.VehicleDrivingFlags.DrivingModeStopForVehicles"/>, but doesn't steer around anything in its way - will only wait instead (doesn't deviate an inch).</summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.DrivingModeAvoidVehicles">
            <summary>Default "alerted" driving mode. Drives around everything, doesn't obey lights.</summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.DrivingModeAvoidVehiclesReckless">
            <summary>Very erratic driving. difference between this and <see cref="F:GTA.VehicleDrivingFlags.DrivingModeAvoidVehicles"/> is that it doesn't use the brakes at ALL to help with steering.</summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.DrivingModePloughThrough">
            <summary>Smashes through everything.</summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.DrivingModeStopForVehiclesIgnoreLights">
            <summary>Drives normally except for the fact that it ignores lights.</summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.DrivingModeAvoidVehiclesObeyLights">
            <summary>Try to swerve around everything, but stop for lights if necessary.</summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.DrivingModeAvoidVehiclesStopForPedsObeyLights">
            <summary>Swerve around cars, be careful around peds, and stop for lights.</summary>
        </member>
        <member name="P:GTA.Projectile.Owner">
            <summary>
            Gets the <see cref="T:GTA.Ped"/> this <see cref="T:GTA.Projectile"/> belongs to.
            Can be <see langword="null" /> or a <see cref="T:GTA.Ped"/> instance whose handle is for <see cref="T:GTA.Vehicle"/>, which is not valid as a <see cref="T:GTA.Ped"/> instance.
            </summary>
        </member>
        <member name="P:GTA.Projectile.OwnerEntity">
            <summary>
            Gets the <see cref="T:GTA.Entity"/> this <see cref="T:GTA.Projectile"/> belongs to. Can be <see langword="null" />.
            </summary>
        </member>
        <member name="P:GTA.Projectile.WeaponHash">
            <summary>
            Gets the <see cref="P:GTA.Projectile.WeaponHash"/> this <see cref="T:GTA.Projectile"/> was fired with.
            </summary>
        </member>
        <member name="M:GTA.Projectile.Explode">
            <summary>
            Explodes this <see cref="T:GTA.Projectile"/>. Note that calling this method does not necessarily delete this <see cref="T:GTA.Projectile"/> due to the weapon configuration.
            </summary>
        </member>
        <member name="M:GTA.Projectile.FromHandle(System.Int32)">
            <summary>
            Get a <see cref="T:GTA.Projectile"/> instance by its handle
            </summary>
            <param name="handle"></param>
            <returns>Null if not found or the entity is not a <see cref="T:GTA.Prop"/>, otherwise, a <see cref="T:GTA.Projectile"/></returns>
        </member>
        <member name="M:GTA.Prop.Exists">
            <summary>
            Determines if this <see cref="T:GTA.Prop"/> exists.
            You should ensure <see cref="T:GTA.Prop"/>s still exist before manipulating them or getting some values for them on every tick, since some native functions may crash the game if invalid entity handles are passed.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.Prop"/> exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:GTA.HandlingData">
            <summary>
            <para>This class has most regular handling data. Currently compatible with 1.0.2060.0 or later.</para>
            <para>Note that this class gets data from or sets data to the <c>CHandlingData</c> instance as is, and thus not all the handling values don't match the equivalent values in the <c>handling.meta</c> file.
            The game multiplies or divides some values after reading values from the <c>handling.meta</c> file.</para>
            </summary>
        </member>
        <member name="P:GTA.HandlingData.MemoryAddress">
            <summary>
            Gets the memory address where the <see cref="T:GTA.HandlingData"/> is stored in memory.
            </summary>
        </member>
        <member name="P:GTA.HandlingData.IsValid">
            <summary>
            Returns true if this <see cref="T:GTA.HandlingData"/> is valid.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.HandlingData"/> is valid; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.HandlingData.AntiRollBarBiasFront">
            <summary>
            Gets or sets the bias between front and rear for the anti-roll bar.
            This value will be set to the equivalent value in the <c>handling.meta</c> multiplied by 2 when <see cref="T:GTA.HandlingData"/> instances are initialized.
            </summary>
            <value>
            The anti roll bar bias front. 0.0f is fully front, 2.0f is fully rear.
            </value>
        </member>
        <member name="P:GTA.HandlingData.AntiRollBarForce">
            <summary>
            Gets or sets the spring constant that is transmitted to the opposite wheel when under compression.
            Larger numbers result in a larger force being applied.
            </summary>
            <value>
            The anti roll bar force.
            </value>
        </member>
        <member name="P:GTA.HandlingData.ClutchChangeRateScaleDownShift">
            <summary>
            Gets or sets the clutch speed multiplier on down shifts.
            </summary>
            <value>
            The clutch speed multiplier on down shifts.
            </value>
        </member>
        <member name="P:GTA.HandlingData.ClutchChangeRateScaleUpShift">
            <summary>
            Gets or sets the clutch speed multiplier on up shifts.
            </summary>
            <value>
            The clutch speed multiplier on up shifts.
            </value>
        </member>
        <member name="P:GTA.HandlingData.DownForceModifier">
            <summary>
            Gets or sets the amount of downforce applied to the vehicle.
            </summary>
            <value>
            The amount of downforce applied to the vehicle.
            </value>
        </member>
        <member name="P:GTA.HandlingData.DriveBiasFront">
            <summary>
            <para>Gets or sets how much the vehicle gives rear axles force. The rest of the force will be given to front axles. This value will be set to the equivalent value in the <c>handling.meta</c> multiplied by 2 when <see cref="T:GTA.HandlingData"/> instances are initialized.</para>
            <para>0.0 is rear wheel drive, 2.0 is front wheel drive, and any value between 0.01 and 0.199 is four wheel drive (1.0 give both front and rear axles equal force, being perfect 4WD.)</para>
            </summary>
            <value>
            The percent the vehicle gives rear axles force (between 0.0 to 2.0).
            </value>
        </member>
        <member name="P:GTA.HandlingData.DriveInertia">
            <summary>
            Gets or sets the drive inertia that determines how fast the engine acceleration is.
            </summary>
            <value>
            The drive inertia.
            </value>
            <remarks>
            If you want a vehicle with high torque but slow acceleration (e.g. a truck), lower the driver inertia and specify a high drive force.
            </remarks>
        </member>
        <member name="P:GTA.HandlingData.InitialDragCoefficient">
            <summary>
            Gets or sets the drag coefficient.
            </summary>
            <value>
            The drag coefficient.
            </value>
        </member>
        <member name="P:GTA.HandlingData.InitialDriveForce">
            <summary>
            Gets or sets the power engine produces in top gear.
            </summary>
            <value>
            The power engine that produces in top gear.
            </value>
        </member>
        <member name="P:GTA.HandlingData.InitialDriveGears">
            <summary>
            Gets or sets the number of gears (excluding reverse).
            </summary>
            <value>
            The number of gears (excluding reverse).
            </value>
        </member>
        <member name="P:GTA.HandlingData.InitialDriveMaxFlatVelocity">
            <summary>
            Determines the speed at redline in high gear; Controls the final drive of the vehicle's gearbox.
            Setting this value does not guarantee the vehicle will reach this speed.
            </summary>
            <value>
            the speed at redline in high gear.
            </value>
        </member>
        <member name="P:GTA.HandlingData.LowSpeedTractionLossMultiplier">
            <summary>
            How much traction is reduced at low speed, 0.0 means normal traction. It affects mainly car burnout (spinning wheels when car doesn't move) when pressing gas.
            Decreasing value will cause less burnout, less sliding at start. However, the higher value, the more burnout car gets.
            </summary>
            <value>
            How much traction is reduced at low speed.
            </value>
        </member>
        <member name="P:GTA.HandlingData.Mass">
            <summary>
            Gets or sets the weight.
            </summary>
            <value>
            The weight in Kilograms.
            </value>
        </member>
        <member name="P:GTA.HandlingData.OilVolume">
            <summary>
            Gets or sets the amount of oil.
            </summary>
            <value>
            The amount of oil.
            </value>
        </member>
        <member name="P:GTA.HandlingData.PercentSubmerged">
            <summary>
            Gets or sets the percentage of the "floating height" after it falls into the water, before sinking.
            </summary>
            <value>
            The percentage between 0 and 1.
            </value>
            <remarks>
            The default value for vanilla land vehicles is 0.85. The value will stop sinking the vehicle to float for a moment before sinking.
            An invalid number will cause the vehicle to sink without the driver drowning.
            </remarks>
        </member>
        <member name="P:GTA.HandlingData.PetrolTankVolume">
            <summary>
            Gets or sets the amount of petrol that will leak after damaging a vehicle's tank.
            </summary>
            <value>
            The amount of petrol.
            </value>
        </member>
        <member name="P:GTA.HandlingData.PopUpLightRotation">
            <summary>
            Gets or sets the rotation values in degree the parts pop-up headlights needs to be rotated when headlights are on.
            </summary>
            <value>
            The rotation values in degree. Can be negative.
            </value>
        </member>
        <member name="P:GTA.HandlingData.SteeringLock">
            <summary>
            <para>
            Gets or sets a value that multiplies the game's calculation of the angle of the steer wheel will turn while at full turn in radians.
            Steering lock is directly related to over/under-steer.
            </para>
            <para>When <see cref="T:GTA.HandlingData"/> instances are initialized, the game converts the value in degrees read from <c>handling.meta</c> to radians before this value is initialized.</para>
            </summary>
            <value>
            The value that multiplies the game's calculation of the angle of the steer wheel in radians, between 0.01 and above.
            </value>
        </member>
        <member name="P:GTA.HandlingData.SuspensionBiasFront">
            <summary>
            Gets or sets the damping scale bias between front and rear wheels.
            This value determines which suspension is stronger, front or rear.
            This value will be set to the equivalent value in the <c>handling.meta</c> multiplied by 2 when <see cref="T:GTA.HandlingData"/> instances are initialized.
            </summary>
            <value>
            The suspension bias front.
            </value>
            <remarks>
            if more wheels at back (e.g. trucks), front suspension should be stronger.
            </remarks>
        </member>
        <member name="P:GTA.HandlingData.SuspensionCompressionDamping">
            <summary>
            Gets or sets the damping during strut compression.
            This value will be set to the equivalent value in the <c>handling.meta</c> divided by 10 when <see cref="T:GTA.HandlingData"/> instances are initialized.
            </summary>
            <value>
            The damping during strut compression.
            </value>
        </member>
        <member name="P:GTA.HandlingData.SuspensionForce">
            <summary>
            Gets or sets the suspension force.
            Lower limit for zero force at full extension is calculated using (1.0f / (force * number of wheels)).
            </summary>
            <value>
            The suspension force.
            </value>
        </member>
        <member name="P:GTA.HandlingData.SuspensionLowerLimit">
            <summary>
            Gets or sets how far the wheels can move down from their original position.
            </summary>
            <value>
            The suspension lower limit.
            </value>
        </member>
        <member name="P:GTA.HandlingData.SuspensionRaise">
            <summary>
            Gets or sets the adjustment from artist positioning.
            </summary>
            <value>
            The suspension raise.
            </value>
        </member>
        <member name="P:GTA.HandlingData.SuspensionReboundDamping">
            <summary>
            Gets or sets the damping during strut rebound.
            This value will be set to the equivalent value in the <c>handling.meta</c> divided by 10 when <see cref="T:GTA.HandlingData"/> instances are initialized.
            </summary>
            <value>
            The damping during strut rebound.
            </value>
        </member>
        <member name="P:GTA.HandlingData.SuspensionUpperLimit">
            <summary>
            Gets or sets how far the wheels can move up from their original position.
            </summary>
            <value>
            The suspension upper limit.
            </value>
        </member>
        <member name="P:GTA.HandlingData.TractionBiasFront">
            <summary>
            Gets or sets the value that determines the distribution of traction from front to rear.
            This value will be set to the equivalent value in the <c>handling.meta</c> multiplied by 2 when <see cref="T:GTA.HandlingData"/> instances are initialized.
            </summary>
            <value>
            The value that determines distribution of traction from front to rear.
            </value>
        </member>
        <member name="P:GTA.HandlingData.TractionLossMultiplier">
            <summary>
            Gets or sets how much traction is affected by material grip differences from 1.0f.
            </summary>
            <value>
            The traction loss multiplier.
            </value>
        </member>
        <member name="P:GTA.HandlingData.TractionSpringDeltaMax">
            <summary>
            Gets or sets the maximum distance for traction spring.
            </summary>
            <value>
            The traction loss multiplier.
            </value>
        </member>
        <member name="M:GTA.Vehicle.Repair">
            <summary>
            Repair all damage to this <see cref="T:GTA.Vehicle"/> instantaneously.
            </summary>
        </member>
        <member name="M:GTA.Vehicle.Explode">
            <summary>
            Explode this <see cref="T:GTA.Vehicle"/> instantaneously.
            </summary>
        </member>
        <member name="M:GTA.Vehicle.Exists">
            <summary>
            Determines if this <see cref="T:GTA.Vehicle"/> exists.
            You should ensure <see cref="T:GTA.Vehicle"/>s still exist before manipulating them or getting some values for them on every tick, since some native functions may crash the game if invalid entity handles are passed.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.Vehicle"/> exists; otherwise, <see langword="false" /></returns>
        </member>
        <member name="P:GTA.Vehicle.IsRegularAutomobile">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a regular automobile.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsAmphibiousAutomobile">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is an amphibious automobile.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsSubmarineCar">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a submarine car.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsAutomobile">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is an automobile.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsRegularQuadBike">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a regular quad bike.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsAmphibiousQuadBike">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is an amphibious quad bike.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsQuadBike">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a quad bike.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsAmphibious">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is an amphibious vehicle.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsTrailer">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a trailer.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsPlane">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a plane.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsHelicopter">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a helicopter.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsBlimp">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a helicopter.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsAircraft">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is an aircraft.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsMotorcycle">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a motorcycle.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsBicycle">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a bicycle.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsBike">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a bike.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsBoat">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a boat.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsTrain">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a train.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsSubmarine">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a submarine.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.CanPretendOccupants">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> can pretend it has the same <see cref="T:GTA.Ped"/>s.
            Set to <see langword="false"/> to prevent this <see cref="T:GTA.Vehicle"/> from creating new <see cref="T:GTA.Ped"/>s as its occupants.
            </summary>
            <remarks>
            <see cref="T:GTA.Vehicle"/>s do not pretend occupants regardless of this value if <see cref="P:GTA.Entity.PopulationType"/> is set to
            <see cref="F:GTA.EntityPopulationType.Permanent"/> or <see cref="F:GTA.EntityPopulationType.Mission"/>.
            </remarks>
        </member>
        <member name="P:GTA.Vehicle.IsStolen">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> was stolen.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsWanted">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> is wanted by the police.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> is wanted by the police; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.NeedsToBeHotwired">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> needs to be hotwired to start.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> needs to be hotwired to start; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.PreviouslyOwnedByPlayer">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> was previously owned by a <see cref="T:GTA.Player"/>.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> was previously owned by a <see cref="T:GTA.Player"/>; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.AllowRappel">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> allows <see cref="T:GTA.Ped"/>s to rappel.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> allows <see cref="T:GTA.Ped"/>s to rappel; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.CanStandOnTop">
            <summary>
            Gets a value indicating whether <see cref="T:GTA.Ped"/>s can stand on this <see cref="T:GTA.Vehicle"/> regardless of <see cref="T:GTA.Vehicle"/>s speed.
            </summary>
            <value>
            <see langword="true" /> if <see cref="T:GTA.Ped"/>s can stand on this <see cref="T:GTA.Vehicle"/> regardless of <see cref="T:GTA.Vehicle"/>s speed; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.CanJump">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> can jump.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> can jump; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.DisplayName">
            <summary>
            Gets the display name of this <see cref="T:GTA.Vehicle"/>.
            <remarks>Use <see cref="M:GTA.Game.GetLocalizedString(System.String)"/> to get the localized name.</remarks>
            </summary>
        </member>
        <member name="P:GTA.Vehicle.LocalizedName">
            <summary>
            Gets the localized name of this <see cref="T:GTA.Vehicle"/>
            </summary>
        </member>
        <member name="P:GTA.Vehicle.ClassDisplayName">
            <summary>
            Gets the display name of this <see cref="T:GTA.Vehicle"/>s <see cref="T:GTA.VehicleClass"/>.
            <remarks>Use <see cref="M:GTA.Game.GetLocalizedString(System.String)"/> to get the localized class name.</remarks>
            </summary>
        </member>
        <member name="P:GTA.Vehicle.ClassLocalizedName">
            <summary>
            Gets the localized name of this <see cref="T:GTA.Vehicle"/>s <see cref="T:GTA.VehicleClass"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.ClassType">
            <summary>
            Gets the class of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.Type">
            <summary>
            Gets the type of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.BodyHealth">
            <summary>
            Gets or sets this <see cref="T:GTA.Vehicle"/>s body health.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.EngineHealth">
            <summary>
            Gets or sets this <see cref="T:GTA.Vehicle"/> engine health.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.PetrolTankHealth">
            <summary>
            Gets or sets this <see cref="T:GTA.Vehicle"/> petrol tank health.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.HeliEngineHealth">
            <summary>
            Gets or sets the engine health for this heli.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.HeliMainRotorHealth">
            <summary>
            Gets or sets the main rotor health for this heli.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.HeliTailRotorHealth">
            <summary>
            Gets or sets the tail rotor health for this heli.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsRadioEnabled">
            <summary>
            Turns this <see cref="T:GTA.Vehicle"/>s radio on or off
            </summary>
        </member>
        <member name="P:GTA.Vehicle.RadioStation">
            <summary>
            Sets this <see cref="T:GTA.Vehicle"/>s radio station.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsEngineRunning">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/>s engine is running.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Vehicle"/>s engine is running; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.IsEngineStarting">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/>s engine is currently starting.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Vehicle"/>s engine is starting; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.EngineTemperature">
            <summary>
            Gets the engine temperature of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.OilLevel">
            <summary>
            Gets or sets this <see cref="T:GTA.Vehicle"/> oil level.
            If this value is above zero, this value decreases instead of <see cref="P:GTA.Vehicle.EngineHealth"/> when the engine emits black smoke.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.OilVolume">
            <summary>
            Gets the oil volume of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.FuelLevel">
            <summary>
            Gets or sets this <see cref="T:GTA.Vehicle"/> fuel level.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.PetrolTankVolume">
            <summary>
            Gets the petrol tank volume of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.Gears">
            <summary>
            Gets or sets the gears value of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.NextGear">
            <summary>
            Gets or sets the next gear value of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.CurrentGear">
            <summary>
            Gets or sets the current gear this <see cref="T:GTA.Vehicle"/> is using.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.Turbo">
            <summary>
            Gets or sets the current turbo value of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.Clutch">
            <summary>
            Gets or sets the current clutch of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.Throttle">
            <summary>
            Gets or sets the current throttle of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.BrakePower">
            <summary>
            Gets or sets the current brake power of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.ThrottlePower">
            <summary>
            Gets or sets the current throttle power of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.MaxBraking">
            <summary>
            Gets the maximum brake power of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.MaxTraction">
            <summary>
            Gets the maximum traction of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.WheelSpeed">
            <summary>
            Gets the speed the drive wheels are turning at, This is the value used for the dashboard speedometers(after being converted to mph).
            </summary>
        </member>
        <member name="P:GTA.Vehicle.ForwardSpeed">
            <summary>
            Sets this <see cref="T:GTA.Vehicle"/>s forward speed.
            </summary>
            <value>
            The forward speed in m/s.
            </value>
        </member>
        <member name="P:GTA.Vehicle.HeliBladesSpeed">
            <summary>
            Gets or sets the blades speed for this heli.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.CurrentRPM">
            <summary>
            Gets or sets the current RPM of this <see cref="T:GTA.Vehicle"/>.
            </summary>
            <value>
            The current RPM between <c>0.0f</c> and <c>1.0f</c>.
            </value>
        </member>
        <member name="P:GTA.Vehicle.Acceleration">
            <summary>
            Gets the acceleration of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.SteeringAngle">
            <summary>
            Gets or sets the steering angle of this <see cref="T:GTA.Vehicle"/>.
            </summary>
            <value>
            The steering angle in degrees.
            </value>
        </member>
        <member name="P:GTA.Vehicle.SteeringScale">
            <summary>
            Gets or sets the steering scale of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsAlarmSet">
            <summary>
            Sets a value indicating whether this <see cref="T:GTA.Vehicle"/> has an alarm set.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has an alarm set; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.IsAlarmSounding">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is sounding its alarm.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> is sounding its alarm; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.AlarmTimeLeft">
            <summary>
            Gets or sets time left before this <see cref="T:GTA.Vehicle"/> alarm stops.
            If greater than zero, the vehicle alarm will be sounding.
            the value is up to 65534.
            </summary>
            <value>
            The time left before this <see cref="T:GTA.Vehicle"/> alarm stops.
            </value>
        </member>
        <member name="M:GTA.Vehicle.StartAlarm">
            <summary>
            Starts sounding the alarm on this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.HasSiren">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> has a siren.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has a siren; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.IsSirenActive">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> has its siren turned on.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has its siren turned on; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.IsSirenSilent">
            <summary>
            Sets a value indicating whether the siren on this <see cref="T:GTA.Vehicle"/> plays sounds.
            </summary>
            <value>
            <see langword="true" /> if the siren on this <see cref="T:GTA.Vehicle"/> plays sounds; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.Vehicle.SoundHorn(System.Int32)">
            <summary>
            Sounds the horn on this <see cref="T:GTA.Vehicle"/>.
            </summary>
            <param name="duration">The duration in milliseconds to sound the horn for.</param>
        </member>
        <member name="P:GTA.Vehicle.AreLightsOn">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> has its lights on.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has its lights on; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.AreHighBeamsOn">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> has its high beams on.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has its high beams on; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.IsInteriorLightOn">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> has its interior lights on.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has its interior lights on; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.IsSearchLightOn">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> has its search light on.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has its search light on; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.IsTaxiLightOn">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> has its taxi light on.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has its taxi light on; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.IsLeftIndicatorLightOn">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> has its left indicator light on.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has its left indicator light on; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.IsRightIndicatorLightOn">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> has its right indicator light on.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has its right indicator light on; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.AreBrakeLightsOn">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> has its brake light on.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has its brake light on; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.IsConsideredDestroyed">
            <summary>
            <para>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> is considered destroyed.
            Will be set to <see langword="true"/> when <see cref="T:GTA.Vehicle"/>s are exploded or sinking for a short time.
            </para>
            <para>
            <see cref="P:GTA.Entity.IsDead"/> will return <see langword="true"/> and <see cref="P:GTA.Vehicle.IsDriveable"/> will return <see langword="false"/> if this value is set to <see langword="true"/>.
            Does not affect if this <see cref="T:GTA.Vehicle"/> will rendered scorched.
            </para>
            </summary>
            <remarks>
            Many features of <see cref="T:GTA.Vehicle"/> will be disabled when this value is set to <see langword="true"/>.
            For example, <see cref="T:GTA.Ped"/>s cannot enter <see cref="T:GTA.Vehicle"/>s considered destroyed or start the engines of them. <see cref="T:GTA.Ped"/>s cannot use weapons of them.
            The player cannot unflip <see cref="T:GTA.Vehicle"/>s considered destroyed.
            </remarks>
        </member>
        <member name="P:GTA.Vehicle.DropsMoneyOnExplosion">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> drops money when destroyed.
            Only works when the vehicle model is a car, quad bikes or trikes (strictly when the internal vehicle class is CAutomobile or derived class from CAutomobile).
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> drops money when destroyed; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.IsHandbrakeForcedOn">
            <summary>
            Sets a value indicating whether the Handbrake on this <see cref="T:GTA.Vehicle"/> is forced on.
            </summary>
            <value>
              <see langword="true" /> if the Handbrake on this <see cref="T:GTA.Vehicle"/> is forced on; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.ProvidesCover">
            <summary>
            Gets or sets a value indicating whether peds can use this <see cref="T:GTA.Vehicle"/> for cover.
            </summary>
            <value>
              <see langword="true" /> if peds can use this <see cref="T:GTA.Vehicle"/> for cover; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.HasForks">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> has forks.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has forks; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.IsBeingBroughtToHalt">
            <summary>
            Checks if this <see cref="T:GTA.Vehicle"/> is being brought to a halt.
            </summary>
        </member>
        <member name="M:GTA.Vehicle.BringToHalt(System.Single,System.Int32,System.Boolean)">
            <summary>
            Starts the task to decelerate this <see cref="T:GTA.Vehicle"/> until it comes to rest, possibly in an unphysically short distance.
            </summary>
            <param name="stoppingDistance">The distance from the initial coords at which the vehicle should come to rest.</param>
            <param name="timeToStopFor">The length of time in seconds to hold the car at rest after stopping.</param>
            <param name="controlVerticalVelocity">
            If <see langword="false" />, the task allows gravity to act normally in the Z direction.
            If <see langword="true" />,  the task will also arrest the car's vertical velocity.
            </param>
        </member>
        <member name="M:GTA.Vehicle.StopBringingToHalt">
            <summary>
            Stops bringing this <see cref="T:GTA.Vehicle"/> to a halt.
            </summary>
        </member>
        <member name="M:GTA.Vehicle.GetActiveMissionType">
            <summary>
            Gets active vehicle mission type.
            </summary>
        </member>
        <member name="M:GTA.Vehicle.StartParachuting(System.Boolean)">
            <summary>
            Open the vehicle's parachute (if any)
            </summary>
            <param name="allowPlayerToCancel">Whether to allow the player to cancel parachuting before the vehicle lands</param>
        </member>
        <member name="M:GTA.Vehicle.GetAllLoadedModelsAppropriateForAmbientVehicles">
            <summary>
            Gets an <c>array</c> of all loaded <see cref="T:GTA.VehicleHash"/>s that is appropriate to spawn as ambient vehicles.
            All the model hashes of the elements are loaded and the <see cref="T:GTA.Vehicle"/>s with the model hashes can be spawned immediately.
            </summary>
        </member>
        <member name="F:GTA.VehicleHash.TenF">
            <summary>10F</summary>
        </member>
        <member name="F:GTA.VehicleHash.TenF2">
            <summary>10F Widebody</summary>
        </member>
        <member name="F:GTA.VehicleLockStatus.CannotEnter">
            <summary>
            The <see cref="T:GTA.Vehicle"/> cannot be entered regardless of whether the door is open or closed, or missing entirely.
            Warping into the <see cref="T:GTA.Vehicle"/> is the only way to make <see cref="T:GTA.Ped"/>s get in on a seat.
            </summary>
        </member>
        <member name="F:GTA.VehicleLockStatus.PlayerCannotEnter">
             <summary>
             Players cannot enter the <see cref="T:GTA.Vehicle"/> regardless of whether the door is open or closed, or missing entirely.
            Warping into the <see cref="T:GTA.Vehicle"/> is the only way to make <see cref="T:GTA.Ped"/>s get in on a seat.
             </summary>
        </member>
        <member name="F:GTA.VehicleLockStatus.PlayerCannotLeaveCanBeBrokenIntoPersist">
            <summary>
            <para>Doesn't allow players to exit the <see cref="T:GTA.Vehicle"/> with the exit vehicle key or button.</para>
            <para>The <see cref="T:GTA.Vehicle"/> is locked and must be broken into even if already broken into (the same as <see cref="F:GTA.VehicleLockStatus.CanBeBrokenIntoPersist"/>).</para>
            </summary>
        </member>
        <member name="F:GTA.VehicleLockStatus.CannotEnterIfDriverExists">
            <summary>
            For players, the <see cref="T:GTA.Vehicle"/> cannot open any door if it has a driver.
            For AI, entering vehicle tasks will not start if the target <see cref="T:GTA.Vehicle"/>'s lock status is set to this value and the <see cref="T:GTA.Vehicle"/> has a driver.
            </summary>
            <remarks>
            <para>When a <see cref="T:GTA.Ped"/> is about to open the <see cref="T:GTA.Vehicle"/>'s door or the <see cref="T:GTA.Vehicle"/>'s driver instance is changed, the lock status will be set to <see cref="F:GTA.VehicleLockStatus.Unlocked"/>.</para>
            <para>AI <see cref="T:GTA.Ped"/>s can still get the driver out of the <see cref="T:GTA.Vehicle"/> to kill the driver, while players cannot do that even if given a task.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleLockStatus.CanBeBrokenInto">
            <summary>
            <para>Can be broken into the car. When a <see cref="T:GTA.Ped"/> breaks the window of the door the <see cref="T:GTA.Ped"/> is entering through, the value will be set to <see cref="F:GTA.VehicleLockStatus.Unlocked"/>.</para>
            <para>If the glass is broken when a <see cref="T:GTA.Ped"/> is about to open the <see cref="T:GTA.Vehicle"/>'s door, the value immediately will be set to <see cref="F:GTA.VehicleLockStatus.Unlocked"/>.</para>
            </summary>
        </member>
        <member name="F:GTA.VehicleLockStatus.CanBeBrokenIntoPersist">
            <summary>
            <para>The <see cref="T:GTA.Vehicle"/> is locked and must be broken into.</para>
            <para>Even if the door the <see cref="T:GTA.Ped"/> is entering through has its window broken, <see cref="T:GTA.Ped"/>s will always have to try to break it and enter the <see cref="T:GTA.Vehicle"/> consecutively.</para>
            </summary>
        </member>
        <member name="F:GTA.VehicleLockStatus.DriversSeatOnlyNoJacking">
            <summary>
            <para><see cref="T:GTA.Ped"/>s can only get in on the driver's seat normally only when the <see cref="T:GTA.Vehicle"/> does not have a driver.
            Warping into the <see cref="T:GTA.Vehicle"/> is the only way to make <see cref="T:GTA.Ped"/>s get in on any other seat.</para>
            <para><see cref="T:GTA.Ped"/>s cannot get any other <see cref="T:GTA.Ped"/>s out of the <see cref="T:GTA.Vehicle"/> to kill them.</para>
            </summary>
            <remarks>
            Changing the <see cref="T:GTA.Vehicle"/>'s lock status to this value does not immediately block <see cref="T:GTA.Ped"/>s' entering vehicle tasks.
            </remarks>
        </member>
        <member name="F:GTA.VehicleLockStatus.IgnoredByPlayer">
            <summary>Players cannot attempt to enter the <see cref="T:GTA.Vehicle"/> with the enter vehicle key or button.</summary>
        </member>
        <member name="F:GTA.VehicleLockStatus.StickPlayerInside">
            <summary>
            <para>The <see cref="T:GTA.Vehicle"/> is locked and must be broken into even if already broken into (the same as <see cref="F:GTA.VehicleLockStatus.CanBeBrokenIntoPersist"/>).</para>
            <para>Doesn't allow players to exit the <see cref="T:GTA.Vehicle"/> with the exit vehicle key or button.</para>
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.Vehicle">
            <summary>
            Gets the <see cref="P:GTA.VehicleWheel.Vehicle"/>this <see cref="T:GTA.VehicleWheel"/> belongs to.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.Index">
            <summary>
            Gets the index for native functions.
            Obsoleted in v3 API because there is no legiminate ways to get value from or modify any of the 4 wheels <c>wheel_lm2</c>, <c>wheel_rm2</c>, <c>wheel_lm3</c>, or <c>wheel_lm3</c> in native functions.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.BoneId">
            <summary>
            Gets the bone id this <see cref="T:GTA.VehicleWheel"/>.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.MemoryAddress">
            <summary>
            Gets the memory address where this <see cref="T:GTA.VehicleWheel"/> is stored in memory.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.LastContactPosition">
            <summary>
            Gets the last contact position.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.SteeringLimitMultiplier">
            <summary>
            Gets or sets the limit multiplier that affects how much this <see cref="T:GTA.VehicleWheel"/> can turn.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.Temperature">
            <summary>
            Gets or sets the temperature of <see cref="T:GTA.VehicleWheel"/>. This value rises when <see cref="P:GTA.VehicleWheel.Vehicle"/> is drifting, braking, or in burnout.
            If this value is kept at <c>59f</c> when <see cref="P:GTA.VehicleWheel.Vehicle"/> is on burnout for a short time, the tire will burst.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.IsTouchingSurface">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.VehicleWheel"/> is touching any surface.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.IsTireOnFire">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.VehicleWheel"/>'s tire is on fire.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.IsSteeringWheel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.VehicleWheel"/> is a steering wheel.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.IsDrivingWheel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.VehicleWheel"/> is a driving wheel.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.IsPunctured">
            <summary>
            Sets a value indicating whether this <see cref="T:GTA.VehicleWheel"/> is punctured.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.IsBursted">
            <summary>
            Sets a value indicating whether this <see cref="T:GTA.VehicleWheel"/> is bursted.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.Health">
            <summary>
            Gets or sets the wheel health.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.TireHealth">
            <summary>
            Gets or sets the tire health.
            If <see cref="P:GTA.VehicleWheel.WearMultiplier" /> is set to exactly <c>0f</c>, the value will default to <c>350f</c> if the value is positive and less than <c>1000f</c>.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.WearMultiplier">
            <summary>
            Gets or sets the value indicating how fast the tires will wear out. The higher this value is, the greater downforce will be created.
            <para>Only supported in v1.0.1868.0 and later versions. Will throw <see cref="T:GTA.GameVersionNotSupportedException"/> if the setter is called in earlier versions (the getter always returns <see langword="false"/> in earlier versions).</para>
            </summary>
            <exception cref="T:GTA.GameVersionNotSupportedException"></exception>
        </member>
        <member name="M:GTA.VehicleWheel.Fix">
            <summary>
            Fixes this <see cref="T:GTA.VehicleWheel"/>'s tire.
            </summary>
        </member>
        <member name="M:GTA.VehicleWheel.Fix(System.Boolean)">
            <summary>
            Fixes this <see cref="T:GTA.VehicleWheel"/>'s tire.
            </summary>
            <param name="leaveOtherBurstedTiresNotShowing">If set to <see langword="false"/>, bursted tires will appear again just like <c>SET_VEHICLE_TYRE_FIXED</c> does.</param>
        </member>
        <member name="M:GTA.VehicleWheel.Puncture(System.Single)">
            <summary>
            Punctures this <see cref="T:GTA.VehicleWheel"/>'s tire.
            </summary>
            <param name="damage">How much damage this <see cref="T:GTA.VehicleWheel"/> will take.</param>
        </member>
        <member name="M:GTA.VehicleWheel.Burst">
            <summary>
            Bursts this <see cref="T:GTA.VehicleWheel"/>'s tire completely.
            </summary>
        </member>
        <member name="M:GTA.VehicleWheelCollection.GetWheelByIndexOfCollection(System.Int32)">
            <summary>
            Gets the <see cref="T:GTA.VehicleWheel"/> by index.
            </summary>
            <param name="index">The index of the wheel collection. The order is the same as how the wheel array of the owner <see cref="P:GTA.VehicleWheelCollection.Vehicle"/> is aligned.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:GTA.VehicleWheelCollection.Vehicle">
            <summary>
            Gets the <see cref="P:GTA.VehicleWheelCollection.Vehicle"/>this <see cref="T:GTA.VehicleWheelCollection"/> belongs to.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheelCollection.Count">
            <summary>
            Gets the number of <see cref="T:GTA.VehicleWheel"/> this <see cref="T:GTA.VehicleWheelCollection"/> has. <c>0</c> will be returned if the owner vehicle does not exist.
            </summary>
        </member>
        <member name="M:GTA.VehicleWheelCollection.GetAllWheels">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.VehicleWheel"/>s this <see cref="T:GTA.VehicleWheelCollection"/> has.
            </summary>
        </member>
        <member name="P:GTA.Game.Player">
            <summary>
            Gets the <see cref="T:GTA.Player"/> that you are controlling.
            </summary>
        </member>
        <member name="P:GTA.Game.PlayerBlip">
            <summary>
            Gets the blip of the <see cref="T:GTA.Player"/> that you are controlling.
            </summary>
        </member>
        <member name="P:GTA.Game.NorthBlip">
            <summary>
            Gets the north blip, which is shown on the radar.
            </summary>
        </member>
        <member name="P:GTA.Game.Language">
            <summary>
            Gets the current game language.
            </summary>
        </member>
        <member name="P:GTA.Game.Version">
            <summary>
            Gets the version of the game.
            </summary>
        </member>
        <member name="P:GTA.Game.MeasurementSystem">
            <summary>
            Gets the measurement system the game uses to display.
            </summary>
        </member>
        <member name="P:GTA.Game.GameTime">
            <summary>
            Gets how many milliseconds the game has been open in this session
            </summary>
        </member>
        <member name="P:GTA.Game.TimeScale">
            <summary>
            Gets or Sets the time scale of the game.
            </summary>
            <value>
            The time scale, only accepts values in range 0.0f to 1.0f.
            </value>
        </member>
        <member name="P:GTA.Game.FrameCount">
            <summary>
            Gets the total number of frames that have been rendered in this session.
            </summary>
        </member>
        <member name="P:GTA.Game.FPS">
            <summary>
            Gets the current frame rate in frames per second.
            </summary>
        </member>
        <member name="P:GTA.Game.LastFrameTime">
            <summary>
            Gets the time in seconds it took for the last frame to render.
            </summary>
        </member>
        <member name="P:GTA.Game.MaxWantedLevel">
            <summary>
            Gets or sets the maximum wanted level a <see cref="T:GTA.Player"/> can receive.
            </summary>
            <value>
            The maximum wanted level, only accepts values 0 to 5.
            </value>
        </member>
        <member name="P:GTA.Game.RadioStation">
            <summary>
            Gets or sets the current radio station.
            </summary>
        </member>
        <member name="P:GTA.Game.IsNightVisionActive">
            <summary>
            Gets or sets a value indicating whether to render the world with a night vision filter.
            </summary>
        </member>
        <member name="P:GTA.Game.IsThermalVisionActive">
            <summary>
            Gets or sets a value indicating whether to render the world with a thermal vision filter.
            </summary>
        </member>
        <member name="P:GTA.Game.IsMissionActive">
            <summary>
            Gets or sets a value informing the engine if a mission is in progress.
            </summary>
        </member>
        <member name="P:GTA.Game.IsRandomEventActive">
            <summary>
            Gets or sets a value informing the engine if a random event is in progress.
            </summary>
        </member>
        <member name="P:GTA.Game.IsCutsceneActive">
            <summary>
            Gets a value indicating whether the cutscene is active.
            </summary>
        </member>
        <member name="P:GTA.Game.IsWaypointActive">
            <summary>
            Gets a value indicating whether there is a waypoint set on the map.
            </summary>
        </member>
        <member name="M:GTA.Game.DoAutoSave">
            <summary>
            Performs an automatic game save.
            </summary>
        </member>
        <member name="M:GTA.Game.ShowSaveMenu">
            <summary>
            Shows the save menu enabling the user to perform a manual game save.
            </summary>
        </member>
        <member name="P:GTA.Game.IsPaused">
            <summary>
            Gets or sets a value indicating whether the pause menu is active.
            </summary>
        </member>
        <member name="M:GTA.Game.Pause(System.Boolean)">
            <summary>
            Pause/resume the game.
            </summary>
            <param name="value">True/false for pause/resume.</param>
        </member>
        <member name="P:GTA.Game.IsLoading">
            <summary>
            Gets a value indicating whether there is a loading screen being displayed.
            </summary>
        </member>
        <member name="M:GTA.Game.GetUserInput(System.String)">
            <summary>
            Creates an input box for the user to input text using the keyboard.
            </summary>
            <param name="defaultText">The default text.</param>
            <returns>The <see cref="T:System.String"/> of what the user entered or <see cref="F:System.String.Empty"/> if the user canceled.</returns>
        </member>
        <member name="M:GTA.Game.GetUserInput(GTA.WindowTitle,System.String,System.Int32)">
            <summary>
            Creates an input box for the user to input text using the keyboard.
            </summary>
            <param name="windowTitle">The title of the input box window.</param>
            <param name="maxLength">The maximum length of text input allowed.</param>
            <param name="defaultText">The default text.</param>
            <returns>The <see cref="T:System.String"/> of what the user entered or <see cref="F:System.String.Empty"/> if the user canceled.</returns>
        </member>
        <member name="M:GTA.Game.WasCheatStringJustEntered(System.String)">
            <summary>
            Gets whether a cheat code was entered into the cheat text box.
            </summary>
            <param name="cheat">The name of the cheat to check.</param>
            <returns><see langword="true" /> if the cheat was just entered; otherwise, <see langword="false" /></returns>
        </member>
        <member name="M:GTA.Game.WasButtonCombinationJustEntered(GTA.Button[])">
            <summary>
            Gets whether a specific sequence of <see cref="T:GTA.Button"/>s has been pressed.
            </summary>
            <param name="buttons">The sequence of <see cref="T:GTA.Button"/>s in the order the user should enter them in-game.</param>
            <returns><see langword="true" /> if the combination was just entered; otherwise, <see langword="false" /></returns>
            <remarks>
            There must be between 6 and 29 inclusive <see cref="T:GTA.Button"/>s otherwise an <see cref="T:System.ArgumentException"/> is thrown.
            It only works for GamePad inputs. The in-game cheat combinations use the same system.
            </remarks>
        </member>
        <member name="P:GTA.Game.LastInputMethod">
            <summary>
            Gets whether the last input was made with a GamePad or keyboard and mouse.
            </summary>
        </member>
        <member name="P:GTA.Game.PlayerTargetingMode">
            <summary>
            Gets the current targeting mode of the local player.
            </summary>
        </member>
        <member name="P:GTA.Game.IsVibrationEnabled">
            <summary>
            Gets a value indicating whether the controller vibration is enabled.
            </summary>
        </member>
        <member name="M:GTA.Game.GetControlValue(GTA.Control)">
            <summary>
            Gets an analog value of a <see cref="T:GTA.Control"/> input.
            </summary>
            <param name="control">The <see cref="T:GTA.Control"/> to check.</param>
            <returns>The <see cref="T:GTA.Control"/> value.</returns>
        </member>
        <member name="M:GTA.Game.GetControlValueNormalized(GTA.Control)">
            <summary>
            Gets an analog value of a <see cref="T:GTA.Control"/> input between -1.0f and 1.0f.
            </summary>
            <param name="control">The <see cref="T:GTA.Control"/> to check.</param>
            <returns>The normalized <see cref="T:GTA.Control"/> value.</returns>
        </member>
        <member name="M:GTA.Game.GetDisabledControlValueNormalized(GTA.Control)">
            <summary>
            Gets an analog value of a disabled <see cref="T:GTA.Control"/> input between -1.0f and 1.0f.
            </summary>
            <param name="control">The <see cref="T:GTA.Control"/> to check.</param>
            <returns>The normalized <see cref="T:GTA.Control"/> value.</returns>
        </member>
        <member name="M:GTA.Game.SetControlValueNormalized(GTA.Control,System.Single)">
            <summary>
            Override a <see cref="T:GTA.Control"/> by giving it a user-defined value this frame.
            </summary>
            <param name="control">The <see cref="T:GTA.Control"/> to check.</param>
            <param name="value">the value to set the control to.</param>
        </member>
        <member name="M:GTA.Game.IsKeyPressed(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the specified key is currently held down.
            </summary>
            <param name="key">The key to check.</param>
        </member>
        <member name="M:GTA.Game.IsControlPressed(GTA.Control)">
            <summary>
            Gets whether a <see cref="T:GTA.Control"/> is currently pressed.
            </summary>
            <param name="control">The <see cref="T:GTA.Control"/> to check.</param>
            <returns><see langword="true" /> if the <see cref="T:GTA.Control"/> is pressed; otherwise, <see langword="false" /></returns>
        </member>
        <member name="M:GTA.Game.IsControlJustPressed(GTA.Control)">
            <summary>
            Gets whether a <see cref="T:GTA.Control"/> was just pressed this frame
            </summary>
            <param name="control">The <see cref="T:GTA.Control"/> to check.</param>
            <returns><see langword="true" /> if the <see cref="T:GTA.Control"/> was just pressed this frame; otherwise, <see langword="false" /></returns>
        </member>
        <member name="M:GTA.Game.IsControlJustReleased(GTA.Control)">
            <summary>
            Gets whether a <see cref="T:GTA.Control"/> was just released this frame
            </summary>
            <param name="control">The <see cref="T:GTA.Control"/> to check.</param>
            <returns><see langword="true" /> if the <see cref="T:GTA.Control"/> was just released this frame; otherwise, <see langword="false" /></returns>
        </member>
        <member name="M:GTA.Game.IsEnabledControlPressed(GTA.Control)">
            <summary>
            Gets whether a <see cref="T:GTA.Control"/> is enabled and currently pressed.
            </summary>
            <param name="control">The <see cref="T:GTA.Control"/> to check.</param>
            <returns><see langword="true" /> if the <see cref="T:GTA.Control"/> is pressed; otherwise, <see langword="false" /></returns>
        </member>
        <member name="M:GTA.Game.IsEnabledControlJustPressed(GTA.Control)">
            <summary>
            Gets whether a <see cref="T:GTA.Control"/> is enabled and was just pressed this frame.
            </summary>
            <param name="control">The <see cref="T:GTA.Control"/> to check.</param>
            <returns><see langword="true" /> if the <see cref="T:GTA.Control"/> was just pressed this frame; otherwise, <see langword="false" /></returns>
        </member>
        <member name="M:GTA.Game.IsEnabledControlJustReleased(GTA.Control)">
            <summary>
            Gets whether a <see cref="T:GTA.Control"/> is enabled and was just released this frame.
            </summary>
            <param name="control">The <see cref="T:GTA.Control"/> to check.</param>
            <returns><see langword="true" /> if the <see cref="T:GTA.Control"/> was just released this frame; otherwise, <see langword="false" /></returns>
        </member>
        <member name="M:GTA.Game.IsControlEnabled(GTA.Control)">
            <summary>
            Gets whether a <see cref="T:GTA.Control"/> is enabled or disabled this frame.
            </summary>
            <param name="control">The <see cref="T:GTA.Control"/> to check.</param>
            <returns><see langword="true" /> if the <see cref="T:GTA.Control"/> is Enabled; otherwise, <see langword="false" /></returns>
        </member>
        <member name="M:GTA.Game.EnableControlThisFrame(GTA.Control)">
            <summary>
            Makes the engine respond to the given <see cref="T:GTA.Control"/> this frame.
            </summary>
            <param name="control">The <see cref="T:GTA.Control"/> to enable..</param>
        </member>
        <member name="M:GTA.Game.DisableControlThisFrame(GTA.Control)">
            <summary>
            Makes the engine ignore input from the given <see cref="T:GTA.Control"/> this frame.
            </summary>
            <param name="control">The <see cref="T:GTA.Control"/>.</param>
        </member>
        <member name="M:GTA.Game.EnableAllControlsThisFrame">
            <summary>
            Enables all <see cref="T:GTA.Control"/>s this frame.
            </summary>
        </member>
        <member name="M:GTA.Game.DisableAllControlsThisFrame">
            <summary>
            Disables all <see cref="T:GTA.Control"/>s this frame.
            </summary>
        </member>
        <member name="M:GTA.Game.GenerateHash(System.String)">
            <summary>
            Calculates a Jenkins One At A Time hash from the given <see cref="T:System.String"/> which can then be used by any native function that takes a hash.
            Can be called in any thread.
            </summary>
            <param name="input">The input <see cref="T:System.String"/> to hash.</param>
            <returns>The Jenkins hash of the input <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:GTA.Game.GetLocalizedString(System.String)">
            <summary>
            Returns a localized <see cref="T:System.String"/> from the games language files with a specified GXT key.
            </summary>
            <param name="entry">The GXT key.</param>
            <returns>The localized <see cref="T:System.String"/> if the key exists; otherwise, <see cref="F:System.String.Empty"/></returns>
        </member>
        <member name="M:GTA.Game.GetLocalizedString(System.Int32)">
            <summary>
            Returns a localized <see cref="T:System.String"/> from the games language files with a specified GXT key hash.
            </summary>
            <param name="entryLabelHash">The GXT key hash.</param>
            <returns>The localized <see cref="T:System.String"/> if the key hash exists; otherwise, <see cref="F:System.String.Empty"/></returns>
        </member>
        <member name="M:GTA.Game.GetProfileSetting(System.Int32)">
            <summary>
            Gets an value associated with the specified index of the profile setting.
            </summary>
            <param name="index">The index of the profile setting values.</param>
            <returns>The integer value associated with the specified index of the profile setting.</returns>
        </member>
        <member name="M:GTA.Game.FindPattern(System.String,System.IntPtr)">
            <summary>
            Searches the address space of the current process for a memory pattern.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="startAddress">The address to start searching at. If <see cref="F:System.IntPtr.Zero" /> (<see langword="default" />), search is started at the base address.</param>
            <returns>The address of a region matching the pattern, or <see cref="F:System.IntPtr.Zero" /> if none was found.</returns>
            <remarks>This function takes the Cheat Engine/IDA format ("48 8B 0D ?? ?? ? ? 44 8B C6 8B D5 8B D8" for example, where ?? and ? are wildcards).</remarks>
        </member>
        <member name="M:GTA.Game.FindPattern(System.String,System.String,System.IntPtr)">
            <summary>
            Searches the address space of the current process for a memory pattern.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="mask">The pattern mask.</param>
            <param name="startAddress">The address to start searching at. If <see cref="F:System.IntPtr.Zero" /> (<see langword="default" />), search is started at the base address.</param>
            <returns>The address of a region matching the pattern, or <see cref="F:System.IntPtr.Zero" /> if none was found.</returns>
            <remarks>This function takes the classic format ("\x48\x8B\x0D\x00\x00\x00\x00\x44\x8B\xC6\x8B\xD5\x8B\xD8" as the pattern and "xxx????xxxxxxx" as the mask for example, where \x00 in the pattern and ? In the mask is a wildcard).</remarks>
        </member>
        <member name="P:GTA.GameplayCamera.MemoryAddress">
            <summary>
            Gets the memory address of the <see cref="T:GTA.GameplayCamera"/>.
            </summary>
        </member>
        <member name="P:GTA.GameplayCamera.Matrix">
            <summary>
            Gets the matrix of the <see cref="T:GTA.GameplayCamera"/>.
            </summary>
        </member>
        <member name="P:GTA.GameplayCamera.Position">
            <summary>
            Gets the position of the <see cref="T:GTA.GameplayCamera"/>.
            </summary>
        </member>
        <member name="P:GTA.GameplayCamera.Rotation">
            <summary>
            Gets the rotation of the <see cref="T:GTA.GameplayCamera"/>.
            </summary>
            <value>
            The yaw, pitch and roll rotations measured in degrees.
            </value>
        </member>
        <member name="P:GTA.GameplayCamera.Direction">
            <summary>
            Gets the direction the <see cref="T:GTA.GameplayCamera"/> is pointing in.
            </summary>
        </member>
        <member name="P:GTA.GameplayCamera.UpVector">
            <summary>
            Gets the up vector of the <see cref="T:GTA.GameplayCamera"/>.
            </summary>
        </member>
        <member name="P:GTA.GameplayCamera.RightVector">
            <summary>
            Gets the right vector of the <see cref="T:GTA.GameplayCamera"/>.
            </summary>
        </member>
        <member name="P:GTA.GameplayCamera.ForwardVector">
            <summary>
            Gets the forward vector of the <see cref="T:GTA.GameplayCamera"/>, see also <seealso cref="P:GTA.GameplayCamera.Direction"/>.
            </summary>
        </member>
        <member name="M:GTA.GameplayCamera.GetOffsetPosition(GTA.Math.Vector3)">
            <summary>
            Gets the position in world coordinates of an offset relative to the <see cref="T:GTA.GameplayCamera"/>.
            </summary>
            <param name="offset">The offset from the <see cref="T:GTA.GameplayCamera"/>.</param>
        </member>
        <member name="M:GTA.GameplayCamera.GetPositionOffset(GTA.Math.Vector3)">
            <summary>
            Gets the relative offset of the <see cref="T:GTA.GameplayCamera"/> from a world coordinates position.
            </summary>
            <param name="worldCoords">The world coordinates.</param>
        </member>
        <member name="M:GTA.GameplayCamera.ClampYaw(System.Single,System.Single)">
            <summary>
            Clamps the yaw of the <see cref="T:GTA.GameplayCamera"/>.
            </summary>
            <param name="min">The minimum yaw value.</param>
            <param name="max">The maximum yaw value.</param>
        </member>
        <member name="M:GTA.GameplayCamera.ClampPitch(System.Single,System.Single)">
            <summary>
            Clamps the pitch of the <see cref="T:GTA.GameplayCamera"/>.
            </summary>
            <param name="min">The minimum pitch value.</param>
            <param name="max">The maximum pitch value.</param>
        </member>
        <member name="P:GTA.GameplayCamera.RelativePitch">
            <summary>
            Gets or sets the relative pitch of the <see cref="T:GTA.GameplayCamera"/>.
            </summary>
        </member>
        <member name="P:GTA.GameplayCamera.RelativeHeading">
            <summary>
            Gets or sets the relative heading of the <see cref="T:GTA.GameplayCamera"/>.
            </summary>
        </member>
        <member name="P:GTA.GameplayCamera.Zoom">
            <summary>
            Gets the zoom of the <see cref="T:GTA.GameplayCamera"/>.
            </summary>
        </member>
        <member name="P:GTA.GameplayCamera.FieldOfView">
            <summary>
            Gets the field of view of the <see cref="T:GTA.GameplayCamera"/>.
            </summary>
        </member>
        <member name="P:GTA.GameplayCamera.IsRendering">
            <summary>
            Gets a value indicating whether the <see cref="T:GTA.GameplayCamera"/> is rendering.
            </summary>
            <value>
            <see langword="true" /> if the <see cref="T:GTA.GameplayCamera"/> is rendering; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.GameplayCamera.IsAimCamActive">
            <summary>
            Gets a value indicating whether the aiming camera is rendering.
            </summary>
            <value>
            <see langword="true" /> if the aiming camera is rendering; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.GameplayCamera.IsFirstPersonAimCamActive">
            <summary>
            Gets a value indicating whether the first person aiming camera is rendering.
            </summary>
            <value>
            <see langword="true" /> if the aiming camera is rendering; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.GameplayCamera.IsLookingBehind">
            <summary>
            Gets a value indicating whether the <see cref="T:GTA.GameplayCamera"/> is looking behind.
            </summary>
            <value>
            <see langword="true" /> if the <see cref="T:GTA.GameplayCamera"/> is looking behind; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.GameplayCamera.Shake(GTA.CameraShake,System.Single)">
            <summary>
            Shakes the <see cref="T:GTA.GameplayCamera"/>.
            </summary>
            <param name="shakeType">Type of the shake to apply.</param>
            <param name="amplitude">The amplitude of the shaking.</param>
        </member>
        <member name="M:GTA.GameplayCamera.StopShaking">
            <summary>
            Stops shaking the <see cref="T:GTA.GameplayCamera"/>.
            </summary>
        </member>
        <member name="P:GTA.GameplayCamera.IsShaking">
            <summary>
            Gets a value indicating whether the <see cref="T:GTA.GameplayCamera"/> is shaking.
            </summary>
            <value>
            <see langword="true" /> if the <see cref="T:GTA.GameplayCamera"/> is shaking; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.GameplayCamera.ShakeAmplitude">
            <summary>
            Sets the shake amplitude for the <see cref="T:GTA.GameplayCamera"/>.
            </summary>
        </member>
        <member name="F:GTA.GameVersion.v1_0_1737_0_Steam">
            <summary>
            This value also represents the exe version 1.0.1734.0 for Steam version. 1.0.1737.0 basically works in the same way as 1.0.1734.0 but with bug fixes.
            </summary>
        </member>
        <member name="F:GTA.GameVersion.v1_0_1737_0_NoSteam">
            <summary>
            This value also represents the exe version 1.0.1734.0 for non-Steam version. 1.0.1737.0 basically works in the same way as 1.0.1734.0 but with bug fixes.
            </summary>
        </member>
        <member name="F:GTA.GameVersion.v1_0_2372_0_Steam">
            <summary>
            This value also represents the exe version 1.0.2372.2 for Steam version. 1.0.2372.2 basically works in the same way as 1.0.2372.0 but with bug fixes.
            </summary>
        </member>
        <member name="F:GTA.GameVersion.v1_0_2372_0_NoSteam">
            <summary>
            This value also represents the exe version 1.0.2372.2 for non-Steam version. 1.0.2372.2 basically works in the same way as 1.0.2372.0 but with bug fixes.
            </summary>
        </member>
        <member name="F:GTA.IntersectFlags.PedCapsules">
            <summary>
            Detect <see cref="T:GTA.Ped"/> who are not ragdolled (not running any NM tasks) by detecting the simple capsule shape of <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.IntersectFlags.Ragdolls">
            <summary>
            Detect <see cref="T:GTA.Ped"/>'s ragdoll. Can detect those who are not ragdolled.
            </summary>
        </member>
        <member name="F:GTA.IntersectFlags.Foliage">
            <summary>
            Detect foliage, which can be affected by the wind or contacts of <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="F:GTA.Language.Chinese">
            <summary>Traditional Chinese</summary>
        </member>
        <member name="P:GTA.ParticleEffect.MemoryAddress">
            <summary>
            Gets the memory address where this <see cref="T:GTA.ParticleEffect"/> is located in game memory.
            </summary>
        </member>
        <member name="P:GTA.ParticleEffect.Entity">
            <summary>
            Gets the <see cref="T:GTA.Entity"/> this <see cref="T:GTA.ParticleEffect"/> is attached to or <see langword="null" /> if there is none.
            </summary>
        </member>
        <member name="P:GTA.ParticleEffect.Bone">
            <summary>
            Gets the <see cref="T:GTA.EntityBone"/> that this <see cref="T:GTA.ParticleEffect"/> is attached to or <see langword="null" /> if there is none.
            </summary>
        </member>
        <member name="P:GTA.ParticleEffect.AssetName">
            <summary>
            Gets the name of the asset used for this <see cref="T:GTA.ParticleEffect"/>.
            </summary>
        </member>
        <member name="P:GTA.ParticleEffect.EffectName">
            <summary>
            Gets the name of the effect used for this <see cref="T:GTA.ParticleEffect"/>.
            </summary>
        </member>
        <member name="P:GTA.ParticleEffect.Offset">
            <summary>
            Gets or sets the offset.
            If this <see cref="T:GTA.ParticleEffect"/> is attached to an <see cref="P:GTA.ParticleEffect.Entity"/>, this refers to the offset from the <see cref="P:GTA.ParticleEffect.Entity"/>;
            otherwise, this refers to its position in World coordinates
            </summary>
        </member>
        <member name="P:GTA.ParticleEffect.Rotation">
            <summary>
            Sets the rotation of this <see cref="T:GTA.ParticleEffect"/>
            </summary>
        </member>
        <member name="P:GTA.ParticleEffect.Color">
            <summary>
            Gets or sets the <see cref="P:GTA.ParticleEffect.Color"/> of this <see cref="T:GTA.ParticleEffect"/>.
            </summary>
        </member>
        <member name="P:GTA.ParticleEffect.Scale">
            <summary>
            Gets or sets the size scaling factor of this <see cref="T:GTA.ParticleEffect"/>.
            </summary>
            <value>
            The scale, default = 1.0f;
            To Decrease the size use a value less than 1.0f;
            To Increase the size use a value greater than 1.0f;
            </value>
        </member>
        <member name="P:GTA.ParticleEffect.Range">
            <summary>
            Gets or sets the range of this <see cref="T:GTA.ParticleEffect"/>.
            </summary>
        </member>
        <member name="M:GTA.ParticleEffect.SetParameter(System.String,System.Single)">
            <summary>
            Modifys parameters of this <see cref="T:GTA.ParticleEffect"/>.
            </summary>
            <param name="parameterName">Name of the parameter you want to modify, these are stored inside the effect files.</param>
            <param name="value">The new value for the parameter.</param>
        </member>
        <member name="M:GTA.ParticleEffect.Delete">
            <summary>
            Stops and removes this <see cref="T:GTA.ParticleEffect"/>.
            </summary>
        </member>
        <member name="M:GTA.ParticleEffect.Exists">
            <summary>
            Determines if this <see cref="T:GTA.Checkpoint"/> exists.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.Checkpoint"/> exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.ParticleEffect.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same effect as this <see cref="T:GTA.ParticleEffect"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same effect as this <see cref="T:GTA.ParticleEffect"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.ParticleEffect.op_Equality(GTA.ParticleEffect,GTA.ParticleEffect)">
            <summary>
            Determines if two <see cref="T:GTA.ParticleEffect"/>s refer to the same effect.
            </summary>
            <param name="left">The left <see cref="T:GTA.ParticleEffect"/>.</param>
            <param name="right">The right <see cref="T:GTA.ParticleEffect"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same effect as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.ParticleEffect.op_Inequality(GTA.ParticleEffect,GTA.ParticleEffect)">
            <summary>
            Determines if two <see cref="T:GTA.ParticleEffect"/>s don't refer to the same effect.
            </summary>
            <param name="left">The left <see cref="T:GTA.ParticleEffect"/>.</param>
            <param name="right">The right <see cref="T:GTA.ParticleEffect"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same effect as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.ParticleEffect.op_Implicit(GTA.ParticleEffect)~GTA.Native.InputArgument">
            <summary>
            Converts a <see cref="T:GTA.ParticleEffect"/> to a native input argument.
            </summary>
        </member>
        <member name="M:GTA.ParticleEffectAsset.#ctor(System.String)">
            <summary>
            Creates a class used for loading <see cref="T:GTA.ParticleEffectAsset"/>s than can be used to start <see cref="T:GTA.ParticleEffect"/>s from inside the Asset
            </summary>
            <param name="assetName">The name of the asset file which contains all the <see cref="T:GTA.ParticleEffect"/>s you are wanting to start</param>
            <remarks>The files have the extension *.ypt in OpenIV, use the file name withouth the extension for the <paramref name="assetName"/></remarks>
        </member>
        <member name="P:GTA.ParticleEffectAsset.IsLoaded">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.ParticleEffectAsset"/> is Loaded
            </summary>
            <remarks>Use <see cref="M:GTA.ParticleEffectAsset.Request"/> or <see cref="M:GTA.ParticleEffectAsset.Request(System.Int32)"/> to load the asset</remarks>
        </member>
        <member name="P:GTA.ParticleEffectAsset.AssetName">
            <summary>
            Gets the name of the this <see cref="T:GTA.ParticleEffectAsset"/> file.
            </summary>
        </member>
        <member name="P:GTA.ParticleEffectAsset.NonLoopedColor">
            <summary>
            Sets the <see cref="T:System.Drawing.Color"/> for all NonLooped Particle Effects
            </summary>
        </member>
        <member name="M:GTA.ParticleEffectAsset.UseNext">
            <summary>
            Make this the current particle asset.
            </summary>
        </member>
        <member name="M:GTA.ParticleEffectAsset.Request">
            <summary>
            Attempts to load this <see cref="T:GTA.ParticleEffectAsset"/> into memory so it can be used for starting <see cref="T:GTA.ParticleEffect"/>s.
            </summary>
        </member>
        <member name="M:GTA.ParticleEffectAsset.Request(System.Int32)">
            <summary>
            Attempts to load this <see cref="T:GTA.ParticleEffectAsset"/> into memory so it can be used for starting <see cref="T:GTA.ParticleEffect"/>s.
            </summary>
            <param name="timeout">How long in milliseconds should the game wait while the model hasn't been loaded before giving up</param>
            <returns><see langword="true" /> if the <see cref="T:GTA.ParticleEffectAsset"/> is Loaded; otherwise, <see langword="false" /></returns>
        </member>
        <member name="M:GTA.ParticleEffectAsset.MarkAsNoLongerNeeded">
            <summary>
            Tells the game we have finished using this <see cref="T:GTA.ParticleEffectAsset"/> and it can be freed from memory.
            </summary>
        </member>
        <member name="M:GTA.ParticleEffectAsset.op_Implicit(GTA.ParticleEffectAsset)~GTA.Native.InputArgument">
            <summary>
            Converts a <see cref="T:GTA.ParticleEffectAsset"/> to a native input argument.
            </summary>
        </member>
        <member name="P:GTA.Pickup.Position">
            <summary>
            The position of this <see cref="T:GTA.Pickup"/>.
            </summary>
        </member>
        <member name="P:GTA.Pickup.IsCollected">
            <summary>
            Gets if this <see cref="T:GTA.Pickup"/> has been collected.
            </summary>
        </member>
        <member name="M:GTA.Pickup.ObjectExists">
            <summary>
            Determines if the object of this <see cref="T:GTA.Pickup"/> exists.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GTA.Pickup.Delete">
            <summary>
            Destroys this <see cref="T:GTA.Pickup"/>.
            </summary>
        </member>
        <member name="M:GTA.Pickup.Exists">
            <summary>
            Determines if this <see cref="T:GTA.Pickup"/> exists.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.Pickup"/> exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Pickup.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same pickup as this <see cref="T:GTA.Pickup"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same pickup as this <see cref="T:GTA.Pickup"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Pickup.op_Equality(GTA.Pickup,GTA.Pickup)">
            <summary>
            Determines if two <see cref="T:GTA.Pickup"/>s refer to the same pickup.
            </summary>
            <param name="left">The left <see cref="T:GTA.Pickup"/>.</param>
            <param name="right">The right <see cref="T:GTA.Pickup"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same pickup as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Pickup.op_Inequality(GTA.Pickup,GTA.Pickup)">
            <summary>
            Determines if two <see cref="T:GTA.Pickup"/>s don't refer to the same pickup.
            </summary>
            <param name="left">The left <see cref="T:GTA.Pickup"/>.</param>
            <param name="right">The right <see cref="T:GTA.Pickup"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same pickup as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Pickup.op_Implicit(GTA.Pickup)~GTA.Native.InputArgument">
            <summary>
            Converts a <see cref="T:GTA.Pickup"/> to a native input argument.
            </summary>
        </member>
        <member name="P:GTA.Player.Character">
            <summary>
            Gets the <see cref="T:GTA.Ped"/> this <see cref="T:GTA.Player"/> is controlling.
            </summary>
        </member>
        <member name="P:GTA.Player.Name">
            <summary>
            Gets the Social Club name of this <see cref="T:GTA.Player"/>.
            </summary>
        </member>
        <member name="P:GTA.Player.Money">
            <summary>
            Gets or sets how much money this <see cref="T:GTA.Player"/> has.
            <remarks>Only works if current player is <see cref="F:GTA.PedHash.Michael"/>, <see cref="F:GTA.PedHash.Franklin"/> or <see cref="F:GTA.PedHash.Trevor"/></remarks>
            </summary>
        </member>
        <member name="P:GTA.Player.WantedLevel">
            <summary>
            Gets or sets the wanted level for this <see cref="T:GTA.Player"/>.
            </summary>
        </member>
        <member name="P:GTA.Player.WantedCenterPosition">
            <summary>
            Gets or sets the wanted center position for this <see cref="T:GTA.Player"/>.
            </summary>
            <value>
            The place in world coordinates where the police think this <see cref="T:GTA.Player"/> is.
            </value>
        </member>
        <member name="P:GTA.Player.MaxArmor">
            <summary>
            Gets or sets the maximum amount of armor this <see cref="T:GTA.Player"/> can carry.
            </summary>
        </member>
        <member name="P:GTA.Player.PrimaryParachuteTint">
            <summary>
            Gets or sets the primary parachute tint for this <see cref="T:GTA.Player"/>.
            </summary>
        </member>
        <member name="P:GTA.Player.ReserveParachuteTint">
            <summary>
            Gets or sets the reserve parachute tint for this <see cref="T:GTA.Player"/>.
            </summary>
        </member>
        <member name="P:GTA.Player.CanLeaveParachuteSmokeTrail">
            <summary>
            Sets a value indicating whether this <see cref="T:GTA.Player"/> can leave a parachute smoke trail.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Player"/> can leave a parachute smoke trail; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.ParachuteSmokeTrailColor">
            <summary>
            Gets or sets the color of the parachute smoke trail for this <see cref="T:GTA.Player"/>.
            </summary>
            <value>
            The color of the parachute smoke trail for this <see cref="T:GTA.Player"/>.
            </value>
        </member>
        <member name="P:GTA.Player.IsDead">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Player"/> is dead.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Player"/> is dead; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.IsAlive">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Player"/> is alive.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Player"/> is alive; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.IsAiming">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Player"/> is aiming.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Player"/> is aiming; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.IsClimbing">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Player"/> is climbing.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Player"/> is climbing; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.IsRidingTrain">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Player"/> is riding a train.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Player"/> is riding a train; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.IsPressingHorn">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Player"/> is pressing a horn.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Player"/> is pressing a horn; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.IsPlaying">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Player"/> is playing.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Player"/> is playing; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.IsInvincible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Player"/> is invincible.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Player"/> is invincible; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.IgnoredByPolice">
            <summary>
            Sets a value indicating whether this <see cref="T:GTA.Player"/> is ignored by the police.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Player"/> is ignored by the police; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.IgnoredByEveryone">
            <summary>
            Sets a value indicating whether this <see cref="T:GTA.Player"/> is ignored by everyone.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Player"/> is ignored by everyone; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.DispatchsCops">
            <summary>
            Sets a value indicating whether cops will be dispatched for this <see cref="T:GTA.Player"/>
            </summary>
            <value>
              <see langword="true" /> if cops will be dispatched; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.CanUseCover">
            <summary>
            Sets a value indicating whether this <see cref="T:GTA.Player"/> can use cover.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Player"/> can use cover; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.CanStartMission">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Player"/> can start a mission.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Player"/> can start a mission; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.CanControlRagdoll">
            <summary>
            Sets a value indicating whether this <see cref="T:GTA.Player"/> can control ragdoll.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Player"/> can control ragdoll; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.CanControlCharacter">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Player"/> can control its <see cref="T:GTA.Ped"/>.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Player"/> can control its <see cref="T:GTA.Ped"/>; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.Player.ChangeModel(GTA.Model)">
            <summary>
            Attempts to change the <see cref="T:GTA.Model"/> of this <see cref="T:GTA.Player"/>.
            </summary>
            <param name="model">The <see cref="T:GTA.Model"/> to change this <see cref="T:GTA.Player"/> to.</param>
            <returns><see langword="true" /> if the change was successful; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:GTA.Player.RemainingSprintTime">
            <summary>
            Gets how long this <see cref="T:GTA.Player"/> can remain sprinting for.
            </summary>
        </member>
        <member name="P:GTA.Player.RemainingSprintStamina">
            <summary>
            Gets how much sprint stamina this <see cref="T:GTA.Player"/> currently has.
            </summary>
        </member>
        <member name="P:GTA.Player.RemainingUnderwaterTime">
            <summary>
            Gets how long this <see cref="T:GTA.Player"/> can stay underwater before they start losing health.
            </summary>
        </member>
        <member name="P:GTA.Player.IsSpecialAbilityActive">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Player"/> is using their special ability.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Player"/> is using their special ability; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.IsSpecialAbilityEnabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Player"/> can use their special ability.
            </summary>
            <value>
            <see langword="true" /> if this  <see cref="T:GTA.Player"/> can use their special ability; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.Player.ChargeSpecialAbility(System.Int32)">
            <summary>
            Charges the special ability for this <see cref="T:GTA.Player"/>.
            </summary>
            <param name="absoluteAmount">The absolute amount.</param>
        </member>
        <member name="M:GTA.Player.ChargeSpecialAbility(System.Single)">
            <summary>
            Charges the special ability for this <see cref="T:GTA.Player"/>.
            </summary>
            <param name="normalizedRatio">The amount between <c>0.0f</c> and <c>1.0f</c></param>
        </member>
        <member name="M:GTA.Player.RefillSpecialAbility">
            <summary>
            Refills the special ability for this <see cref="T:GTA.Player"/>.
            </summary>
        </member>
        <member name="M:GTA.Player.DepleteSpecialAbility">
            <summary>
            Depletes the special ability for this <see cref="T:GTA.Player"/>.
            </summary>
        </member>
        <member name="P:GTA.Player.LastVehicle">
            <summary>
            Gets the last <see cref="T:GTA.Vehicle"/> this <see cref="T:GTA.Player"/> used.
            </summary>
            <remarks>returns <see langword="null" /> if the last vehicle doesn't exist.</remarks>
        </member>
        <member name="M:GTA.Player.IsTargeting(GTA.Entity)">
            <summary>
            Determines whether this <see cref="T:GTA.Player"/> is targeting the specified <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:GTA.Entity"/> to check.</param>
            <returns>
              <see langword="true" /> if this <see cref="T:GTA.Player"/> is targeting the specified <see cref="T:GTA.Entity"/>; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="P:GTA.Player.IsTargetingAnything">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Player"/> is targeting anything.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Player"/> is targeting anything; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.TargetedEntity">
            <summary>
            Gets the <see cref="T:GTA.Entity"/> this <see cref="T:GTA.Player"/> is free aiming.
            </summary>
            <returns>The <see cref="T:GTA.Entity"/> if this <see cref="T:GTA.Player"/> is free aiming any <see cref="T:GTA.Entity"/>; otherwise, <see langword="null" /></returns>
        </member>
        <member name="P:GTA.Player.LockedOnEntity">
            <summary>
            Gets the <see cref="T:GTA.Entity"/> this <see cref="T:GTA.Player"/> is locking on when they are aiming with a firearm using a controller or they are locking on unarmed or with a melee weapon.
            </summary>
            <returns>The <see cref="T:GTA.Entity"/> if this <see cref="T:GTA.Player"/> is automatically locking on any <see cref="T:GTA.Entity"/>; otherwise, <see langword="null" /></returns>
        </member>
        <member name="P:GTA.Player.ForcedAim">
            <summary>
            Sets a value indicating whether the player is forced to aim.
            </summary>
            <value>
              <see langword="true" /> to make the player always be aiming; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.Player.DisableFiringThisFrame">
            <summary>
            Prevents this <see cref="T:GTA.Player"/> firing this frame.
            </summary>
        </member>
        <member name="M:GTA.Player.SetRunSpeedMultThisFrame(System.Single)">
            <summary>
            Sets the run speed multiplier for this <see cref="T:GTA.Player"/> this frame.
            </summary>
            <param name="mult">The factor - min: <c>0.0f</c>, default: <c>1.0f</c>, max: <c>1.499f</c>.</param>
        </member>
        <member name="M:GTA.Player.SetSwimSpeedMultThisFrame(System.Single)">
            <summary>
            Sets the swim speed multiplier for this <see cref="T:GTA.Player"/> this frame.
            </summary>
            <param name="mult">The factor - min: <c>0.0f</c>, default: <c>1.0f</c>, max: <c>1.499f</c>.</param>
        </member>
        <member name="M:GTA.Player.SetFireAmmoThisFrame">
            <summary>
            Makes this <see cref="T:GTA.Player"/> shoot fire bullets this frame.
            </summary>
        </member>
        <member name="M:GTA.Player.SetExplosiveAmmoThisFrame">
            <summary>
            Makes this <see cref="T:GTA.Player"/> shoot explosive bullets this frame.
            </summary>
        </member>
        <member name="M:GTA.Player.SetExplosiveMeleeThisFrame">
            <summary>
            Makes this <see cref="T:GTA.Player"/> have an explosive melee attack this frame.
            </summary>
        </member>
        <member name="M:GTA.Player.SetSuperJumpThisFrame">
            <summary>
            Lets this <see cref="T:GTA.Player"/> jump really high this frame.
            </summary>
        </member>
        <member name="M:GTA.Player.SetMayNotEnterAnyVehicleThisFrame">
            <summary>
            Blocks this <see cref="T:GTA.Player"/> from entering any <see cref="T:GTA.Vehicle"/> this frame.
            </summary>
        </member>
        <member name="M:GTA.Player.SetMayOnlyEnterThisVehicleThisFrame(GTA.Vehicle)">
            <summary>
            Only lets this <see cref="T:GTA.Player"/> enter a specific <see cref="T:GTA.Vehicle"/> this frame.
            </summary>
            <param name="vehicle">The <see cref="T:GTA.Vehicle"/> this <see cref="T:GTA.Player"/> is allowed to enter.</param>
        </member>
        <member name="M:GTA.Player.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same player as this <see cref="T:GTA.Player"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same player as this <see cref="T:GTA.Player"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Player.op_Equality(GTA.Player,GTA.Player)">
            <summary>
            Determines if two <see cref="T:GTA.Player"/>s refer to the same player.
            </summary>
            <param name="left">The left <see cref="T:GTA.Player"/>.</param>
            <param name="right">The right <see cref="T:GTA.Player"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same player as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Player.op_Inequality(GTA.Player,GTA.Player)">
            <summary>
            Determines if two <see cref="T:GTA.Player"/>s don't refer to the same player.
            </summary>
            <param name="left">The left <see cref="T:GTA.Player"/>.</param>
            <param name="right">The right <see cref="T:GTA.Player"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same player as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Player.op_Implicit(GTA.Player)~GTA.Native.InputArgument">
            <summary>
            Converts a <see cref="T:GTA.Player"/> to a native input argument.
            </summary>
        </member>
        <member name="T:GTA.ISpatial">
            <summary>
            An object with position and rotation information.
            </summary>
        </member>
        <member name="T:GTA.IExistable">
            <summary>
            An object that can exist in the world.
            </summary>
        </member>
        <member name="T:GTA.IDeletable">
            <summary>
            An object that can be deleted from the world.
            </summary>
        </member>
        <member name="T:GTA.PoolObject">
            <summary>
            An object that resides in one of the available object pools.
            </summary>
        </member>
        <member name="P:GTA.PoolObject.Handle">
            <summary>
            The handle of the object.
            </summary>
        </member>
        <member name="P:GTA.PoolObject.NativeValue">
            <summary>
            The handle of the object translated to a native value.
            </summary>
        </member>
        <member name="M:GTA.InteriorProxy.FromHandle(System.Int32)">
            <summary>
            Creates a new instance of an <see cref="T:GTA.InteriorProxy"/> from the given handle.
            </summary>
            <param name="handle">The interior proxy handle.</param>
            <returns>
            Returns a <see cref="T:GTA.InteriorProxy"/> if this handle corresponds to a <see cref="T:GTA.InteriorProxy"/>.
            Returns <see langword="null" /> if no <see cref="T:GTA.Entity"/> exists this the specified <paramref name="handle"/>
            </returns>
        </member>
        <member name="P:GTA.InteriorProxy.Handle">
            <summary>
            The handle of this <see cref="T:GTA.InteriorProxy"/>.
            </summary>
        </member>
        <member name="P:GTA.InteriorProxy.NativeValue">
            <summary>
            The handle of this <see cref="T:GTA.InteriorProxy"/> translated to a native value.
            </summary>
        </member>
        <member name="P:GTA.InteriorProxy.MemoryAddress">
            <summary>
            Gets the memory address where the <see cref="T:GTA.InteriorProxy"/> is stored in memory.
            </summary>
        </member>
        <member name="P:GTA.InteriorProxy.Position">
            <summary>
            Gets or sets the position of this <see cref="T:GTA.AnimatedBuilding"/>.
            </summary>
            <value>
            The position in world space.
            </value>
        </member>
        <member name="P:GTA.InteriorProxy.CurrentInteriorInstance">
            <summary>
            Gets the current <see cref="T:GTA.InteriorInstance"/> this <see cref="T:GTA.InteriorProxy"/> is using.
            </summary>
            <remarks>returns <see langword="null" /> if this <see cref="T:GTA.InteriorProxy"/> is not using any <see cref="T:GTA.InteriorInstance"/>.</remarks>
        </member>
        <member name="P:GTA.InteriorProxy.Model">
            <summary>
            Gets the model this <see cref="T:GTA.InteriorProxy"/> will load.
            </summary>
        </member>
        <member name="P:GTA.InteriorProxy.IsDisabled">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.InteriorProxy"/> will behave as if interior is not loaded completely.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.InteriorProxy"/> will behave as if interior is not loaded completely; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.InteriorProxy.IsCapped">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.InteriorProxy"/> will only load a few elements of the interior.
            Doors can be loaded and the collision is not necessarily completely disabled (e.g. collisions for bullets and projectiles can work).
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.InteriorProxy"/> will only load a few elements of the interior; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.InteriorProxy.Refresh">
            <summary>
            Refreshs the current <see cref="T:GTA.InteriorInstance"/> if loaded. Does not change the memory address or handle of the <see cref="T:GTA.InteriorInstance"/>.
            </summary>
        </member>
        <member name="M:GTA.InteriorProxy.Disable(System.Boolean)">
            <summary>
            Disables the interior, making <see cref="T:GTA.InteriorProxy"/> behave as if interior is not loaded completely. Does not prevent from having a <see cref="T:GTA.InteriorInstance"/>.
            Does nothing if the player <see cref="T:GTA.Ped"/> is in this <see cref="T:GTA.InteriorProxy"/>.
            </summary>
        </member>
        <member name="M:GTA.InteriorProxy.Cap(System.Boolean)">
            <summary>
            Caps the interior so this <see cref="T:GTA.InteriorProxy"/> will only load a few elements of the interior.
            Does nothing if the player <see cref="T:GTA.Ped"/> is in this <see cref="T:GTA.InteriorProxy"/>.
            </summary>
        </member>
        <member name="M:GTA.InteriorProxy.PinInMemory">
            <summary>
            Makes this <see cref="T:GTA.InteriorProxy"/> keep the <see cref="T:GTA.InteriorProxy"/> this <see cref="T:GTA.InteriorProxy"/> is loaded.
            </summary>
        </member>
        <member name="M:GTA.InteriorProxy.UnpinFromMemory">
            <summary>
            Lets this <see cref="T:GTA.InteriorProxy"/> free the <see cref="T:GTA.InteriorProxy"/> this <see cref="T:GTA.InteriorProxy"/> is loaded.
            </summary>
        </member>
        <member name="M:GTA.InteriorProxy.GetInteriorProxyFromGameplayCam">
            <summary>
            Gets the <see cref="T:GTA.InteriorProxy"/> if the gameplay camera is in a interior.
            </summary>
            <remarks>returns <see langword="null" /> if the gameplay camera is not in any interior space.</remarks>
        </member>
        <member name="M:GTA.InteriorProxy.Exists">
            <summary>
            Determines if this <see cref="T:GTA.InteriorProxy"/> exists.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.InteriorProxy"/> exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.InteriorProxy.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same entity as this <see cref="T:GTA.InteriorProxy"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same entity as this <see cref="T:GTA.InteriorProxy"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.InteriorProxy.op_Equality(GTA.InteriorProxy,GTA.InteriorProxy)">
            <summary>
            Determines if two <see cref="T:GTA.InteriorProxy"/>s refer to the same entity.
            </summary>
            <param name="left">The left <see cref="T:GTA.InteriorProxy"/>.</param>
            <param name="right">The right <see cref="T:GTA.InteriorProxy"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same entity as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.InteriorProxy.op_Inequality(GTA.InteriorProxy,GTA.InteriorProxy)">
            <summary>
            Determines if two <see cref="T:GTA.Entity"/>s don't refer to the same entity.
            </summary>
            <param name="left">The left <see cref="T:GTA.Entity"/>.</param>
            <param name="right">The right <see cref="T:GTA.Entity"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same entity as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.InteriorProxy.op_Implicit(GTA.InteriorProxy)~GTA.Native.InputArgument">
            <summary>
            Converts an <see cref="T:GTA.Entity"/> to a native input argument.
            </summary>
        </member>
        <member name="M:GTA.EntityDamageRecordCollection.GetAllDamageRecords">
            <summary>
            Gets all the <see cref="T:GTA.EntityDamageRecord" /> at the moment.
            The return array can contain up to 3 <see cref="T:GTA.EntityDamageRecord" />s.
            </summary>
        </member>
        <member name="P:GTA.RaycastResult.Result">
            <summary>
            Gets the result code.
            </summary>
        </member>
        <member name="P:GTA.RaycastResult.DidHit">
            <summary>
            Gets a value indicating whether this ray cast collided with anything.
            </summary>
        </member>
        <member name="P:GTA.RaycastResult.HitEntity">
            <summary>
            Gets the <see cref="T:GTA.Entity" /> this ray cast collided with.
            <remarks>Returns <see langword="null" /> if the ray cast didn't collide with any <see cref="T:GTA.Entity"/>.</remarks>
            </summary>
        </member>
        <member name="P:GTA.RaycastResult.HitPosition">
            <summary>
            Gets the world coordinates where this ray cast collided.
            <remarks>Returns <see cref="P:GTA.Math.Vector3.Zero"/> if the ray cast didn't collide with anything.</remarks>
            </summary>
        </member>
        <member name="P:GTA.RaycastResult.SurfaceNormal">
            <summary>
            Gets the normal of the surface where this ray cast collided.
            <remarks>Returns <see cref="P:GTA.Math.Vector3.Zero"/> if the ray cast didn't collide with anything.</remarks>
            </summary>
        </member>
        <member name="P:GTA.RaycastResult.MaterialHash">
            <summary>
            Gets a hash indicating the material type of what this ray cast collided with.
            <remarks>Returns <see cref="F:GTA.MaterialHash.None"/> if the ray cast didn't collide with anything.</remarks>
            </summary>
        </member>
        <member name="P:GTA.Rope.VertexCount">
            <summary>
            Gets the number of vertices of this <see cref="T:GTA.Rope"/>.
            </summary>
        </member>
        <member name="P:GTA.Rope.Length">
            <summary>
            Gets or sets the length of this <see cref="T:GTA.Rope"/>.
            </summary>
        </member>
        <member name="M:GTA.Rope.ActivatePhysics">
            <summary>
            Activates physics interactions for this <see cref="T:GTA.Rope"/>.
            </summary>
        </member>
        <member name="M:GTA.Rope.Attach(GTA.Entity)">
            <summary>
            Attaches a single <see cref="T:GTA.Entity"/> to this <see cref="T:GTA.Rope"/>.
            </summary>
            <param name="entity">The entity to attach.</param>
        </member>
        <member name="M:GTA.Rope.Attach(GTA.Entity,GTA.Math.Vector3)">
            <summary>
            Attaches a single <see cref="T:GTA.Entity"/> to this <see cref="T:GTA.Rope"/> at the specified <paramref name="position"/>.
            </summary>
            <param name="entity">The entity to attach.</param>
            <param name="position">The position in world coordinates to attach to.</param>
        </member>
        <member name="M:GTA.Rope.Detach(GTA.Entity)">
            <summary>
            Detaches a single <see cref="T:GTA.Entity"/> from this <see cref="T:GTA.Rope"/>.
            </summary>
            <param name="entity">The entity to detach.</param>
        </member>
        <member name="M:GTA.Rope.Connect(GTA.Entity,GTA.Entity,System.Single)">
            <summary>
            Connects two <see cref="T:GTA.Entity"/>s with this <see cref="T:GTA.Rope"/>.
            </summary>
            <param name="entity1">The first entity to attach.</param>
            <param name="entity2">The second entity to attach.</param>
            <param name="length">The rope length.</param>
        </member>
        <member name="M:GTA.Rope.Connect(GTA.Entity,GTA.Math.Vector3,GTA.Entity,GTA.Math.Vector3,System.Single)">
            <summary>
            Connects two <see cref="T:GTA.Entity"/>s with this <see cref="T:GTA.Rope"/> at the specified positions.
            </summary>
            <param name="entity1">The first entity to attach.</param>
            <param name="entity2">The second entity to attach.</param>
            <param name="position1">The position in world coordinates to attach the first entity to.</param>
            <param name="position2">The position in world coordinates to attach the second entity to.</param>
            <param name="length">The rope length.</param>
        </member>
        <member name="M:GTA.Rope.PinVertex(System.Int32,GTA.Math.Vector3)">
            <summary>
            Pin a vertex of this <see cref="T:GTA.Rope"/> to a <paramref name="position"/>.
            </summary>
            <param name="vertex">The index of the vertex.</param>
            <param name="position">The position in world coordinates to pin to.</param>
        </member>
        <member name="M:GTA.Rope.UnpinVertex(System.Int32)">
            <summary>
            Unpin a vertex of this <see cref="T:GTA.Rope"/>.
            </summary>
            <param name="vertex">The index of the vertex.</param>
        </member>
        <member name="M:GTA.Rope.GetVertexCoord(System.Int32)">
            <summary>
            Gets the world coordinates of a single vertex of this <see cref="T:GTA.Rope"/>.
            </summary>
            <param name="vertex">The index of the vertex.</param>
            <returns>The position of the vertex in world coordinates.</returns>
        </member>
        <member name="M:GTA.Rope.Delete">
            <summary>
            Destroys this <see cref="T:GTA.Rope"/>.
            </summary>
        </member>
        <member name="M:GTA.Rope.Exists">
            <summary>
            Determines if this <see cref="T:GTA.Rope"/> exists.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.Rope"/> exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Rope.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same rope as this <see cref="T:GTA.Rope"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same rope as this <see cref="T:GTA.Rope"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Rope.op_Equality(GTA.Rope,GTA.Rope)">
            <summary>
            Determines if two <see cref="T:GTA.Rope"/>s refer to the same rope.
            </summary>
            <param name="left">The left <see cref="T:GTA.Rope"/>.</param>
            <param name="right">The right <see cref="T:GTA.Rope"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same rope as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Rope.op_Inequality(GTA.Rope,GTA.Rope)">
            <summary>
            Determines if two <see cref="T:GTA.Rope"/>s don't refer to the same rope.
            </summary>
            <param name="left">The left <see cref="T:GTA.Rope"/>.</param>
            <param name="right">The right <see cref="T:GTA.Rope"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same rope as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Rope.op_Implicit(GTA.Rope)~GTA.Native.InputArgument">
            <summary>
            Converts a <see cref="T:GTA.Rope"/> to a native input argument.
            </summary>
        </member>
        <member name="T:GTA.Scaleform">
            <summary>
            A class which handles rendering of Scaleform elements.
            </summary>
        </member>
        <member name="T:GTA.Script">
            <summary>
            A base class for all user scripts to inherit.
            Only scripts that inherit directly from this class and have a default (parameterless) public constructor will be detected and started.
            </summary>
        </member>
        <member name="E:GTA.Script.Tick">
            <summary>
            An event that is raised every tick of the script.
            Put code that needs to be looped each frame in here.
            </summary>
        </member>
        <member name="E:GTA.Script.Aborted">
            <summary>
            An event that is raised when this <see cref="T:GTA.Script"/> gets aborted for any reason.
            This should be used for cleaning up anything created during this <see cref="T:GTA.Script"/>.
            </summary>
        </member>
        <member name="E:GTA.Script.KeyUp">
            <summary>
            An event that is raised when a key is lifted.
            The <see cref="T:System.Windows.Forms.KeyEventArgs"/> contains the key that was lifted.
            </summary>
        </member>
        <member name="E:GTA.Script.KeyDown">
            <summary>
            An event that is raised when a key is first pressed.
            The <see cref="T:System.Windows.Forms.KeyEventArgs"/> contains the key that was pressed.
            </summary>
        </member>
        <member name="P:GTA.Script.Name">
            <summary>
            Gets the name of this <see cref="T:GTA.Script"/>.
            </summary>
        </member>
        <member name="P:GTA.Script.Filename">
            <summary>
            Gets the filename of this <see cref="T:GTA.Script"/>.
            </summary>
        </member>
        <member name="P:GTA.Script.BaseDirectory">
            <summary>
            Gets the Directory where this <see cref="T:GTA.Script"/> is stored.
            </summary>
        </member>
        <member name="P:GTA.Script.IsPaused">
            <summary>
            Checks if this <see cref="T:GTA.Script"/> is paused.
            </summary>
        </member>
        <member name="P:GTA.Script.IsRunning">
            <summary>
            Checks if this <see cref="T:GTA.Script"/> is running.
            </summary>
        </member>
        <member name="P:GTA.Script.IsExecuting">
            <summary>
            Checks if this <see cref="T:GTA.Script"/> is executing.
            </summary>
        </member>
        <member name="P:GTA.Script.Settings">
            <summary>
            Gets an INI file associated with this <see cref="T:GTA.Script"/>.
            The File will be in the same location as this <see cref="T:GTA.Script"/> but with an extension of ".ini".
            Use this to save and load settings for this <see cref="T:GTA.Script"/>.
            </summary>
        </member>
        <member name="P:GTA.Script.Interval">
            <summary>
            Gets or sets the interval in ms between <see cref="E:GTA.Script.Tick"/> for this <see cref="T:GTA.Script"/>.
            Default value is 0 meaning the event will execute once each frame.
            </summary>
        </member>
        <member name="M:GTA.Script.ToString">
            <summary>
            Returns a string that represents this <see cref="T:GTA.Script"/>.
            </summary>
        </member>
        <member name="M:GTA.Script.GetRelativeFilePath(System.String)">
            <summary>
            Gets the full file path for a file relative to this <see cref="T:GTA.Script"/>.
            e.g: <c>GetRelativeFilePath("ScriptFiles\texture1.png")</c> may return <c>"C:\Program Files\Rockstar Games\Grand Theft Auto V\scripts\ScriptFiles\texture1.png"</c>.
            </summary>
            <param name="filePath">The file path relative to the location of this <see cref="T:GTA.Script"/>.</param>
        </member>
        <member name="M:GTA.Script.Abort">
            <summary>
            Aborts execution of this <see cref="T:GTA.Script"/>.
            </summary>
        </member>
        <member name="M:GTA.Script.Pause">
            <summary>
            Pause execution of this <see cref="T:GTA.Script"/>.
            </summary>
        </member>
        <member name="M:GTA.Script.Resume">
            <summary>
            Starts execution of this <see cref="T:GTA.Script"/> after it has been Paused.
            </summary>
        </member>
        <member name="M:GTA.Script.Wait(System.Int32)">
            <summary>
            Pauses execution of the <see cref="T:GTA.Script"/> for a specific amount of time.
            Must be called inside the main script loop (the <see cref="E:GTA.Script.Tick"/> event or any sub methods called from it).
            </summary>
            <param name="ms">The time in milliseconds to pause for.</param>
        </member>
        <member name="M:GTA.Script.Yield">
            <summary>
            Yields the execution of the script for 1 frame.
            </summary>
        </member>
        <member name="M:GTA.Script.InstantiateScript``1">
            <summary>
            Spawns a new <see cref="T:GTA.Script"/> instance of the specified type.
            </summary>
        </member>
        <member name="M:GTA.ScriptSettings.Load(System.String)">
            <summary>
            Loads a <see cref="T:GTA.ScriptSettings"/> from the specified file.
            </summary>
            <param name="filename">The filename to load the settings from.</param>
        </member>
        <member name="M:GTA.ScriptSettings.Save">
            <summary>
            Saves this <see cref="T:GTA.ScriptSettings"/> to file.
            </summary>
            <returns><see langword="true" /> if the file saved successfully; otherwise, <see langword="false" /></returns>
        </member>
        <member name="M:GTA.ScriptSettings.GetValue``1(System.String,System.String,``0)">
            <summary>
            Reads a value from this <see cref="T:GTA.ScriptSettings"/>.
            </summary>
            <param name="section">The section where the value is.</param>
            <param name="name">The name of the key the value is saved at.</param>
            <param name="defaultvalue">The fall-back value if the key doesn't exist or casting to type <typeparamref name="T"/> fails.</param>
            <returns>The value at <see paramref="name"/> in <see paramref="section"/>.</returns>
        </member>
        <member name="M:GTA.ScriptSettings.SetValue``1(System.String,System.String,``0)">
            <summary>
            Sets a value in this <see cref="T:GTA.ScriptSettings"/>.
            </summary>
            <param name="section">The section where the value is.</param>
            <param name="name">The name of the key the value is saved at.</param>
            <param name="value">The value to set the key to.</param>
        </member>
        <member name="M:GTA.ScriptSettings.GetAllValues``1(System.String,System.String)">
            <summary>
            Reads all the values at a specified key and section from this <see cref="T:GTA.ScriptSettings"/>.
            </summary>
            <param name="section">The section where the value is.</param>
            <param name="name">The name of the key the values are saved at.</param>
        </member>
        <member name="M:GTA.ShapeTest.StartTestLOSProbe(GTA.Math.Vector3,GTA.Math.Vector3,GTA.IntersectFlags,GTA.Entity,GTA.ShapeTestOptions)">
            <summary>
            Start a line-of-sight world probe shape test between 2 points.
            </summary>
            <param name="startPosition">The positon where the shape test starts.</param>
            <param name="endPosition">The positon where the shape test ends.</param>
            <param name="intersectFlags">What type of objects the shape test should intersect with.</param>
            <param name="excludeEntity">Specify an <see cref="T:GTA.Entity"/> that the shape test should exclude, leave null for no entities ignored.</param>
            <param name="options">Specify options for the spape test.</param>
            <value>
            The shape test handle.
            If this method fails to create the shape test request because there are too many ongoing requests, <see cref="P:GTA.ShapeTestHandle.IsRequestFailed"/> will return <see langword="true" /> on the handle struct.
            </value>
        </member>
        <member name="M:GTA.ShapeTest.StartExpensiveSyncTestLOSProbe(GTA.Math.Vector3,GTA.Math.Vector3,GTA.IntersectFlags,GTA.Entity,GTA.ShapeTestOptions)">
            <summary>
            Start a expensive synchronous line-of-sight world probe shape test between 2 points and blocks the game until the shape test completes.
            </summary>
            <param name="startPosition">The positon where the shape test starts.</param>
            <param name="endPosition">The positon where the shape test ends.</param>
            <param name="intersectFlags">What type of objects the shape test should intersect with.</param>
            <param name="excludeEntity">Specify an <see cref="T:GTA.Entity"/> that the shape test should exclude, leave null for no entities ignored.</param>
            <param name="options">Specify options for the spape test.</param>
            <remarks>This method is much more expensive than the asynchronous version (<see cref="M:GTA.ShapeTest.StartTestLOSProbe(GTA.Math.Vector3,GTA.Math.Vector3,GTA.IntersectFlags,GTA.Entity,GTA.ShapeTestOptions)"/>).</remarks>
            <value>
            The shape test handle.
            If this method fails to create the shape test request because there are too many ongoing requests, <see cref="P:GTA.ShapeTestHandle.IsRequestFailed"/> will return <see langword="true" /> on the handle struct.
            </value>
        </member>
        <member name="M:GTA.ShapeTest.StartTestBoundingBox(GTA.Entity,GTA.IntersectFlags,GTA.ShapeTestOptions)">
            <summary>
            Start a shape test against the <see cref="T:GTA.Entity"/>'s bounding box.
            </summary>
            <param name="entity">The entity to inspect.</param>
            <param name="intersectFlags">What type of objects the shape test should intersect with.</param>
            <param name="options">Specify options for the spape test.</param>
            <value>
            The shape test handle.
            If this method fails to create the shape test request because there are too many ongoing requests, <see cref="P:GTA.ShapeTestHandle.IsRequestFailed"/> will return <see langword="true" /> on the handle struct.
            </value>
        </member>
        <member name="M:GTA.ShapeTest.StartTestBox(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,GTA.IntersectFlags,GTA.Entity,GTA.ShapeTestOptions)">
            <summary>
            Start a shape test against the <see cref="T:GTA.Entity"/>'s bound where the entity can collide.
            </summary>
            <param name="sourcePosition">The source position.</param>
            <param name="dimension">The dimensions how much the shape test will search from the source position.</param>
            <param name="rotationAngles">The rotations in degree how much the dimension will be rotated before the shape test starts.</param>
            <param name="rotationOrder">The rotation order in local space the dimentions will be rotated in.</param>
            <param name="intersectFlags">What type of objects the shape test should intersect with.</param>
            <param name="excludeEntity">Specify an <see cref="T:GTA.Entity"/> that the shape test should exclude, leave null for no entities ignored.</param>
            <param name="options">Specify options for the spape test.</param>
            <value>
            The shape test handle.
            If this method fails to create the shape test request because there are too many ongoing requests, <see cref="P:GTA.ShapeTestHandle.IsRequestFailed"/> will return <see langword="true" /> on the handle struct.
            </value>
        </member>
        <member name="M:GTA.ShapeTest.StartTestBound(GTA.Entity,GTA.IntersectFlags,GTA.ShapeTestOptions)">
            <summary>
            Start a shape test against the <see cref="T:GTA.Entity"/>'s bound where the entity can collide.
            </summary>
            <param name="entity">The entity to inspect.</param>
            <param name="intersectFlags">What type of objects the shape test should intersect with.</param>
            <param name="options">Specify options for the spape test.</param>
            <value>
            The shape test handle.
            If this method fails to create the shape test request because there are too many ongoing requests, <see cref="P:GTA.ShapeTestHandle.IsRequestFailed"/> will return <see langword="true" /> on the handle struct.
            </value>
        </member>
        <member name="M:GTA.ShapeTest.StartTestCapsule(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.IntersectFlags,GTA.Entity,GTA.ShapeTestOptions)">
            <summary>
            Start a shape test against the area where shape test capsule covers.
            </summary>
            <param name="startPosition">The positon where the shape test starts.</param>
            <param name="endPosition">The positon where the shape test ends.</param>
            <param name="radius">The radius of the shape test capsule.</param>
            <param name="intersectFlags">What type of objects the shape test should intersect with.</param>
            <param name="excludeEntity">Specify an <see cref="T:GTA.Entity"/> that the shape test should exclude, leave null for no entities ignored.</param>
            <param name="options">Specify options for the spape test.</param>
            <value>
            The shape test handle.
            If this method fails to create the shape test request because there are too many ongoing requests, <see cref="P:GTA.ShapeTestHandle.IsRequestFailed"/> will return <see langword="true" /> on the handle struct.
            </value>
        </member>
        <member name="M:GTA.ShapeTest.StartTestSweptSphere(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.IntersectFlags,GTA.Entity,GTA.ShapeTestOptions)">
            <summary>
            Start a shape test against the area where swept sphere (ellipsoid) for shape test covers.
            </summary>
            <param name="startPosition">The positon where the shape test starts.</param>
            <param name="endPosition">The positon where the shape test ends.</param>
            <param name="radius">The radius of the swept sphere.</param>
            <param name="intersectFlags">What type of objects the shape test should intersect with.</param>
            <param name="excludeEntity">Specify an <see cref="T:GTA.Entity"/> that the shape test should exclude, leave null for no entities ignored.</param>
            <param name="options">Specify options for the spape test.</param>
            <value>
            The shape test handle.
            If this method fails to create the shape test request because there are too many ongoing requests, <see cref="P:GTA.ShapeTestHandle.IsRequestFailed"/> will return <see langword="true" /> on the handle struct.
            </value>
        </member>
        <member name="M:GTA.ShapeTest.StartTestMouseCursorLOSProbe(GTA.Math.Vector3@,GTA.Math.Vector3@,GTA.IntersectFlags,GTA.Entity,GTA.ShapeTestOptions)">
            <summary>
            Start a line-of-sight world probe shape test between 2 points calculated based on the mouse cursor position.
            Works just like <see cref="M:GTA.ShapeTest.StartTestLOSProbe(GTA.Math.Vector3,GTA.Math.Vector3,GTA.IntersectFlags,GTA.Entity,GTA.ShapeTestOptions)"/> only the start and end points of the probe are calculated based on the mouse cursor position projected into the world.
            </summary>
            <param name="probeStartPosition">The returned start position of the probe in world space.</param>
            <param name="probeEndPosition">The returned end position of the probe in world space.</param>
            <param name="intersectFlags">What type of objects the shape test should intersect with.</param>
            <param name="excludeEntity">Specify an <see cref="T:GTA.Entity"/> that the shape test should exclude, leave null for no entities ignored.</param>
            <param name="options">Specify options for the spape test.</param>
            <value>
            The shape test handle.
            If this method fails to create the shape test request because there are too many ongoing requests, <see cref="P:GTA.ShapeTestHandle.IsRequestFailed"/> will return <see langword="true" /> on the handle struct.
            </value>
        </member>
        <member name="M:GTA.ShapeTest.StartTestMouseCursorLOSProbe(GTA.IntersectFlags,GTA.Entity,GTA.ShapeTestOptions)">
            <summary>
            Start a shape test between 2 points calculated based on the mouse cursor position.
            Works just like <see cref="M:GTA.ShapeTest.StartTestLOSProbe(GTA.Math.Vector3,GTA.Math.Vector3,GTA.IntersectFlags,GTA.Entity,GTA.ShapeTestOptions)"/> only the start and end points of the probe are calculated based on the mouse cursor position projected into the world.
            </summary>
            <param name="intersectFlags">What type of objects the shape test should intersect with.</param>
            <param name="excludeEntity">Specify an <see cref="T:GTA.Entity"/> that the shape test should exclude, leave null for no entities ignored.</param>
            <param name="options">Specify options for the spape test.</param>
            <value>
            The shape test handle and the start and end points of the probe are calculated based on the mouse cursor position projected into the world.
            If this method fails to create the shape test request because there are too many ongoing requests, <see cref="P:GTA.ShapeTestHandle.IsRequestFailed"/> will return <see langword="true" /> on the handle struct.
            </value>
        </member>
        <member name="T:GTA.ShapeTestHandle">
            <summary>
            Represents a shape test handle.
            You need to call <see cref="O:GetResult"/> or <see cref="O:GetResultIncludingMaterial"/> every frame until one of the methods returns <see cref="F:GTA.ShapeTestStatus.Ready"/>.
            </summary>
        </member>
        <member name="P:GTA.ShapeTestHandle.Handle">
            <summary>
            Gets the shape test handle.
            </summary>
        </member>
        <member name="P:GTA.ShapeTestHandle.NativeValue">
            <summary>
            Gets the native representation of this <see cref="T:GTA.Model"/>.
            </summary>
        </member>
        <member name="P:GTA.ShapeTestHandle.IsRequestFailed">
            <summary>
            Gets if the request of <see cref="T:GTA.ShapeTestHandle"/> is failed.
            There is a limit to the number that can be in the system. Therefore, native functions for shape tests may fail to create the shapetest requests.
            </summary>
            <value>
              <see langword="true" /> if the request is failed; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.ShapeTestHandle.GetResult(GTA.ShapeTestResult@)">
            <summary>
            If status returned is <see cref="F:GTA.ShapeTestStatus.Ready"/>, then returns whether something was hit, and if so nearest hit position and normal.
            You need to call this method until the result is ready since the shape test result may not be finished in the same frame you start the shape test.
            </summary>
            <remarks>
            The shape test request is destroyed by this call if <see cref="F:GTA.ShapeTestStatus.Ready"/> is returned.
            If this is not called every frame then the request will be destroyed.
            </remarks>
        </member>
        <member name="M:GTA.ShapeTestHandle.GetResult">
            <summary>
            If status returned is <see cref="F:GTA.ShapeTestStatus.Ready"/>, then returns whether something was hit, and if so nearest hit position and normal.
            You need to call this method until the result is ready since the shape test result may not be finished in the same frame you start the shape test.
            </summary>
            <remarks>
            The shape test request is destroyed by this call if <see cref="F:GTA.ShapeTestStatus.Ready"/> is returned.
            If this is not called every frame then the request will be destroyed.
            </remarks>
        </member>
        <member name="M:GTA.ShapeTestHandle.GetResultIncludingMaterial(GTA.ShapeTestResult@,GTA.MaterialHash@)">
            <summary>
            If status returned is <see cref="F:GTA.ShapeTestStatus.Ready"/>, then returns whether something was hit, and if so nearest hit position, normal, and a hash of the material name.
            You need to call this method until the result is ready since the shape test result may not be finished in the same frame you start the shape test.
            </summary>
            <remarks>
            The shape test request is destroyed by this call if <see cref="F:GTA.ShapeTestStatus.Ready"/> is returned.
            If this is not called every frame then the request will be destroyed.
            </remarks>
        </member>
        <member name="M:GTA.ShapeTestHandle.GetResultIncludingMaterial">
            <summary>
            If status returned is <see cref="F:GTA.ShapeTestStatus.Ready"/>, then returns whether something was hit, and if so nearest hit position, normal, and a hash of the material name.
            You need to call this method until the result is ready since the shape test result may not be finished in the same frame you start the shape test.
            </summary>
            <remarks>
            The shape test request is destroyed by this call if <see cref="F:GTA.ShapeTestStatus.Ready"/> is returned.
            If this is not called every frame then the request will be destroyed.
            </remarks>
        </member>
        <member name="T:GTA.ShapeTestResult">
            <summary>
            Represents a shape test result.
            </summary>
        </member>
        <member name="P:GTA.ShapeTestResult.DidHit">
            <summary>
            Gets a value indicating whether this shape test collided with anything.
            </summary>
        </member>
        <member name="M:GTA.ShapeTestResult.TryGetHitEntity(GTA.Entity@)">
            <summary>
            Try to get the <see cref="T:GTA.Entity" /> this shape test hit.
            <remarks>Returns <see langword="false" /> if the shape test didn't hit or what was hit wasn't a <see cref="T:GTA.Entity" />.</remarks>
            </summary>
        </member>
        <member name="P:GTA.ShapeTestResult.HitPosition">
            <summary>
            Gets the world coordinates where this shape test hit.
            <remarks>Returns <see cref="P:GTA.Math.Vector3.Zero"/> if the shape test didn't hit anything.</remarks>
            </summary>
        </member>
        <member name="P:GTA.ShapeTestResult.SurfaceNormal">
            <summary>
            Gets the normal of the surface where this shape test hit.
            <remarks>Returns <see cref="P:GTA.Math.Vector3.Zero"/> if the shape test didn't hit anything.</remarks>
            </summary>
        </member>
        <member name="F:GTA.WeaponAttachmentPoint.Flash">
            <summary> Used for <see cref="F:GTA.WeaponHash.Flashlight"/>. </summary>
        </member>
        <member name="F:GTA.WeaponAttachmentPoint.GunGripR">
            <summary> Used for <see cref="F:GTA.WeaponComponentHash.GunrunMk2Upgrade"/>. </summary>
        </member>
        <member name="P:GTA.WeaponAsset.Hash">
            <summary>
            Gets the hash for this <see cref="T:GTA.WeaponAsset"/>.
            </summary>
        </member>
        <member name="P:GTA.WeaponAsset.NativeValue">
            <summary>
            Gets the native representation of this <see cref="T:GTA.WeaponAsset"/>.
            </summary>
        </member>
        <member name="P:GTA.WeaponAsset.IsValid">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.WeaponAsset"/> is valid as a weapon or a ammo hash.
            </summary>
        </member>
        <member name="P:GTA.WeaponAsset.IsValidAsWeaponHash">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.WeaponAsset"/> is valid as a weapon hash.
            </summary>
        </member>
        <member name="P:GTA.WeaponAsset.IsLoaded">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.WeaponAsset"/> is loaded so it can be spawned.
            </summary>
        </member>
        <member name="M:GTA.WeaponAsset.Request">
            <summary>
            Attempts to load this <see cref="T:GTA.WeaponAsset"/> into memory.
            </summary>
        </member>
        <member name="M:GTA.WeaponAsset.Request(System.Int32)">
            <summary>
            Attempts to load this <see cref="T:GTA.WeaponAsset"/> into memory for a given period of time.
            </summary>
            <param name="timeout">The time (in milliseconds) before giving up trying to load this <see cref="T:GTA.WeaponAsset"/>.</param>
            <returns><see langword="true" /> if this <see cref="T:GTA.WeaponAsset"/> is loaded; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.WeaponAsset.MarkAsNoLongerNeeded">
            <summary>
            Tells the game we have finished using this <see cref="T:GTA.WeaponAsset"/> and it can be freed from memory.
            </summary>
        </member>
        <member name="M:GTA.WeaponCollection.Give(GTA.WeaponHash,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gives the speficied weapon if the owner <see cref="T:GTA.Ped"/> does not have one, or selects the weapon if they have one and <paramref name="equipNow"/> is set to <see langword="true" />.
            </summary>
            <param name="weaponHash">The weapon hash.</param>
            <param name="ammoCount">The ammo count to be added to the weapon inventory of the owner <see cref="T:GTA.Ped"/>.</param>
            <param name="equipNow">If set to <see langword="true" />, the owner <see cref="T:GTA.Ped"/> will switch their weapon to the weapon of <paramref name="weaponHash"/> as soon as they can (not instantly).</param>
            <param name="isAmmoLoaded">
            Does not work since the ammo in clip is always full if not selected unless the game code related to auto-reload is modified.
            This was supposed to determine if the ammo will be loaded after the weapon is given to the owner <see cref="T:GTA.Ped"/>.
            </param>
        </member>
        <member name="P:GTA.WeaponComponentCollection.Count">
            <summary>
            Gets the number of compatible components.
            </summary>
        </member>
        <member name="M:GTA.WeaponComponentCollection.GetClipComponent(System.Int32)">
            <summary>
            Gets the clip component at the index.
            </summary>
            <param name="index">The index of the clip component subset of all the weapon component array.</param>
            <returns>
            A <see cref="T:GTA.WeaponComponent"/> instance if the <see cref="T:GTA.WeaponComponent"/> at the <paramref name="index"/> of the clip component subset is found;
            otherwise, the <see cref="T:GTA.WeaponComponent"/> instance representing the invalid component.
            </returns>
        </member>
        <member name="P:GTA.WeaponComponentCollection.ClipVariationsCount">
            <summary>
            Gets the number of compatible clip components.
            </summary>
        </member>
        <member name="M:GTA.WeaponComponentCollection.GetScopeComponent(System.Int32)">
            <summary>
            Gets the scope component at the index.
            </summary>
            <param name="index">The index of the scope component subset of all the weapon component array.</param>
            <returns>
            A <see cref="T:GTA.WeaponComponent"/> instance if the <see cref="T:GTA.WeaponComponent"/> at the <paramref name="index"/> of the scope component subset is found;
            otherwise, the <see cref="T:GTA.WeaponComponent"/> instance representing the invalid component.
            </returns>
        </member>
        <member name="P:GTA.WeaponComponentCollection.ScopeVariationsCount">
            <summary>
            Gets the number of compatible scope components.
            </summary>
        </member>
        <member name="M:GTA.WeaponComponentCollection.GetBarrelComponent(System.Int32)">
            <summary>
            Gets the barrel component at the index.
            </summary>
            <param name="index">The index of the barrel component subset of all the weapon component array.</param>
            <returns>
            A <see cref="T:GTA.WeaponComponent"/> instance if the <see cref="T:GTA.WeaponComponent"/> at the <paramref name="index"/> of the barrel component subset is found;
            otherwise, the <see cref="T:GTA.WeaponComponent"/> instance representing the invalid component.
            </returns>
        </member>
        <member name="P:GTA.WeaponComponentCollection.BarrelVariationsCount">
            <summary>
            Gets the number of compatible barrel components.
            </summary>
        </member>
        <member name="M:GTA.WeaponComponentCollection.GetSuppressorOrMuzzleBrakeComponent(System.Int32)">
            <summary>
            Gets the suppressor or muzzle brake component at the index.
            </summary>
            <param name="index">The index of the subset of the suppressor and muzzle brake components of all the weapon component array.</param>
            <returns>
            A <see cref="T:GTA.WeaponComponent"/> instance if the <see cref="T:GTA.WeaponComponent"/> at the <paramref name="index"/> of the subset of the suppressor and muzzle brake components is found;
            otherwise, the <see cref="T:GTA.WeaponComponent"/> instance representing the invalid component.
            </returns>
        </member>
        <member name="P:GTA.WeaponComponentCollection.SuppressorAndMuzzleBrakeVariationsCount">
            <summary>
            Gets the number of compatible suppressor and muzzle brake components.
            </summary>
        </member>
        <member name="M:GTA.WeaponComponentCollection.GetGunRootComponent(System.Int32)">
            <summary>
            Gets the component for <see cref="F:GTA.WeaponAttachmentPoint.GunRoot"/> at the index.
            </summary>
            <param name="index">The index of the components for <see cref="F:GTA.WeaponAttachmentPoint.GunRoot"/> subset of all the weapon component array.</param>
            <returns>
            A <see cref="T:GTA.WeaponComponent"/> instance if the <see cref="T:GTA.WeaponComponent"/> at the <paramref name="index"/> of the components for <see cref="F:GTA.WeaponAttachmentPoint.GunRoot"/> is found;
            otherwise, the <see cref="T:GTA.WeaponComponent"/> instance representing the invalid component.
            </returns>
        </member>
        <member name="P:GTA.WeaponComponentCollection.GunRootVariationsCount">
            <summary>
            Gets the number of compatible components for <see cref="F:GTA.WeaponAttachmentPoint.GunRoot"/>.
            </summary>
        </member>
        <member name="M:GTA.WeaponComponentCollection.GetSuppressorComponent">
            <summary>
            Gets the suppressor component.
            </summary>
            <returns>
            The <see cref="T:GTA.WeaponComponent"/> instance if the suppressor component is found;
            otherwise, the <see cref="T:GTA.WeaponComponent"/> instance representing the invalid component.
            </returns>
        </member>
        <member name="M:GTA.WeaponComponentCollection.GetFlashLightComponent">
            <summary>
            Gets the flashlight component.
            </summary>
            <returns>
            The <see cref="T:GTA.WeaponComponent"/> instance if the flashlight component is found;
            otherwise, the <see cref="T:GTA.WeaponComponent"/> instance representing the invalid component.
            </returns>
        </member>
        <member name="M:GTA.WeaponComponentCollection.GetLuxuryFinishComponent">
            <summary>
            Gets the first component of all the components for <see cref="F:GTA.WeaponAttachmentPoint.GunRoot"/>.
            Despite the method name, return value is not guaranteed to a <see cref="T:GTA.WeaponComponent"/> instance that represents the luxury finish component.
            </summary>
            <returns>
            The <see cref="T:GTA.WeaponComponent"/> instance if the first component of all the components for <see cref="F:GTA.WeaponAttachmentPoint.GunRoot"/> is found;
            otherwise, the <see cref="T:GTA.WeaponComponent"/> instance representing the invalid component.
            </returns>
        </member>
        <member name="M:GTA.WeaponComponentCollection.GetComponentsFromHash(GTA.WeaponHash)">
            <summary>
            Gets all the compatible weapon component hashes for the speficied weapon hash.
            </summary>
            <param name="hash">The weapon hash.</param>
        </member>
        <member name="F:GTA.WindowTitle.EnterEyefindMessage">
            <summary>
            "Enter your Eyefind message (MAX 500 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.MessageTooLong">
            <summary>
            "Message too long. Try again (MAX 500 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.ForbiddenMessage">
            <summary>
            "Forbidden message. Try again (MAX 500 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.EnterEyefindSubject">
            <summary>
            "Enter your Eyefind subject (MAX 60 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.SubjectTooLong">
            <summary>
            "Subject too long. Try again (MAX 60 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.EnterSynopsis">
            <summary>
            "Enter Synopsis (MAX 125 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.EnterCustomTeamName">
            <summary>
            "Enter Custom Team Name (MAX 15 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.ForbiddenText15">
            <summary>
            "Forbidden Text. Try again (MAX 15 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.CustomTeamName">
            <summary>
            "Custom Team Name"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.EnterMessage60">
            <summary>
            "Enter Message (MAX 60 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.ForbiddenText60">
            <summary>
            "Forbidden Text. Try again (MAX 60 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.InvalidMessage">
            <summary>
            "Invalid Message. Try again (MAX 20 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.EnterMessage20">
            <summary>
            "Enter Message (MAX 20 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.EnterOutfitName">
            <summary>
            "Enter Outfit Name (MAX 15 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.InvalidOutfitName">
            <summary>
            "Invalid Outfit Name. Try again (MAX 15 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.OutfitName">
            <summary>
            "Outfit Name"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.EnterChallengeName">
            <summary>
            "Enter your Challenge name (MAX 30 characters)"
            </summary>
        </member>
        <member name="P:GTA.World.IsClockPaused">
            <summary>
            Gets or sets a value indicating whether the in-game clock is paused.
            </summary>
        </member>
        <member name="M:GTA.World.PauseClock(System.Boolean)">
            <summary>
            Pauses or resumes the in-game clock.
            </summary>
            <param name="value">Pauses the game clock if set to <see langword="true" />; otherwise, resumes the game clock.</param>
        </member>
        <member name="P:GTA.World.CurrentDate">
            <summary>
            Gets or sets the current date and time in the GTA World.
            </summary>
            <value>
            The current date and time.
            </value>
        </member>
        <member name="P:GTA.World.CurrentTimeOfDay">
            <summary>
            Gets or sets the current time of day in the GTA World.
            </summary>
            <value>
            The current time of day
            </value>
        </member>
        <member name="P:GTA.World.MillisecondsPerGameMinute">
            <summary>
            Gets or sets how many milliseconds in the real world one game minute takes.
            </summary>
            <value>
            The milliseconds one game minute takes in the real world.
            </value>
        </member>
        <member name="P:GTA.World.Blackout">
            <summary>
            Sets a value indicating whether lights in the <see cref="T:GTA.World"/> should be rendered.
            </summary>
            <value>
              <see langword="true" /> if blackout; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.World.Weather">
            <summary>
            Gets or sets the weather.
            </summary>
            <value>
            The weather.
            </value>
        </member>
        <member name="P:GTA.World.NextWeather">
            <summary>
            Gets or sets the next weather.
            </summary>
            <value>
            The next weather.
            </value>
        </member>
        <member name="M:GTA.World.TransitionToWeather(GTA.Weather,System.Single)">
            <summary>
            Transitions to weather.
            </summary>
            <param name="weather">The weather.</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="P:GTA.World.GravityLevel">
            <summary>
            Sets the gravity level for all <see cref="T:GTA.World"/> objects.
            </summary>
            <value>
            The gravity level:
            9.8f - Default gravity.
            2.4f - Moon gravity.
            0.1f - Very low gravity.
            0.0f - No gravity.
            </value>
        </member>
        <member name="P:GTA.World.WaypointBlip">
            <summary>
            Gets the waypoint blip.
            </summary>
            <returns>The <see cref="T:GTA.Math.Vector3"/> coordinates of the Waypoint <see cref="T:GTA.Blip"/></returns>
            <remarks>
            Returns <see langword="null" /> if a waypoint <see cref="T:GTA.Blip"/> hasn't been set
            </remarks>
        </member>
        <member name="M:GTA.World.RemoveWaypoint">
            <summary>
            Removes the waypoint.
            </summary>
        </member>
        <member name="P:GTA.World.WaypointPosition">
            <summary>
            Gets or sets the waypoint position.
            </summary>
            <returns>The <see cref="T:GTA.Math.Vector3"/> coordinates of the Waypoint <see cref="T:GTA.Blip"/></returns>
            <remarks>
            Returns an empty <see cref="T:GTA.Math.Vector3"/> if a waypoint <see cref="T:GTA.Blip"/> hasn't been set
            If the game engine cant extract height information the Z component will be 0.0f
            </remarks>
        </member>
        <member name="M:GTA.World.GetAllBlips(GTA.BlipSprite[])">
            <summary>
            Gets an <c>array</c> of all the <see cref="T:GTA.Blip"/>s on the map with a given <see cref="T:GTA.BlipSprite"/>.
            </summary>
            <param name="blipTypes">The blip types to include, leave blank to get all <see cref="T:GTA.Blip"/>s.</param>
        </member>
        <member name="M:GTA.World.GetNearbyBlips(GTA.Math.Vector3,System.Single,GTA.BlipSprite[])">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Blip"/>s in a given region in the World.
            </summary>
            <param name="position">The position to check the <see cref="T:GTA.Blip"/> against.</param>
            <param name="radius">The maximum distance from the <paramref name="position"/> to detect <see cref="T:GTA.Blip"/>s.</param>
            <param name="blipTypes">The blip types to include, leave blank to get all <see cref="T:GTA.Blip"/>s.</param>
        </member>
        <member name="M:GTA.World.CreateBlip(GTA.Math.Vector3)">
            <summary>
            Creates a <see cref="T:GTA.Blip"/> at the given position on the map.
            </summary>
            <param name="position">The position of the blip on the map.</param>
        </member>
        <member name="M:GTA.World.CreateBlip(GTA.Math.Vector3,System.Single)">
            <summary>
            Creates a <see cref="T:GTA.Blip"/> for a circular area at the given position on the map.
            </summary>
            <param name="position">The position of the blip on the map.</param>
            <param name="radius">The radius of the area on the map.</param>
        </member>
        <member name="P:GTA.World.VehicleCount">
            <summary>
            A fast way to get the total number of <see cref="T:GTA.Vehicle"/>s spawned in the world.
            </summary>
        </member>
        <member name="P:GTA.World.PedCount">
            <summary>
            A fast way to get the total number of <see cref="T:GTA.Ped"/>s spawned in the world.
            </summary>
        </member>
        <member name="P:GTA.World.PropCount">
            <summary>
            A fast way to get the total number of <see cref="T:GTA.Prop"/>s spawned in the world.
            </summary>
        </member>
        <member name="P:GTA.World.PickupObjectCount">
            <summary>
            A fast way to get the total number of <see cref="T:GTA.Prop"/>s in the world associated with a <see cref="T:GTA.Pickup"/>.
            </summary>
        </member>
        <member name="P:GTA.World.BuildingCount">
            <summary>
            A fast way to get the total number of <see cref="T:GTA.Building"/>s spawned in the world.
            </summary>
        </member>
        <member name="P:GTA.World.AnimatedBuildingCount">
            <summary>
            A fast way to get the total number of <see cref="T:GTA.AnimatedBuilding"/>s spawned in the world.
            </summary>
        </member>
        <member name="P:GTA.World.InteriorInstanceCount">
            <summary>
            A fast way to get the total number of <see cref="T:GTA.InteriorInstance"/>s spawned in the world.
            </summary>
        </member>
        <member name="P:GTA.World.InteriorProxyCount">
            <summary>
            A fast way to get the total number of <see cref="T:GTA.InteriorProxy"/>s managed in the <see cref="T:GTA.InteriorProxy"/> pool.
            </summary>
        </member>
        <member name="P:GTA.World.ProjectileCount">
            <summary>
            A fast way to get the total number of <see cref="T:GTA.Projectile"/>s spawned in the world.
            </summary>
        </member>
        <member name="P:GTA.World.EntityColliderCount">
            <summary>
            Returns the total number of <see cref="T:GTA.Entity"/> colliders used.
            </summary>
        </member>
        <member name="P:GTA.World.VehicleCapacity">
            <summary>
            The total number of <see cref="T:GTA.Vehicle"/>s that can exist in the world.
            </summary>
            <remarks>The game will crash when the number of <see cref="T:GTA.Vehicle"/> is the same as this limit and the game tries to create a <see cref="T:GTA.Vehicle"/>.</remarks>
        </member>
        <member name="P:GTA.World.PedCapacity">
            <summary>
            The total number of <see cref="T:GTA.Ped"/>s that can exist in the world.
            </summary>
            <remarks>The game will crash when the number of <see cref="T:GTA.Ped"/> is the same as this limit and the game tries to create a <see cref="T:GTA.Ped"/>.</remarks>
        </member>
        <member name="P:GTA.World.PropCapacity">
            <summary>
            The total number of <see cref="T:GTA.Prop"/>s that can exist in the world.
            </summary>
            <remarks>The game will crash when the number of <see cref="T:GTA.Prop"/> is the same as this limit and the game tries to create a <see cref="T:GTA.Prop"/>.</remarks>
        </member>
        <member name="P:GTA.World.PickupObjectCapacity">
            <summary>
            The total number of <see cref="T:GTA.Prop"/>s in the world associated with a <see cref="T:GTA.Pickup"/> that can exist in the world.
            </summary>
        </member>
        <member name="P:GTA.World.ProjectileCapacity">
            <summary>
            The total number of <see cref="T:GTA.Projectile"/>s that can exist in the world.
            Always returns 50 currently since the limit is hard-coded in the exe.
            </summary>
        </member>
        <member name="P:GTA.World.BuildingCapacity">
            <summary>
            The total number of <see cref="T:GTA.Building"/>s that can exist in the world.
            </summary>
        </member>
        <member name="P:GTA.World.AnimatedBuildingCapacity">
            <summary>
            The total number of <see cref="T:GTA.AnimatedBuilding"/>s that can exist in the world.
            </summary>
        </member>
        <member name="P:GTA.World.InteriorInstanceCapacity">
            <summary>
            The total number of <see cref="T:GTA.InteriorInstance"/>s that can exist in the world.
            </summary>
        </member>
        <member name="P:GTA.World.InteriorProxyCapacity">
            <summary>
            The total number of <see cref="T:GTA.InteriorProxy"/>s the game can manage at the same time in the <see cref="T:GTA.InteriorProxy"/> pool.
            </summary>
        </member>
        <member name="P:GTA.World.EntityColliderCapacity">
            <summary>
            <para>The total number of <see cref="T:GTA.Entity"/> colliders can be used. The return value can be different in different versions.</para>
            <para>When <see cref="P:GTA.World.EntityColliderCount"/> reaches this value, no more <see cref="T:GTA.Entity"/> will not be able to be physically moved
            and <see cref="T:GTA.Vehicle"/>s and <see cref="T:GTA.Prop"/>s will not be able to detach fragment parts properly.</para>
            </summary>
        </member>
        <member name="M:GTA.World.GetClosestPed(GTA.Math.Vector3,System.Single,GTA.Model[])">
            <summary>
            Gets the closest <see cref="T:GTA.Ped"/> to a given position in the World.
            </summary>
            <param name="position">The position to find the nearest <see cref="T:GTA.Ped"/>.</param>
            <param name="radius">The maximum distance from the <paramref name="position"/> to detect <see cref="T:GTA.Ped"/>s.</param>
            <param name="models">The <see cref="T:GTA.Model"/> of <see cref="T:GTA.Ped"/>s to get, leave blank for all <see cref="T:GTA.Ped"/> <see cref="T:GTA.Model"/>s.</param>
            <remarks>Returns <see langword="null" /> if no <see cref="T:GTA.Ped"/> was in the given region.</remarks>
        </member>
        <member name="M:GTA.World.GetAllPeds(GTA.Model[])">
            <summary>
            Gets an <c>array</c>of all <see cref="T:GTA.Ped"/>s in the World.
            </summary>
            <param name="models">The <see cref="T:GTA.Model"/> of <see cref="T:GTA.Ped"/>s to get, leave blank for all <see cref="T:GTA.Ped"/> <see cref="T:GTA.Model"/>s.</param>
        </member>
        <member name="M:GTA.World.GetNearbyPeds(GTA.Ped,System.Single,GTA.Model[])">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Ped"/>s near a given <see cref="T:GTA.Ped"/> in the world
            </summary>
            <param name="ped">The ped to check.</param>
            <param name="radius">The maximun distance from the <paramref name="ped"/> to detect <see cref="T:GTA.Ped"/>s.</param>
            <param name="models">The <see cref="T:GTA.Model"/> of <see cref="T:GTA.Ped"/>s to get, leave blank for all <see cref="T:GTA.Ped"/> <see cref="T:GTA.Model"/>s.</param>
            <remarks>Doesnt include the <paramref name="ped"/> in the result</remarks>
        </member>
        <member name="M:GTA.World.GetNearbyPeds(GTA.Math.Vector3,System.Single,GTA.Model[])">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Ped"/>s in a given region in the World.
            </summary>
            <param name="position">The position to check the <see cref="T:GTA.Ped"/> against.</param>
            <param name="radius">The maximun distance from the <paramref name="position"/> to detect <see cref="T:GTA.Ped"/>s.</param>
            <param name="models">The <see cref="T:GTA.Model"/> of <see cref="T:GTA.Ped"/>s to get, leave blank for all <see cref="T:GTA.Ped"/> <see cref="T:GTA.Model"/>s.</param>
        </member>
        <member name="M:GTA.World.GetClosestVehicle(GTA.Math.Vector3,System.Single,GTA.Model[])">
            <summary>
            Gets the closest <see cref="T:GTA.Vehicle"/> to a given position in the World.
            </summary>
            <param name="position">The position to find the nearest <see cref="T:GTA.Vehicle"/>.</param>
            <param name="radius">The maximum distance from the <paramref name="position"/> to detect <see cref="T:GTA.Vehicle"/>s.</param>
            <param name="models">The <see cref="T:GTA.Model"/> of <see cref="T:GTA.Vehicle"/>s to get, leave blank for all <see cref="T:GTA.Vehicle"/> <see cref="T:GTA.Model"/>s.</param>
            <remarks>Returns <see langword="null" /> if no <see cref="T:GTA.Vehicle"/> was in the given region.</remarks>
        </member>
        <member name="M:GTA.World.GetAllVehicles(GTA.Model[])">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Vehicle"/>s in the World.
            </summary>
            <param name="models">The <see cref="T:GTA.Model"/> of <see cref="T:GTA.Vehicle"/>s to get, leave blank for all <see cref="T:GTA.Vehicle"/> <see cref="T:GTA.Model"/>s.</param>
        </member>
        <member name="M:GTA.World.GetNearbyVehicles(GTA.Ped,System.Single,GTA.Model[])">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Vehicle"/>s near a given <see cref="T:GTA.Ped"/> in the world
            </summary>
            <param name="ped">The ped to check.</param>
            <param name="radius">The maximun distance from the <paramref name="ped"/> to detect <see cref="T:GTA.Vehicle"/>s.</param>
            <param name="models">The <see cref="T:GTA.Model"/> of <see cref="T:GTA.Vehicle"/>s to get, leave blank for all <see cref="T:GTA.Vehicle"/> <see cref="T:GTA.Model"/>s.</param>
            <remarks>Doesnt include the <see cref="T:GTA.Vehicle"/> the <paramref name="ped"/> is using in the result</remarks>
        </member>
        <member name="M:GTA.World.GetNearbyVehicles(GTA.Math.Vector3,System.Single,GTA.Model[])">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Vehicle"/>s in a given region in the World.
            </summary>
            <param name="position">The position to check the <see cref="T:GTA.Vehicle"/> against.</param>
            <param name="radius">The maximun distance from the <paramref name="position"/> to detect <see cref="T:GTA.Vehicle"/>s.</param>
            <param name="models">The <see cref="T:GTA.Model"/> of <see cref="T:GTA.Vehicle"/>s to get, leave blank for all <see cref="T:GTA.Vehicle"/> <see cref="T:GTA.Model"/>s.</param>
        </member>
        <member name="M:GTA.World.GetClosestProp(GTA.Math.Vector3,System.Single,GTA.Model[])">
            <summary>
            Gets the closest <see cref="T:GTA.Prop"/> to a given position in the World.
            </summary>
            <param name="position">The position to find the nearest <see cref="T:GTA.Prop"/>.</param>
            <param name="radius">The maximum distance from the <paramref name="position"/> to detect <see cref="T:GTA.Prop"/>s.</param>
            <param name="models">The <see cref="T:GTA.Model"/> of <see cref="T:GTA.Prop"/>s to get, leave blank for all <see cref="T:GTA.Prop"/> <see cref="T:GTA.Model"/>s.</param>
            <remarks>Returns <see langword="null" /> if no <see cref="T:GTA.Prop"/> was in the given region.</remarks>
        </member>
        <member name="M:GTA.World.GetAllProps(GTA.Model[])">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Prop"/>s in the World.
            </summary>
            <param name="models">The <see cref="T:GTA.Model"/> of <see cref="T:GTA.Prop"/>s to get, leave blank for all <see cref="T:GTA.Prop"/> <see cref="T:GTA.Model"/>s.</param>
        </member>
        <member name="M:GTA.World.GetNearbyProps(GTA.Math.Vector3,System.Single,GTA.Model[])">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Prop"/>s in a given region in the World.
            </summary>
            <param name="position">The position to check the <see cref="T:GTA.Prop"/> against.</param>
            <param name="radius">The maximun distance from the <paramref name="position"/> to detect <see cref="T:GTA.Prop"/>s.</param>
            <param name="models">The <see cref="T:GTA.Model"/> of <see cref="T:GTA.Prop"/>s to get, leave blank for all <see cref="T:GTA.Prop"/> <see cref="T:GTA.Model"/>s.</param>
        </member>
        <member name="M:GTA.World.GetClosestPickupObject(GTA.Math.Vector3,System.Single)">
            <summary>
            Gets the closest <see cref="T:GTA.Prop"/> to a given position in the World associated with a <see cref="T:GTA.Pickup"/>.
            </summary>
            <param name="position">The position to find the nearest <see cref="T:GTA.Prop"/>.</param>
            <param name="radius">The maximum distance from the <paramref name="position"/> to detect <see cref="T:GTA.Prop"/>s.</param>
            <remarks>Returns <see langword="null" /> if no <see cref="T:GTA.Prop"/> was in the given region.</remarks>
        </member>
        <member name="M:GTA.World.GetAllPickupObjects">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Prop"/>s in the World associated with a <see cref="T:GTA.Pickup"/>.
            </summary>
        </member>
        <member name="M:GTA.World.GetNearbyPickupObjects(GTA.Math.Vector3,System.Single)">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Prop"/>s in a given region in the World associated with a <see cref="T:GTA.Pickup"/>.
            </summary>
            <param name="position">The position to check the <see cref="T:GTA.Entity"/> against.</param>
            <param name="radius">The maximun distance from the <paramref name="position"/> to detect <see cref="T:GTA.Prop"/>s.</param>
        </member>
        <member name="M:GTA.World.GetClosestProjectile(GTA.Math.Vector3,System.Single)">
            <summary>
            Gets the closest <see cref="T:GTA.Projectile"/> to a given position in the World.
            </summary>
            <param name="position">The position to find the nearest <see cref="T:GTA.Projectile"/>.</param>
            <param name="radius">The maximum distance from the <paramref name="position"/> to detect <see cref="T:GTA.Projectile"/>s.</param>
            <remarks>Returns <see langword="null" /> if no <see cref="T:GTA.Projectile"/> was in the given region.</remarks>
        </member>
        <member name="M:GTA.World.GetAllProjectiles">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Projectile"/>s in the World.
            </summary>
        </member>
        <member name="M:GTA.World.GetNearbyProjectiles(GTA.Math.Vector3,System.Single)">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Projectile"/>s in a given region in the World.
            </summary>
            <param name="position">The position to check the <see cref="T:GTA.Projectile"/> against.</param>
            <param name="radius">The maximum distance from the <paramref name="position"/> to detect <see cref="T:GTA.Projectile"/>s.</param>
        </member>
        <member name="M:GTA.World.GetAllEntities">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Entity"/>s in the World.
            </summary>
        </member>
        <member name="M:GTA.World.GetNearbyEntities(GTA.Math.Vector3,System.Single)">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Entity"/>s in a given region in the World.
            </summary>
            <param name="position">The position to check the <see cref="T:GTA.Entity"/> against.</param>
            <param name="radius">The maximun distance from the <paramref name="position"/> to detect <see cref="T:GTA.Entity"/>s.</param>
        </member>
        <member name="M:GTA.World.GetClosest``1(GTA.Math.Vector3,``0[])">
            <summary>
            Gets the closest <see cref="T:GTA.ISpatial"/> to a given position in the World.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="position">The position to check against.</param>
            <param name="spatials">The spatials to check.</param>
            <returns>The closest <see cref="T:GTA.ISpatial"/> to the <paramref name="position"/></returns>
        </member>
        <member name="M:GTA.World.GetClosest``1(GTA.Math.Vector2,``0[])">
            <summary>
            Gets the closest <see cref="T:GTA.ISpatial"/> to a given position in the World ignoring height.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="position">The position to check against.</param>
            <param name="spatials">The spatials to check.</param>
            <returns>The closest <see cref="T:GTA.ISpatial"/> to the <paramref name="position"/></returns>
        </member>
        <member name="M:GTA.World.GetClosest(GTA.Math.Vector3,GTA.Building[])">
            <summary>
            Gets the closest <see cref="T:GTA.Building"/> to a given position in the World.
            </summary>
            <param name="position">The position to check against.</param>
            <param name="buildings">The buildings to check.</param>
            <returns>The closest <see cref="T:GTA.Building"/> to the <paramref name="position"/></returns>
        </member>
        <member name="M:GTA.World.GetClosest(GTA.Math.Vector2,GTA.Building[])">
            <summary>
            Gets the closest <see cref="T:GTA.Building"/> to a given position in the World ignoring height.
            </summary>
            <param name="position">The position to check against.</param>
            <param name="buildings">The buildings to check.</param>
            <returns>The closest <see cref="T:GTA.Building"/> to the <paramref name="position"/></returns>
        </member>
        <member name="M:GTA.World.GetClosest(GTA.Math.Vector3,GTA.AnimatedBuilding[])">
            <summary>
            Gets the closest <see cref="T:GTA.AnimatedBuilding"/> to a given position in the World.
            </summary>
            <param name="position">The position to check against.</param>
            <param name="animatedBuildings">The animated building to check.</param>
            <returns>The closest <see cref="T:GTA.AnimatedBuilding"/> to the <paramref name="position"/></returns>
        </member>
        <member name="M:GTA.World.GetClosest(GTA.Math.Vector2,GTA.AnimatedBuilding[])">
            <summary>
            Gets the closest <see cref="T:GTA.AnimatedBuilding"/> to a given position in the World ignoring height.
            </summary>
            <param name="position">The position to check against.</param>
            <param name="animatedBuildings">The animated building to check.</param>
            <returns>The closest <see cref="T:GTA.AnimatedBuilding"/> to the <paramref name="position"/></returns>
        </member>
        <member name="M:GTA.World.GetClosest(GTA.Math.Vector3,GTA.InteriorInstance[])">
            <summary>
            Gets the closest <see cref="T:GTA.InteriorInstance"/> to a given position in the World.
            </summary>
            <param name="position">The position to check against.</param>
            <param name="interiorInstances">The spatials to check.</param>
            <returns>The closest <see cref="T:GTA.InteriorInstance"/> to the <paramref name="position"/></returns>
        </member>
        <member name="M:GTA.World.GetClosest(GTA.Math.Vector2,GTA.InteriorInstance[])">
            <summary>
            Gets the closest <see cref="T:GTA.InteriorInstance"/> to a given position in the World ignoring height.
            </summary>
            <param name="position">The position to check against.</param>
            <param name="interiorInstances">The interior instances to check.</param>
            <returns>The closest <see cref="T:GTA.InteriorInstance"/> to the <paramref name="interiorInstances"/></returns>
        </member>
        <member name="M:GTA.World.GetClosest(GTA.Math.Vector3,GTA.InteriorProxy[])">
            <summary>
            Gets the closest <see cref="T:GTA.InteriorProxy"/> to a given position in the World.
            </summary>
            <param name="position">The position to check against.</param>
            <param name="interiorProxies">The spatials to check.</param>
            <returns>The closest <see cref="T:GTA.InteriorProxy"/> to the <paramref name="position"/></returns>
        </member>
        <member name="M:GTA.World.GetClosest(GTA.Math.Vector2,GTA.InteriorProxy[])">
            <summary>
            Gets the closest <see cref="T:GTA.InteriorProxy"/> to a given position in the World ignoring height.
            </summary>
            <param name="position">The position to check against.</param>
            <param name="interiorProxies">The spatials to check.</param>
            <returns>The closest <see cref="T:GTA.InteriorProxy"/> to the <paramref name="position"/></returns>
        </member>
        <member name="M:GTA.World.CreatePed(GTA.Model,GTA.Math.Vector3,System.Single)">
            <summary>
            Spawns a <see cref="T:GTA.Ped"/> of the given <see cref="T:GTA.Model"/> at the position and heading specified.
            </summary>
            <param name="model">The <see cref="T:GTA.Model"/> of the <see cref="T:GTA.Ped"/>.</param>
            <param name="position">The position to spawn the <see cref="T:GTA.Ped"/> at.</param>
            <param name="heading">The heading of the <see cref="T:GTA.Ped"/>.</param>
            <remarks>returns <see langword="null" /> if the <see cref="T:GTA.Ped"/> could not be spawned.</remarks>
        </member>
        <member name="M:GTA.World.CreateRandomPed(GTA.Math.Vector3)">
            <summary>
            Spawns a <see cref="T:GTA.Ped"/> of a random <see cref="T:GTA.Model"/> at the position specified.
            </summary>
            <param name="position">The position to spawn the <see cref="T:GTA.Ped"/> at.</param>
        </member>
        <member name="M:GTA.World.CreateRandomPed(GTA.Math.Vector3,System.Single,System.Func{GTA.Model,System.Boolean})">
            <summary>
            Spawns a <see cref="T:GTA.Ped"/> of a random <see cref="T:GTA.Model"/> at the position specified.
            </summary>
            <param name="position">The position to spawn the <see cref="T:GTA.Ped"/> at.</param>
            <param name="heading">The heading of the <see cref="T:GTA.Ped"/>.</param>
            <param name="predicate">
            The method that determines whether a model should be considered when choosing a random model for the <see cref="T:GTA.Ped"/>.
            If <see langword="null" /> is set, gangster and animal models will not be chosen, just like CREATE_PED does.
            </param>
        </member>
        <member name="M:GTA.World.CreateVehicle(GTA.Model,GTA.Math.Vector3,System.Single)">
            <summary>
            Spawns a <see cref="T:GTA.Vehicle"/> of the given <see cref="T:GTA.Model"/> at the position and heading specified.
            </summary>
            <param name="model">The <see cref="T:GTA.Model"/> of the <see cref="T:GTA.Vehicle"/>.</param>
            <param name="position">The position to spawn the <see cref="T:GTA.Vehicle"/> at.</param>
            <param name="heading">The heading of the <see cref="T:GTA.Vehicle"/>.</param>
            <remarks>returns <see langword="null" /> if the <see cref="T:GTA.Vehicle"/> could not be spawned.</remarks>
        </member>
        <member name="M:GTA.World.CreateRandomVehicle(GTA.Math.Vector3,System.Single,System.Func{GTA.Model,System.Boolean})">
            <summary>
            Spawns a <see cref="T:GTA.Vehicle"/> of a random <see cref="T:GTA.Model"/> at the position specified.
            </summary>
            <param name="position">The position to spawn the <see cref="T:GTA.Vehicle"/> at.</param>
            <param name="heading">The heading of the <see cref="T:GTA.Vehicle"/>.</param>
            <param name="predicate">The method that determines whether a model should be considered when choosing a random model for the <see cref="T:GTA.Vehicle"/>.</param>
            <remarks>returns <see langword="null" /> if the <see cref="T:GTA.Vehicle"/> could not be spawned.</remarks>
        </member>
        <member name="M:GTA.World.CreateProp(GTA.Model,GTA.Math.Vector3,System.Boolean,System.Boolean)">
            <summary>
            Spawns a <see cref="T:GTA.Prop"/> of the given <see cref="T:GTA.Model"/> at the specified position.
            </summary>
            <param name="model">The <see cref="T:GTA.Model"/> of the <see cref="T:GTA.Prop"/>.</param>
            <param name="position">The position to spawn the <see cref="T:GTA.Prop"/> at.</param>
            <param name="dynamic">if set to <see langword="true" /> the <see cref="T:GTA.Prop"/> will have physics; otherwise, it will be static.</param>
            <param name="placeOnGround">if set to <see langword="true" /> place the prop on the ground nearest to the <paramref name="position"/>.</param>
            <remarks>returns <see langword="null" /> if the <see cref="T:GTA.Prop"/> could not be spawned.</remarks>
        </member>
        <member name="M:GTA.World.CreateProp(GTA.Model,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean)">
            <summary>
            Spawns a <see cref="T:GTA.Prop"/> of the given <see cref="T:GTA.Model"/> at the specified position.
            </summary>
            <param name="model">The <see cref="T:GTA.Model"/> of the <see cref="T:GTA.Prop"/>.</param>
            <param name="position">The position to spawn the <see cref="T:GTA.Prop"/> at.</param>
            <param name="rotation">The rotation of the <see cref="T:GTA.Prop"/>.</param>
            <param name="dynamic">if set to <see langword="true" /> the <see cref="T:GTA.Prop"/> will have physics; otherwise, it will be static.</param>
            <param name="placeOnGround">if set to <see langword="true" /> place the prop on the ground nearest to the <paramref name="position"/>.</param>
            <remarks>returns <see langword="null" /> if the <see cref="T:GTA.Prop"/> could not be spawned.</remarks>
        </member>
        <member name="M:GTA.World.CreatePropNoOffset(GTA.Model,GTA.Math.Vector3,System.Boolean)">
            <summary>
            Spawns a <see cref="T:GTA.Prop"/> of the given <see cref="T:GTA.Model"/> at the specified position without any offset.
            </summary>
            <param name="model">The <see cref="T:GTA.Model"/> of the <see cref="T:GTA.Prop"/>.</param>
            <param name="position">The position to spawn the <see cref="T:GTA.Prop"/> at.</param>
            <param name="dynamic">if set to <see langword="true" /> the <see cref="T:GTA.Prop"/> will have physics; otherwise, it will be static.</param>
            <remarks>returns <see langword="null" /> if the <see cref="T:GTA.Prop"/> could not be spawned.</remarks>
        </member>
        <member name="M:GTA.World.CreatePropNoOffset(GTA.Model,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean)">
            <summary>
            Spawns a <see cref="T:GTA.Prop"/> of the given <see cref="T:GTA.Model"/> at the specified position without any offset.
            </summary>
            <param name="model">The <see cref="T:GTA.Model"/> of the <see cref="T:GTA.Prop"/>.</param>
            <param name="position">The position to spawn the <see cref="T:GTA.Prop"/> at.</param>
            <param name="rotation">The rotation of the <see cref="T:GTA.Prop"/>.</param>
            <param name="dynamic">if set to <see langword="true" /> the <see cref="T:GTA.Prop"/> will have physics; otherwise, it will be static.</param>
            <remarks>returns <see langword="null" /> if the <see cref="T:GTA.Prop"/> could not be spawned.</remarks>
        </member>
        <member name="M:GTA.World.CreateAmbientPickup(GTA.PickupType,GTA.Math.Vector3,GTA.Model,System.Int32)">
            <summary>
            Spawns a pickup <see cref="T:GTA.Prop"/> at the specified position.
            </summary>
        </member>
        <member name="M:GTA.World.CreatePickup(GTA.PickupType,GTA.Math.Vector3,GTA.Model,System.Int32)">
            <summary>
            Spawns a <see cref="T:GTA.Pickup"/> at the specified position.
            </summary>
        </member>
        <member name="M:GTA.World.CreatePickup(GTA.PickupType,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Model,System.Int32)">
            <summary>
            Spawns a <see cref="T:GTA.Pickup"/> at the specified position.
            </summary>
        </member>
        <member name="M:GTA.World.GetAllCheckpoints">
            <summary>
            Gets an <c>array</c> of all the <see cref="T:GTA.Checkpoint"/>s.
            </summary>
        </member>
        <member name="M:GTA.World.CreateCheckpoint(GTA.CheckpointIcon,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Drawing.Color)">
            <summary>
            Creates a <see cref="T:GTA.Checkpoint"/> in the world.
            </summary>
            <param name="icon">The <see cref="T:GTA.CheckpointIcon"/> to display inside the <see cref="T:GTA.Checkpoint"/>.</param>
            <param name="position">The position in the World.</param>
            <param name="pointTo">The position in the world where this <see cref="T:GTA.Checkpoint"/> should point.</param>
            <param name="radius">The radius of the <see cref="T:GTA.Checkpoint"/>.</param>
            <param name="color">The color of the <see cref="T:GTA.Checkpoint"/>.</param>
            <remarks>returns <see langword="null" /> if the <see cref="T:GTA.Checkpoint"/> could not be created</remarks>
        </member>
        <member name="M:GTA.World.CreateCheckpoint(GTA.CheckpointCustomIcon,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Drawing.Color)">
            <summary>
            Creates a <see cref="T:GTA.Checkpoint"/> in the world.
            </summary>
            <param name="icon">The <see cref="T:GTA.CheckpointCustomIcon"/> to display inside the <see cref="T:GTA.Checkpoint"/>.</param>
            <param name="position">The position in the World.</param>
            <param name="pointTo">The position in the world where this <see cref="T:GTA.Checkpoint"/> should point.</param>
            <param name="radius">The radius of the <see cref="T:GTA.Checkpoint"/>.</param>
            <param name="color">The color of the <see cref="T:GTA.Checkpoint"/>.</param>
            <remarks>returns <see langword="null" /> if the <see cref="T:GTA.Checkpoint"/> could not be created</remarks>
        </member>
        <member name="M:GTA.World.DestroyAllCameras">
            <summary>
            Destroys all user created <see cref="T:GTA.Camera"/>s.
            </summary>
        </member>
        <member name="M:GTA.World.CreateCamera(GTA.Math.Vector3,GTA.Math.Vector3,System.Single)">
            <summary>
            Creates a <see cref="T:GTA.Camera"/>, use <see cref="P:GTA.World.RenderingCamera"/> to switch to this camera
            </summary>
            <param name="position">The position of the camera.</param>
            <param name="rotation">The rotation of the camera.</param>
            <param name="fov">The field of view of the camera.</param>
        </member>
        <member name="P:GTA.World.RenderingCamera">
            <summary>
            Gets or sets the rendering camera.
            </summary>
            <value>
            The rendering <see cref="T:GTA.Camera"/>.
            </value>
            <remarks>
            Setting to <see langword="null" /> sets the rendering <see cref="T:GTA.Camera"/> to <see cref="T:GTA.GameplayCamera"/>.
            </remarks>
        </member>
        <member name="M:GTA.World.CreateParticleEffectNonLooped(GTA.ParticleEffectAsset,System.String,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)">
            <summary>
            Starts a Particle Effect that runs once at a given position then is destroyed.
            </summary>
            <param name="asset">The effect asset to use.</param>
            <param name="effectName">The name of the effect.</param>
            <param name="pos">The World position where the effect is.</param>
            <param name="rot">What rotation to apply to the effect.</param>
            <param name="scale">How much to scale the size of the effect by.</param>
            <param name="invertAxis">Which axis to flip the effect in.</param>
            <returns><see langword="true" />If the effect was able to start; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.World.CreateParticleEffectNonLooped(GTA.ParticleEffectAsset,System.String,GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)">
            <summary>
            Starts a Particle Effect on an <see cref="T:GTA.Entity"/> that runs once then is destroyed.
            </summary>
            <param name="asset">The effect asset to use.</param>
            <param name="effectName">the name of the effect.</param>
            <param name="entity">The <see cref="T:GTA.Entity"/> the effect is attached to.</param>
            <param name="off">The offset from the <paramref name="entity"/> to attach the effect.</param>
            <param name="rot">The rotation, relative to the <paramref name="entity"/>, the effect has.</param>
            <param name="scale">How much to scale the size of the effect by.</param>
            <param name="invertAxis">Which axis to flip the effect in. For a car side exahust you may need to flip in the Y Axis</param>
            <returns><see langword="true" />If the effect was able to start; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.World.CreateParticleEffectNonLooped(GTA.ParticleEffectAsset,System.String,GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)">
            <summary>
            Starts a Particle Effect on an <see cref="T:GTA.EntityBone"/> that runs once then is destroyed.
            </summary>
            <param name="asset">The effect asset to use.</param>
            <param name="effectName">the name of the effect.</param>
            <param name="entityBone">The <see cref="T:GTA.EntityBone"/> the effect is attached to.</param>
            <param name="off">The offset from the <paramref name="entityBone"/> to attach the effect.</param>
            <param name="rot">The rotation, relative to the <paramref name="entityBone"/>, the effect has.</param>
            <param name="scale">How much to scale the size of the effect by.</param>
            <param name="invertAxis">Which axis to flip the effect in. For a car side exahust you may need to flip in the Y Axis</param>
            <returns><see langword="true" />If the effect was able to start; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.World.CreateParticleEffect(GTA.ParticleEffectAsset,System.String,GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)">
            <summary>
            Creates a <see cref="T:GTA.ParticleEffect"/> on an <see cref="T:GTA.Entity"/> that runs looped.
            </summary>
            <param name="asset">The effect asset to use.</param>
            <param name="effectName">The name of the Effect</param>
            <param name="entity">The <see cref="T:GTA.Entity"/> the effect is attached to.</param>
            <param name="offset">The offset from the <paramref name="entity"/> to attach the effect.</param>
            <param name="rotation">The rotation, relative to the <paramref name="entity"/>, the effect has.</param>
            <param name="scale">How much to scale the size of the effect by.</param>
            <param name="invertAxis">Which axis to flip the effect in. For a car side exhaust you may need to flip in the Y Axis.</param>
        </member>
        <member name="M:GTA.World.CreateParticleEffect(GTA.ParticleEffectAsset,System.String,GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)">
            <summary>
            Creates a <see cref="T:GTA.ParticleEffect"/> on an <see cref="T:GTA.EntityBone"/> that runs looped.
            </summary>
            <param name="asset">The effect asset to use.</param>
            <param name="effectName">The name of the Effect</param>
            <param name="entityBone">The <see cref="T:GTA.EntityBone"/> the effect is attached to.</param>
            <param name="offset">The offset from the <paramref name="entityBone"/> to attach the effect.</param>
            <param name="rotation">The rotation, relative to the <paramref name="entityBone"/>, the effect has.</param>
            <param name="scale">How much to scale the size of the effect by.</param>
            <param name="invertAxis">Which axis to flip the effect in. For a car side exhaust you may need to flip in the Y Axis.</param>
        </member>
        <member name="M:GTA.World.CreateParticleEffect(GTA.ParticleEffectAsset,System.String,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)">
            <summary>
            Creates a <see cref="T:GTA.ParticleEffect"/> at a position that runs looped.
            </summary>
            <param name="asset">The effect asset to use.</param>
            <param name="effectName">The name of the effect.</param>
            <param name="position">The world coordinates where the effect is.</param>
            <param name="rotation">What rotation to apply to the effect.</param>
            <param name="scale">How much to scale the size of the effect by.</param>
            <param name="invertAxis">Which axis to flip the effect in.</param>
        </member>
        <member name="M:GTA.World.RemoveAllParticleEffectsInRange(GTA.Math.Vector3,System.Single)">
            <summary>
            Stops all particle effects in a range.
            </summary>
            <param name="pos">The position in the world to stop particle effects.</param>
            <param name="range">The maximum distance from the <paramref name="pos"/> to stop particle effects.</param>
        </member>
        <member name="M:GTA.World.AddRope(GTA.RopeType,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Single,System.Boolean)">
            <summary>
            Spawns a <see cref="T:GTA.Rope"/>.
            </summary>
            <param name="type">The type of <see cref="T:GTA.Rope"/>.</param>
            <param name="position">The position of the <see cref="T:GTA.Rope"/>.</param>
            <param name="rotation">The rotation of the <see cref="T:GTA.Rope"/>.</param>
            <param name="length">The length of the <see cref="T:GTA.Rope"/>.</param>
            <param name="minLength">The minimum length of the <see cref="T:GTA.Rope"/>.</param>
            <param name="breakable">if set to <see langword="true" /> the <see cref="T:GTA.Rope"/> will break if shot.</param>
        </member>
        <member name="M:GTA.World.ShootBullet(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Ped,GTA.WeaponAsset,System.Int32,System.Single)">
            <summary>
            Fires a single bullet in the world
            </summary>
            <param name="sourcePosition">Where the bullet is fired from.</param>
            <param name="targetPosition">Where the bullet is fired to.</param>
            <param name="owner">The <see cref="T:GTA.Ped"/> who fired the bullet, leave <see langword="null" /> for no one.</param>
            <param name="weaponAsset">The weapon that the bullet is fired from.</param>
            <param name="damage">The damage the bullet will cause.</param>
            <param name="speed">The speed, only affects projectile weapons, leave -1 for default.</param>
        </member>
        <member name="M:GTA.World.AddExplosion(GTA.Math.Vector3,GTA.ExplosionType,System.Single,System.Single,GTA.Ped,System.Boolean,System.Boolean)">
            <summary>
            Creates an explosion in the world
            </summary>
            <param name="position">The position of the explosion.</param>
            <param name="type">The type of explosion.</param>
            <param name="radius">The radius of the explosion.</param>
            <param name="cameraShake">The amount of camera shake to apply to nearby cameras.</param>
            <param name="owner">The <see cref="T:GTA.Ped"/> who caused the explosion, leave null if no one caused the explosion.</param>
            <param name="aubidble">if set to <see langword="true" /> explosion can be heard.</param>
            <param name="invisible">if set to <see langword="true" /> explosion is invisible.</param>
        </member>
        <member name="M:GTA.World.AddRelationshipGroup(System.String)">
            <summary>
            Creates a <see cref="T:GTA.RelationshipGroup"/> with the given name.
            </summary>
            <param name="name">The name of the relationship group.</param>
        </member>
        <member name="M:GTA.World.DrawMarker(GTA.MarkerType,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            Draws a marker in the world, this needs to be done on a per frame basis
            </summary>
            <param name="type">The type of marker.</param>
            <param name="pos">The position of the marker.</param>
            <param name="dir">The direction the marker points in.</param>
            <param name="rot">The rotation of the marker.</param>
            <param name="scale">The amount to scale the marker by.</param>
            <param name="color">The color of the marker.</param>
            <param name="bobUpAndDown">if set to <see langword="true" /> the marker will bob up and down.</param>
            <param name="faceCamera">if set to <see langword="true" /> the marker will always face the camera, regardless of its rotation.</param>
            <param name="rotateY">if set to <see langword="true" /> rotates only on the y axis(heading).</param>
            <param name="textueDict">Name of texture dictionary to load the texture from, leave null for no texture in the marker.</param>
            <param name="textureName">Name of texture inside the dictionary to load the texture from, leave null for no texture in the marker.</param>
            <param name="drawOnEntity">if set to <see langword="true" /> draw on any <see cref="T:GTA.Entity"/> that intersects the marker.</param>
        </member>
        <member name="M:GTA.World.DrawLightWithRange(GTA.Math.Vector3,System.Drawing.Color,System.Single,System.Single)">
            <summary>
            Draws light around a region.
            </summary>
            <param name="position">The position to center the light around.</param>
            <param name="color">The color of the light.</param>
            <param name="range">How far the light should extend to.</param>
            <param name="intensity">The intensity: <c>0.0f</c> being no intensity, <c>1.0f</c> being full intensity.</param>
        </member>
        <member name="M:GTA.World.DrawBoxForAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Drawing.Color,GTA.DrawBoxFlags)">
            <summary>
            Draws a box that occupies the angled area.
            An angled area is an X-Z oriented rectangle with three parameters: origin, extent, and width.
            </summary>
            <param name="originEdge">The mid-point along a base edge of the rectangle.</param>
            <param name="extentEdge">The mid-point of opposite base edge on the other Z.</param>
            <param name="width">The length of the base edge.</param>
            <param name="color">The color of the box.</param>
            <param name="drawFlags">Which sides to draw.</param>
        </member>
        <member name="M:GTA.World.Raycast(GTA.Math.Vector3,GTA.Math.Vector3,GTA.IntersectFlags,GTA.Entity)">
            <summary>
            Creates a raycast between 2 points.
            </summary>
            <param name="source">The source of the raycast.</param>
            <param name="target">The target of the raycast.</param>
            <param name="options">What type of objects the raycast should intersect with.</param>
            <param name="ignoreEntity">Specify an <see cref="T:GTA.Entity"/> that the raycast should ignore, leave null for no entities ignored.</param>
        </member>
        <member name="M:GTA.World.Raycast(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.IntersectFlags,GTA.Entity)">
            <summary>
            Creates a raycast between 2 points.
            </summary>
            <param name="source">The source of the raycast.</param>
            <param name="direction">The direction of the raycast.</param>
            <param name="maxDistance">How far the raycast should go out to.</param>
            <param name="options">What type of objects the raycast should intersect with.</param>
            <param name="ignoreEntity">Specify an <see cref="T:GTA.Entity"/> that the raycast should ignore, leave null for no entities ignored.</param>
        </member>
        <member name="M:GTA.World.RaycastCapsule(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.IntersectFlags,GTA.Entity)">
            <summary>
            Creates a 3D raycast between 2 points.
            </summary>
            <param name="source">The source of the raycast.</param>
            <param name="target">The target of the raycast.</param>
            <param name="radius">The radius of the raycast.</param>
            <param name="options">What type of objects the raycast should intersect with.</param>
            <param name="ignoreEntity">Specify an <see cref="T:GTA.Entity"/> that the raycast should ignore, leave null for no entities ignored.</param>
        </member>
        <member name="M:GTA.World.RaycastCapsule(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Single,GTA.IntersectFlags,GTA.Entity)">
            <summary>
            Creates a 3D raycast between 2 points.
            </summary>
            <param name="source">The source of the raycast.</param>
            <param name="direction">The direction of the raycast.</param>
            <param name="radius">The radius of the raycast.</param>
            <param name="maxDistance">How far the raycast should go out to.</param>
            <param name="options">What type of objects the raycast should intersect with.</param>
            <param name="ignoreEntity">Specify an <see cref="T:GTA.Entity"/> that the raycast should ignore, leave null for no entities ignored.</param>
        </member>
        <member name="M:GTA.World.GetCrosshairCoordinates">
            <summary>
            Determines where the crosshair intersects with the world.
            </summary>
            <returns>A <see cref="T:GTA.RaycastResult"/> containing information about where the crosshair intersects with the world.</returns>
        </member>
        <member name="M:GTA.World.GetCrosshairCoordinates(GTA.IntersectFlags,GTA.Entity)">
            <summary>
            Determines where the crosshair intersects with the world.
            </summary>
            <param name="intersectOptions">Type of <see cref="T:GTA.IntersectFlags">environment</see> the raycast should intersect with.</param>
            <param name="ignoreEntity">Prevent the raycast detecting a specific <see cref="T:GTA.Entity"/>.</param>
            <returns>A <see cref="T:GTA.RaycastResult"/> containing information about where the crosshair intersects with the world.</returns>
        </member>
        <member name="M:GTA.World.GetDistance(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Gets the straight line distance between 2 positions.
            </summary>
            <param name="origin">The origin.</param>
            <param name="destination">The destination.</param>
            <returns>The distance</returns>
        </member>
        <member name="M:GTA.World.CalculateTravelDistance(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Calculates the travel distance using roads and paths between 2 positions.
            </summary>
            <param name="origin">The origin.</param>
            <param name="destination">The destination.</param>
            <returns>The travel distance</returns>
        </member>
        <member name="M:GTA.World.GetGroundHeight(GTA.Math.Vector2)">
            <summary>
            Gets the height of the ground at a given position.
            </summary>
            <param name="position">The position.</param>
            <returns>The height measured in meters</returns>
        </member>
        <member name="M:GTA.World.GetGroundHeight(GTA.Math.Vector3)">
            <summary>
            Gets the height of the ground at a given position.
            Note : If the Vector3 is already below the ground, this will return 0.
            You may want to use the other overloaded function to be safe.
            </summary>
            <param name="position">The position.</param>
            <returns>The height measured in meters</returns>
        </member>
        <member name="M:GTA.World.GetSafeCoordForPed(GTA.Math.Vector3,System.Boolean,System.Int32)">
            <summary>
            Gets the nearest safe coordinate to position a <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="position">The position to check around.</param>
            <param name="sidewalk">if set to <see langword="true" /> Only find positions on the sidewalk.</param>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:GTA.World.GetNextPositionOnStreet(GTA.Math.Vector2,System.Boolean)">
            <summary>
            Gets the next position on the street where a <see cref="T:GTA.Vehicle"/> can be placed.
            </summary>
            <param name="position">The position to check around.</param>
            <param name="unoccupied">if set to <see langword="true" /> only find positions that dont already have a vehicle in them.</param>
        </member>
        <member name="M:GTA.World.GetNextPositionOnStreet(GTA.Math.Vector3,System.Boolean)">
            <summary>
            Gets the next position on the street where a <see cref="T:GTA.Vehicle"/> can be placed.
            </summary>
            <param name="position">The position to check around.</param>
            <param name="unoccupied">if set to <see langword="true" /> only find positions that dont already have a vehicle in them.</param>
        </member>
        <member name="M:GTA.World.GetNextPositionOnSidewalk(GTA.Math.Vector2)">
            <summary>
            Gets the next position on the street where a <see cref="T:GTA.Ped"/> can be placed.
            </summary>
            <param name="position">The position to check around.</param>
        </member>
        <member name="M:GTA.World.GetNextPositionOnSidewalk(GTA.Math.Vector3)">
            <summary>
            Gets the next position on the street where a <see cref="T:GTA.Ped"/> can be placed.
            </summary>
            <param name="position">The position to check around.</param>
        </member>
        <member name="M:GTA.World.GetStreetName(GTA.Math.Vector2)">
            <summary>
            Determines the name of the street which is the closest to the given coordinates.
            </summary>
        </member>
        <member name="M:GTA.World.GetStreetName(GTA.Math.Vector3)">
            <summary>
            Determines the name of the street which is the closest to the given coordinates.
            </summary>
        </member>
        <member name="M:GTA.World.GetStreetName(GTA.Math.Vector3,System.String@)">
            <summary>
            Determines the name of the street which is the closest to the given coordinates.
            </summary>
            <param name="position">The coordinates of the street</param>
            <param name="crossingRoadName">If the coordinates are on an intersection, the name of the crossing road</param>
            <returns>Returns the name of the street the coordinates are on.</returns>
        </member>
        <member name="M:GTA.World.GetZoneDisplayName(GTA.Math.Vector2)">
            <summary>
            Gets the display name of the a zone in the map.
            Use <see cref="M:GTA.Game.GetLocalizedString(System.String)"/> to convert to the localized name.
            </summary>
            <param name="position">The position on the map.</param>
        </member>
        <member name="M:GTA.World.GetZoneDisplayName(GTA.Math.Vector3)">
            <summary>
            Gets the display name of the a zone in the map.
            Use <see cref="M:GTA.Game.GetLocalizedString(System.String)"/> to convert to the localized name.
            </summary>
            <param name="position">The position on the map.</param>
        </member>
        <member name="M:GTA.World.GetZoneLocalizedName(GTA.Math.Vector2)">
            <summary>
            Gets the localized name of the a zone in the map.
            </summary>
            <param name="position">The position on the map.</param>
        </member>
        <member name="M:GTA.World.GetZoneLocalizedName(GTA.Math.Vector3)">
            <summary>
            Gets the localized name of the a zone in the map.
            </summary>
            <param name="position">The position on the map.</param>
        </member>
        <member name="M:GTA.World.IsPointInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean)">
            <summary>
            Determines whether the specified point is in the angled area.
            An angled area is an X-Z oriented rectangle with three parameters: origin, extent, and width.
            </summary>
            <param name="point">The point to check whether is in the angled area.</param>
            <param name="originEdge">The mid-point along a base edge of the rectangle.</param>
            <param name="extentEdge">The mid-point of opposite base edge on the other Z.</param>
            <param name="width">The length of the base edge.</param>
            <param name="includeZAxis">
            If set to <see langword="true" />, the method will also check if the point is in area in Z axis as well as X and Y axes.
            If set to <see langword="false" />, the method will only check if the point is in area in X and Y axes.
            </param>
             <returns>
              <see langword="true" /> if the specified point is in the specified angled area; otherwise, <see langword="false" />.
            </returns>
        </member>
    </members>
</doc>
