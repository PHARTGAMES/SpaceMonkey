<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NAudio.Wasapi</name>
    </assembly>
    <members>
        <member name="T:NAudio.Wave.ComStream">
            <summary>
            Implementation of Com IStream
            </summary>
        </member>
        <member name="T:NAudio.Wave.DmoEffectWaveProvider`2">
            <summary>
            Provide WaveProvider that can apply effects in real time using DMO.
            
            If the audio thread is running on the STA thread, please generate and operate from the same thread.
            If the audio thread is running on the MTA thread, please operate on any MTA thread.
            </summary>
            <typeparam name="TDmoEffector">Types of DMO effectors to use</typeparam>
            <typeparam name="TEffectorParam">Parameters of the effect to be used</typeparam>
        </member>
        <member name="M:NAudio.Wave.DmoEffectWaveProvider`2.#ctor(NAudio.Wave.IWaveProvider)">
            <summary>
            Create a new DmoEffectWaveProvider
            </summary>
            <param name="inputProvider">Input Stream</param>
        </member>
        <member name="P:NAudio.Wave.DmoEffectWaveProvider`2.WaveFormat">
            <summary>
            Stream Wave Format
            </summary>
        </member>
        <member name="M:NAudio.Wave.DmoEffectWaveProvider`2.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from input stream
            </summary>
            <param name="buffer">buffer</param>
            <param name="offset">offset into buffer</param>
            <param name="count">Bytes required</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="P:NAudio.Wave.DmoEffectWaveProvider`2.EffectParams">
            <summary>
            Get Effector Parameters
            </summary>
        </member>
        <member name="M:NAudio.Wave.DmoEffectWaveProvider`2.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:NAudio.Wave.MediaFoundationEncoder">
            <summary>
            Media Foundation Encoder class allows you to use Media Foundation to encode an IWaveProvider
            to any supported encoding format
            </summary>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationEncoder.GetEncodeBitrates(System.Guid,System.Int32,System.Int32)">
            <summary>
            Queries the available bitrates for a given encoding output type, sample rate and number of channels
            </summary>
            <param name="audioSubtype">Audio subtype - a value from the AudioSubtypes class</param>
            <param name="sampleRate">The sample rate of the PCM to encode</param>
            <param name="channels">The number of channels of the PCM to encode</param>
            <returns>An array of available bitrates in average bits per second</returns>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationEncoder.GetOutputMediaTypes(System.Guid)">
            <summary>
            Gets all the available media types for a particular 
            </summary>
            <param name="audioSubtype">Audio subtype - a value from the AudioSubtypes class</param>
            <returns>An array of available media types that can be encoded with this subtype</returns>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationEncoder.EncodeToWma(NAudio.Wave.IWaveProvider,System.String,System.Int32)">
            <summary>
            Helper function to simplify encoding Window Media Audio
            Should be supported on Vista and above (not tested)
            </summary>
            <param name="inputProvider">Input provider, must be PCM</param>
            <param name="outputFile">Output file path, should end with .wma</param>
            <param name="desiredBitRate">Desired bitrate. Use GetEncodeBitrates to find the possibilities for your input type</param>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationEncoder.EncodeToWma(NAudio.Wave.IWaveProvider,System.IO.Stream,System.Int32)">
            <summary>
            Helper function to simplify encoding Window Media Audio
            Should be supported on Vista and above (not tested)
            </summary>
            <param name="inputProvider">Input provider, must be PCM</param>
            <param name="outputStream">Output stream</param>
            <param name="desiredBitRate">Desired bitrate. Use GetEncodeBitrates to find the possibilities for your input type</param>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationEncoder.EncodeToMp3(NAudio.Wave.IWaveProvider,System.String,System.Int32)">
            <summary>
            Helper function to simplify encoding to MP3
            By default, will only be available on Windows 8 and above
            </summary>
            <param name="inputProvider">Input provider, must be PCM</param>
            <param name="outputFile">Output file path, should end with .mp3</param>
            <param name="desiredBitRate">Desired bitrate. Use GetEncodeBitrates to find the possibilities for your input type</param>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationEncoder.EncodeToMp3(NAudio.Wave.IWaveProvider,System.IO.Stream,System.Int32)">
            <summary>
            Helper function to simplify encoding to MP3
            By default, will only be available on Windows 8 and above
            </summary>
            <param name="inputProvider">Input provider, must be PCM</param>
            <param name="outputStream">Output stream</param>
            <param name="desiredBitRate">Desired bitrate. Use GetEncodeBitrates to find the possibilities for your input type</param>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationEncoder.EncodeToAac(NAudio.Wave.IWaveProvider,System.String,System.Int32)">
            <summary>
            Helper function to simplify encoding to AAC
            By default, will only be available on Windows 7 and above
            </summary>
            <param name="inputProvider">Input provider, must be PCM</param>
            <param name="outputFile">Output file path, should end with .mp4 (or .aac on Windows 8)</param>
            <param name="desiredBitRate">Desired bitrate. Use GetEncodeBitrates to find the possibilities for your input type</param>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationEncoder.EncodeToAac(NAudio.Wave.IWaveProvider,System.IO.Stream,System.Int32)">
            <summary>
            Helper function to simplify encoding to AAC
            By default, will only be available on Windows 7 and above
            </summary>
            <param name="inputProvider">Input provider, must be PCM</param>
            <param name="outputStream">Output stream</param>
            <param name="desiredBitRate">Desired bitrate. Use GetEncodeBitrates to find the possibilities for your input type</param>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationEncoder.SelectMediaType(System.Guid,NAudio.Wave.WaveFormat,System.Int32)">
            <summary>
            Tries to find the encoding media type with the closest bitrate to that specified
            </summary>
            <param name="audioSubtype">Audio subtype, a value from AudioSubtypes</param>
            <param name="inputFormat">Your encoder input format (used to check sample rate and channel count)</param>
            <param name="desiredBitRate">Your desired bitrate</param>
            <returns>The closest media type, or null if none available</returns>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationEncoder.#ctor(NAudio.MediaFoundation.MediaType)">
            <summary>
            Creates a new encoder that encodes to the specified output media type
            </summary>
            <param name="outputMediaType">Desired output media type</param>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationEncoder.Encode(System.String,NAudio.Wave.IWaveProvider)">
            <summary>
            Encodes a file
            </summary>
            <param name="outputFile">Output filename (container type is deduced from the filename)</param>
            <param name="inputProvider">Input provider (should be PCM, some encoders will also allow IEEE float)</param>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationEncoder.Encode(System.IO.Stream,NAudio.Wave.IWaveProvider,System.Guid)">
            <summary>
            Encodes a file
            </summary>
            <param name="outputStream">Output stream</param>
            <param name="inputProvider">Input provider (should be PCM, some encoders will also allow IEEE float)</param>
            <param name="transcodeContainerType">One of <see cref="T:NAudio.MediaFoundation.TranscodeContainerTypes"/></param>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationEncoder.Dispose(System.Boolean)">
            <summary>
            Disposes this instance
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationEncoder.Dispose">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationEncoder.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="T:NAudio.Wave.MediaFoundationReader">
            <summary>
            Class for reading any file that Media Foundation can play
            Will only work in Windows Vista and above
            Automatically converts to PCM
            If it is a video file with multiple audio streams, it will pick out the first audio stream
            </summary>
        </member>
        <member name="T:NAudio.Wave.MediaFoundationReader.MediaFoundationReaderSettings">
            <summary>
            Allows customisation of this reader class
            </summary>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationReader.MediaFoundationReaderSettings.#ctor">
            <summary>
            Sets up the default settings for MediaFoundationReader
            </summary>
        </member>
        <member name="P:NAudio.Wave.MediaFoundationReader.MediaFoundationReaderSettings.RequestFloatOutput">
            <summary>
            Allows us to request IEEE float output (n.b. no guarantee this will be accepted)
            </summary>
        </member>
        <member name="P:NAudio.Wave.MediaFoundationReader.MediaFoundationReaderSettings.SingleReaderObject">
            <summary>
            If true, the reader object created in the constructor is used in Read
            Should only be set to true if you are working entirely on an STA thread, or 
            entirely with MTA threads.
            </summary>
        </member>
        <member name="P:NAudio.Wave.MediaFoundationReader.MediaFoundationReaderSettings.RepositionInRead">
            <summary>
            If true, the reposition does not happen immediately, but waits until the
            next call to read to be processed.
            </summary>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationReader.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationReader.#ctor(System.String)">
            <summary>
            Creates a new MediaFoundationReader based on the supplied file
            </summary>
            <param name="file">Filename (can also be a URL  e.g. http:// mms:// file://)</param>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationReader.#ctor(System.String,NAudio.Wave.MediaFoundationReader.MediaFoundationReaderSettings)">
            <summary>
            Creates a new MediaFoundationReader based on the supplied file
            </summary>
            <param name="file">Filename</param>
            <param name="settings">Advanced settings</param>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationReader.Init(NAudio.Wave.MediaFoundationReader.MediaFoundationReaderSettings)">
            <summary>
            Initializes 
            </summary>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationReader.CreateReader(NAudio.Wave.MediaFoundationReader.MediaFoundationReaderSettings)">
            <summary>
            Creates the reader (overridable by )
            </summary>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from this wave stream
            </summary>
            <param name="buffer">Buffer to read into</param>
            <param name="offset">Offset in buffer</param>
            <param name="count">Bytes required</param>
            <returns>Number of bytes read; 0 indicates end of stream</returns>
        </member>
        <member name="P:NAudio.Wave.MediaFoundationReader.WaveFormat">
            <summary>
            WaveFormat of this stream (n.b. this is after converting to PCM)
            </summary>
        </member>
        <member name="P:NAudio.Wave.MediaFoundationReader.Length">
            <summary>
            The bytesRequired of this stream in bytes (n.b may not be accurate)
            </summary>
        </member>
        <member name="P:NAudio.Wave.MediaFoundationReader.Position">
            <summary>
            Current position within this stream
            </summary>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationReader.Dispose(System.Boolean)">
            <summary>
            Cleans up after finishing with this reader
            </summary>
            <param name="disposing">true if called from Dispose</param>
        </member>
        <member name="E:NAudio.Wave.MediaFoundationReader.WaveFormatChanged">
            <summary>
            WaveFormat has changed
            </summary>
        </member>
        <member name="T:NAudio.Wave.MediaFoundationResampler">
            <summary>
            The Media Foundation Resampler Transform
            </summary>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationResampler.#ctor(NAudio.Wave.IWaveProvider,NAudio.Wave.WaveFormat)">
            <summary>
            Creates the Media Foundation Resampler, allowing modifying of sample rate, bit depth and channel count
            </summary>
            <param name="sourceProvider">Source provider, must be PCM</param>
            <param name="outputFormat">Output format, must also be PCM</param>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationResampler.#ctor(NAudio.Wave.IWaveProvider,System.Int32)">
            <summary>
            Creates a resampler with a specified target output sample rate
            </summary>
            <param name="sourceProvider">Source provider</param>
            <param name="outputSampleRate">Output sample rate</param>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationResampler.CreateTransform">
            <summary>
            Creates and configures the actual Resampler transform
            </summary>
            <returns>A newly created and configured resampler MFT</returns>
        </member>
        <member name="P:NAudio.Wave.MediaFoundationResampler.ResamplerQuality">
            <summary>
            Gets or sets the Resampler quality. n.b. set the quality before starting to resample.
            1 is lowest quality (linear interpolation) and 60 is best quality
            </summary>
        </member>
        <member name="M:NAudio.Wave.MediaFoundationResampler.Dispose(System.Boolean)">
            <summary>
            Disposes this resampler
            </summary>
        </member>
        <member name="T:NAudio.Wave.ResamplerDmoStream">
            <summary>
            Wave Stream for converting between sample rates
            </summary>
        </member>
        <member name="M:NAudio.Wave.ResamplerDmoStream.#ctor(NAudio.Wave.IWaveProvider,NAudio.Wave.WaveFormat)">
            <summary>
            WaveStream to resample using the DMO Resampler
            </summary>
            <param name="inputProvider">Input Stream</param>
            <param name="outputFormat">Desired Output Format</param>
        </member>
        <member name="P:NAudio.Wave.ResamplerDmoStream.WaveFormat">
            <summary>
            Stream Wave Format
            </summary>
        </member>
        <member name="P:NAudio.Wave.ResamplerDmoStream.Length">
            <summary>
            Stream length in bytes
            </summary>
        </member>
        <member name="P:NAudio.Wave.ResamplerDmoStream.Position">
            <summary>
            Stream position in bytes
            </summary>
        </member>
        <member name="M:NAudio.Wave.ResamplerDmoStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from input stream
            </summary>
            <param name="buffer">buffer</param>
            <param name="offset">offset into buffer</param>
            <param name="count">Bytes required</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:NAudio.Wave.ResamplerDmoStream.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">True if disposing (not from finalizer)</param>
        </member>
        <member name="T:NAudio.Wave.StreamMediaFoundationReader">
            <summary>
            MediaFoundationReader supporting reading from a stream
            </summary>
        </member>
        <member name="M:NAudio.Wave.StreamMediaFoundationReader.#ctor(System.IO.Stream,NAudio.Wave.MediaFoundationReader.MediaFoundationReaderSettings)">
            <summary>
            Constructs a new media foundation reader from a stream
            </summary>
        </member>
        <member name="M:NAudio.Wave.StreamMediaFoundationReader.CreateReader(NAudio.Wave.MediaFoundationReader.MediaFoundationReaderSettings)">
            <summary>
            Creates the reader
            </summary>
        </member>
        <member name="T:NAudio.Wave.WasapiLoopbackCapture">
            <summary>
            WASAPI Loopback Capture
            based on a contribution from "Pygmy" - http://naudio.codeplex.com/discussions/203605
            </summary>
        </member>
        <member name="M:NAudio.Wave.WasapiLoopbackCapture.#ctor">
            <summary>
            Initialises a new instance of the WASAPI capture class
            </summary>
        </member>
        <member name="M:NAudio.Wave.WasapiLoopbackCapture.#ctor(NAudio.CoreAudioApi.MMDevice)">
            <summary>
            Initialises a new instance of the WASAPI capture class
            </summary>
            <param name="captureDevice">Capture device to use</param>
        </member>
        <member name="M:NAudio.Wave.WasapiLoopbackCapture.GetDefaultLoopbackCaptureDevice">
            <summary>
            Gets the default audio loopback capture device
            </summary>
            <returns>The default audio loopback capture device</returns>
        </member>
        <member name="M:NAudio.Wave.WasapiLoopbackCapture.GetAudioClientStreamFlags">
            <summary>
            Specify loopback
            </summary>
        </member>
        <member name="T:NAudio.Wave.WasapiOut">
            <summary>
            Support for playback using Wasapi
            </summary>
        </member>
        <member name="E:NAudio.Wave.WasapiOut.PlaybackStopped">
            <summary>
            Playback Stopped
            </summary>
        </member>
        <member name="M:NAudio.Wave.WasapiOut.#ctor">
            <summary>
            WASAPI Out shared mode, default
            </summary>
        </member>
        <member name="M:NAudio.Wave.WasapiOut.#ctor(NAudio.CoreAudioApi.AudioClientShareMode,System.Int32)">
            <summary>
            WASAPI Out using default audio endpoint
            </summary>
            <param name="shareMode">ShareMode - shared or exclusive</param>
            <param name="latency">Desired latency in milliseconds</param>
        </member>
        <member name="M:NAudio.Wave.WasapiOut.#ctor(NAudio.CoreAudioApi.AudioClientShareMode,System.Boolean,System.Int32)">
            <summary>
            WASAPI Out using default audio endpoint
            </summary>
            <param name="shareMode">ShareMode - shared or exclusive</param>
            <param name="useEventSync">true if sync is done with event. false use sleep.</param>
            <param name="latency">Desired latency in milliseconds</param>
        </member>
        <member name="M:NAudio.Wave.WasapiOut.#ctor(NAudio.CoreAudioApi.MMDevice,NAudio.CoreAudioApi.AudioClientShareMode,System.Boolean,System.Int32)">
            <summary>
            Creates a new WASAPI Output
            </summary>
            <param name="device">Device to use</param>
            <param name="shareMode"></param>
            <param name="useEventSync">true if sync is done with event. false use sleep.</param>
            <param name="latency">Desired latency in milliseconds</param>
        </member>
        <member name="M:NAudio.Wave.WasapiOut.FillBuffer(NAudio.Wave.IWaveProvider,System.Int32)">
            <summary>
            returns true if reached the end
            </summary>
        </member>
        <member name="M:NAudio.Wave.WasapiOut.GetPosition">
            <summary>
            Gets the current position in bytes from the wave output device.
            (n.b. this is not the same thing as the position within your reader
            stream)
            </summary>
            <returns>Position in bytes</returns>
        </member>
        <member name="P:NAudio.Wave.WasapiOut.OutputWaveFormat">
            <summary>
            Gets a <see cref="T:NAudio.Wave.WaveFormat"/> instance indicating the format the hardware is using.
            </summary>
        </member>
        <member name="M:NAudio.Wave.WasapiOut.Play">
            <summary>
            Begin Playback
            </summary>
        </member>
        <member name="M:NAudio.Wave.WasapiOut.Stop">
            <summary>
            Stop playback and flush buffers
            </summary>
        </member>
        <member name="M:NAudio.Wave.WasapiOut.Pause">
            <summary>
            Stop playback without flushing buffers
            </summary>
        </member>
        <member name="M:NAudio.Wave.WasapiOut.Init(NAudio.Wave.IWaveProvider)">
            <summary>
            Initialize for playing the specified wave stream
            </summary>
            <param name="waveProvider">IWaveProvider to play</param>
        </member>
        <member name="P:NAudio.Wave.WasapiOut.PlaybackState">
            <summary>
            Playback State
            </summary>
        </member>
        <member name="P:NAudio.Wave.WasapiOut.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="P:NAudio.Wave.WasapiOut.AudioStreamVolume">
            <summary>
            Retrieve the AudioStreamVolume object for this audio stream
            </summary>
            <remarks>
            This returns the AudioStreamVolume object ONLY for shared audio streams.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when an exclusive audio stream is being used.
            </exception>
        </member>
        <member name="M:NAudio.Wave.WasapiOut.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:NAudio.Wasapi.CoreAudioApi.AudioVolumeLevel">
            <summary>
            Audio Volume Level
            </summary>
        </member>
        <member name="M:NAudio.Wasapi.CoreAudioApi.NativeMethods.ActivateAudioInterfaceAsync(System.String,System.Guid,System.IntPtr,NAudio.Wasapi.CoreAudioApi.Interfaces.IActivateAudioInterfaceCompletionHandler,NAudio.Wasapi.CoreAudioApi.Interfaces.IActivateAudioInterfaceAsyncOperation@)">
            <summary>
            Enables Windows Store apps to access preexisting Component Object Model (COM) interfaces in the WASAPI family.
            </summary>
            <param name="deviceInterfacePath">A device interface ID for an audio device. This is normally retrieved from a DeviceInformation object or one of the methods of the MediaDevice class.</param>
            <param name="riid">The IID of a COM interface in the WASAPI family, such as IAudioClient.</param>
            <param name="activationParams">Interface-specific activation parameters. For more information, see the pActivationParams parameter in IMMDevice::Activate. </param>
            <param name="completionHandler"></param>
            <param name="activationOperation"></param>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioCaptureClient">
            <summary>
            Audio Capture Client
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioCaptureClient.GetBuffer(System.Int32@,NAudio.CoreAudioApi.AudioClientBufferFlags@,System.Int64@,System.Int64@)">
            <summary>
            Gets a pointer to the buffer
            </summary>
            <returns>Pointer to the buffer</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioCaptureClient.GetBuffer(System.Int32@,NAudio.CoreAudioApi.AudioClientBufferFlags@)">
            <summary>
            Gets a pointer to the buffer
            </summary>
            <param name="numFramesToRead">Number of frames to read</param>
            <param name="bufferFlags">Buffer flags</param>
            <returns>Pointer to the buffer</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioCaptureClient.GetNextPacketSize">
            <summary>
            Gets the size of the next packet
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioCaptureClient.ReleaseBuffer(System.Int32)">
            <summary>
            Release buffer
            </summary>
            <param name="numFramesWritten">Number of frames written</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioCaptureClient.Dispose">
            <summary>
            Release the COM object
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioClient">
            <summary>
            Windows CoreAudio AudioClient
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioClient.ActivateAsync(System.String,System.Nullable{NAudio.CoreAudioApi.AudioClientProperties})">
            <summary>
            Activate Async
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioClient.MixFormat">
            <summary>
            Retrieves the stream format that the audio engine uses for its internal processing of shared-mode streams.
            Can be called before initialize
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioClient.Initialize(NAudio.CoreAudioApi.AudioClientShareMode,NAudio.CoreAudioApi.AudioClientStreamFlags,System.Int64,System.Int64,NAudio.Wave.WaveFormat,System.Guid)">
            <summary>
            Initializes the Audio Client
            </summary>
            <param name="shareMode">Share Mode</param>
            <param name="streamFlags">Stream Flags</param>
            <param name="bufferDuration">Buffer Duration</param>
            <param name="periodicity">Periodicity</param>
            <param name="waveFormat">Wave Format</param>
            <param name="audioSessionGuid">Audio Session GUID (can be null)</param>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioClient.BufferSize">
            <summary>
            Retrieves the size (maximum capacity) of the audio buffer associated with the endpoint. (must initialize first)
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioClient.StreamLatency">
            <summary>
            Retrieves the maximum latency for the current stream and can be called any time after the stream has been initialized.
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioClient.CurrentPadding">
            <summary>
            Retrieves the number of frames of padding in the endpoint buffer (must initialize first)
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioClient.DefaultDevicePeriod">
            <summary>
            Retrieves the length of the periodic interval separating successive processing passes by the audio engine on the data in the endpoint buffer.
            (can be called before initialize)
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioClient.MinimumDevicePeriod">
            <summary>
            Gets the minimum device period 
            (can be called before initialize)
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioClient.AudioStreamVolume">
            <summary>
            Returns the AudioStreamVolume service for this AudioClient.
            </summary>
            <remarks>
            This returns the AudioStreamVolume object ONLY for shared audio streams.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when an exclusive audio stream is being used.
            </exception>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioClient.AudioClockClient">
            <summary>
            Gets the AudioClockClient service
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioClient.AudioRenderClient">
            <summary>
            Gets the AudioRenderClient service
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioClient.AudioCaptureClient">
            <summary>
            Gets the AudioCaptureClient service
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioClient.IsFormatSupported(NAudio.CoreAudioApi.AudioClientShareMode,NAudio.Wave.WaveFormat)">
            <summary>
            Determines whether if the specified output format is supported
            </summary>
            <param name="shareMode">The share mode.</param>
            <param name="desiredFormat">The desired format.</param>
            <returns>True if the format is supported</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioClient.IsFormatSupported(NAudio.CoreAudioApi.AudioClientShareMode,NAudio.Wave.WaveFormat,NAudio.Wave.WaveFormatExtensible@)">
            <summary>
            Determines if the specified output format is supported in shared mode
            </summary>
            <param name="shareMode">Share Mode</param>
            <param name="desiredFormat">Desired Format</param>
            <param name="closestMatchFormat">Output The closest match format.</param>
            <returns>True if the format is supported</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioClient.Start">
            <summary>
            Starts the audio stream
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioClient.Stop">
            <summary>
            Stops the audio stream.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioClient.SetEventHandle(System.IntPtr)">
            <summary>
            Set the Event Handle for buffer synchro.
            </summary>
            <param name="eventWaitHandle">The Wait Handle to setup</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioClient.Reset">
            <summary>
            Resets the audio stream
            Reset is a control method that the client calls to reset a stopped audio stream. 
            Resetting the stream flushes all pending data and resets the audio clock stream 
            position to 0. This method fails if it is called on a stream that is not stopped
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioClient.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioClientBufferFlags">
            <summary>
            Audio Client Buffer Flags
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientBufferFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientBufferFlags.DataDiscontinuity">
            <summary>
            AUDCLNT_BUFFERFLAGS_DATA_DISCONTINUITY
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientBufferFlags.Silent">
            <summary>
            AUDCLNT_BUFFERFLAGS_SILENT
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientBufferFlags.TimestampError">
            <summary>
            AUDCLNT_BUFFERFLAGS_TIMESTAMP_ERROR
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioClientProperties">
            <summary>
            The AudioClientProperties structure is used to set the parameters that describe the properties of the client's audio stream.
            </summary>
            <remarks>https://docs.microsoft.com/en-us/windows/win32/api/audioclient/ns-audioclient-audioclientproperties-r1</remarks>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientProperties.cbSize">
            <summary>
            The size of the buffer for the audio stream.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientProperties.bIsOffload">
            <summary>
            Boolean value to indicate whether or not the audio stream is hardware-offloaded
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientProperties.eCategory">
            <summary>
            An enumeration that is used to specify the category of the audio stream.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientProperties.Options">
            <summary>
            A bit-field describing the characteristics of the stream. Supported in Windows 8.1 and later.
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioClientShareMode">
            <summary>
            AUDCLNT_SHAREMODE
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientShareMode.Shared">
            <summary>
            AUDCLNT_SHAREMODE_SHARED,
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientShareMode.Exclusive">
            <summary>
            AUDCLNT_SHAREMODE_EXCLUSIVE
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioClientStreamFlags">
            <summary>
            AUDCLNT_STREAMFLAGS
            https://docs.microsoft.com/en-us/windows/win32/coreaudio/audclnt-streamflags-xxx-constants
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientStreamFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientStreamFlags.CrossProcess">
            <summary>
            AUDCLNT_STREAMFLAGS_CROSSPROCESS
            The audio stream will be a member of a cross-process audio session.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientStreamFlags.Loopback">
            <summary>
            AUDCLNT_STREAMFLAGS_LOOPBACK
            The audio stream will operate in loopback mode
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientStreamFlags.EventCallback">
            <summary>
            AUDCLNT_STREAMFLAGS_EVENTCALLBACK 
            Processing of the audio buffer by the client will be event driven
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientStreamFlags.NoPersist">
            <summary>
            AUDCLNT_STREAMFLAGS_NOPERSIST   
            The volume and mute settings for an audio session will not persist across application restarts
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientStreamFlags.RateAdjust">
            <summary>
            AUDCLNT_STREAMFLAGS_RATEADJUST
            The sample rate of the stream is adjusted to a rate specified by an application.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientStreamFlags.SrcDefaultQuality">
            <summary>
            AUDCLNT_STREAMFLAGS_SRC_DEFAULT_QUALITY
            When used with AUDCLNT_STREAMFLAGS_AUTOCONVERTPCM, a sample rate converter with better quality 
            than the default conversion but with a higher performance cost is used. This should be used if 
            the audio is ultimately intended to be heard by humans as opposed to other scenarios such as 
            pumping silence or populating a meter.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientStreamFlags.AutoConvertPcm">
            <summary>
            AUDCLNT_STREAMFLAGS_AUTOCONVERTPCM
            A channel matrixer and a sample rate converter are inserted as necessary to convert between the uncompressed format supplied to IAudioClient::Initialize and the audio engine mix format.
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioClientActivationParams">
            <summary>
            AUDIOCLIENT_ACTIVATION_PARAMS
            https://docs.microsoft.com/en-us/windows/win32/api/audioclientactivationparams/ns-audioclientactivationparams-audioclient_activation_params
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioClientProcessLoopbackParams">
            <summary>
            AUDIOCLIENT_PROCESS_LOOPBACK_PARAMS
            https://docs.microsoft.com/en-us/windows/win32/api/audioclientactivationparams/ns-audioclientactivationparams-audioclient_process_loopback_params
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientProcessLoopbackParams.TargetProcessId">
            <summary>
            AUDIOCLIENT_PROCESS_LOOPBACK_PARAMS
            The ID of the process for which the render streams, and the render streams of its child processes, will be included or excluded when activating the process loopback stream.
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.ProcessLoopbackMode">
            <summary>
            PROCESS_LOOPBACK_MODE
            https://docs.microsoft.com/en-us/windows/win32/api/audioclientactivationparams/ne-audioclientactivationparams-process_loopback_mode
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.ProcessLoopbackMode.IncludeTargetProcessTree">
            <summary>
            PROCESS_LOOPBACK_MODE_INCLUDE_TARGET_PROCESS_TREE
            Render streams from the specified process and its child processes are included in the activated process loopback stream.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.ProcessLoopbackMode.ExcludeTargetProcessTree">
            <summary>
            PROCESS_LOOPBACK_MODE_EXCLUDE_TARGET_PROCESS_TREE
            Render streams from the specified process and its child processes are excluded from the activated process loopback stream.
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioClientActivationType">
            <summary>
            AUDIOCLIENT_ACTIVATION_TYPE
            https://docs.microsoft.com/en-us/windows/win32/api/audioclientactivationparams/ne-audioclientactivationparams-audioclient_activation_type
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientActivationType.Default">
            <summary>
            AUDIOCLIENT_ACTIVATION_TYPE_DEFAULT
            Default activation.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientActivationType.ProcessLoopback">
            <summary>
            AUDIOCLIENT_ACTIVATION_TYPE_PROCESS_LOOPBACK
            Process loopback activation, allowing for the inclusion or exclusion of audio rendered by the specified process and its child processes.
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioClientStreamOptions">
            <summary>
            Defines values that describe the characteristics of an audio stream.
            AUDCLNT_STREAMOPTIONS 
            https://docs.microsoft.com/en-us/windows/win32/api/audioclient/ne-audioclient-audclnt_streamoptions
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientStreamOptions.None">
            <summary>
            AUDCLNT_STREAMOPTIONS_NONE
            No stream options.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientStreamOptions.Raw">
            <summary>
            AUDCLNT_STREAMOPTIONS_RAW
            The audio stream is a 'raw' stream that bypasses all signal processing except for endpoint specific, always-on processing in the APO, driver, and hardware.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientStreamOptions.MatchFormat">
            <summary>
            AUDCLNT_STREAMOPTIONS_MATCH_FORMAT
            The audio client is requesting that the audio engine match the format proposed by the client. The audio engine
            will match this format only if the format is supported by the audio driver and associated APOs.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientStreamOptions.Ambisonics">
            <summary>
            AUDCLNT_STREAMOPTIONS_AMBISONICS
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioClockClient">
            <summary>
            Audio Clock Client
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioClockClient.Characteristics">
            <summary>
            Characteristics
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioClockClient.Frequency">
            <summary>
            Frequency
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioClockClient.GetPosition(System.UInt64@,System.UInt64@)">
            <summary>
            Get Position
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioClockClient.AdjustedPosition">
            <summary>
            Adjusted Position
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioClockClient.CanAdjustPosition">
            <summary>
            Can Adjust Position
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioClockClient.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioEndpointVolume">
            <summary>
            Audio Endpoint Volume
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolume.NotificationGuid">
            <summary>
            GUID to pass to AudioEndpointVolumeCallback
            </summary>
        </member>
        <member name="E:NAudio.CoreAudioApi.AudioEndpointVolume.OnVolumeNotification">
            <summary>
            On Volume Notification
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolume.VolumeRange">
            <summary>
            Volume Range
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolume.HardwareSupport">
            <summary>
            Hardware Support
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolume.StepInformation">
            <summary>
            Step Information
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolume.Channels">
            <summary>
            Channels
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolume.MasterVolumeLevel">
            <summary>
            Master Volume Level
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolume.MasterVolumeLevelScalar">
            <summary>
            Master Volume Level Scalar
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolume.Mute">
            <summary>
            Mute
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioEndpointVolume.VolumeStepUp">
            <summary>
            Volume Step Up
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioEndpointVolume.VolumeStepDown">
            <summary>
            Volume Step Down
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioEndpointVolume.#ctor(NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolume)">
            <summary>
            Creates a new Audio endpoint volume
            </summary>
            <param name="realEndpointVolume">IAudioEndpointVolume COM interface</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioEndpointVolume.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioEndpointVolume.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioEndpointVolumeChannel">
            <summary>
            Audio Endpoint Volume Channel
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolumeChannel.NotificationGuid">
            <summary>
            GUID to pass to AudioEndpointVolumeCallback
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolumeChannel.VolumeLevel">
            <summary>
            Volume Level
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolumeChannel.VolumeLevelScalar">
            <summary>
            Volume Level Scalar
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioEndpointVolumeChannels">
            <summary>
            Audio Endpoint Volume Channels
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolumeChannels.Count">
            <summary>
            Channel Count
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolumeChannels.Item(System.Int32)">
            <summary>
            Indexer - get a specific channel
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioEndpointVolumeNotificationDelegate">
            <summary>
            Audio Endpoint Volume Notifiaction Delegate
            </summary>
            <param name="data">Audio Volume Notification Data</param>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioEndpointVolumeStepInformation">
            <summary>
            Audio Endpoint Volume Step Information
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolumeStepInformation.Step">
            <summary>
            Step
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolumeStepInformation.StepCount">
            <summary>
            StepCount
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioEndpointVolumeVolumeRange">
            <summary>
            Audio Endpoint Volume Volume Range
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolumeVolumeRange.MinDecibels">
            <summary>
            Minimum Decibels
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolumeVolumeRange.MaxDecibels">
            <summary>
            Maximum Decibels
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolumeVolumeRange.IncrementDecibels">
            <summary>
            Increment Decibels
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioMeterInformation">
            <summary>
            Audio Meter Information
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioMeterInformation.PeakValues">
            <summary>
            Peak Values
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioMeterInformation.HardwareSupport">
            <summary>
            Hardware Support
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioMeterInformation.MasterPeakValue">
            <summary>
            Master Peak Value
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioMeterInformationChannels">
            <summary>
            Audio Meter Information Channels
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioMeterInformationChannels.Count">
            <summary>
            Metering Channel Count
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioMeterInformationChannels.Item(System.Int32)">
            <summary>
            Get Peak value
            </summary>
            <param name="index">Channel index</param>
            <returns>Peak value</returns>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioRenderClient">
            <summary>
            Audio Render Client
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioRenderClient.GetBuffer(System.Int32)">
            <summary>
            Gets a pointer to the buffer
            </summary>
            <param name="numFramesRequested">Number of frames requested</param>
            <returns>Pointer to the buffer</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioRenderClient.ReleaseBuffer(System.Int32,NAudio.CoreAudioApi.AudioClientBufferFlags)">
            <summary>
            Release buffer
            </summary>
            <param name="numFramesWritten">Number of frames written</param>
            <param name="bufferFlags">Buffer flags</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioRenderClient.Dispose">
            <summary>
            Release the COM object
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioSessionControl">
            <summary>
            AudioSessionControl object for information
            regarding an audio session
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioSessionControl.#ctor(NAudio.CoreAudioApi.Interfaces.IAudioSessionControl)">
            <summary>
            Constructor.
            </summary>
            <param name="audioSessionControl"></param>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioSessionControl.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioSessionControl.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioSessionControl.AudioMeterInformation">
            <summary>
            Audio meter information of the audio session.
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioSessionControl.SimpleAudioVolume">
            <summary>
            Simple audio volume of the audio session (for volume and mute status).
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioSessionControl.State">
            <summary>
            The current state of the audio session.
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioSessionControl.DisplayName">
            <summary>
            The name of the audio session.
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioSessionControl.IconPath">
            <summary>
            the path to the icon shown in the mixer.
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioSessionControl.GetSessionIdentifier">
            <summary>
            The session identifier of the audio session.
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioSessionControl.GetSessionInstanceIdentifier">
            <summary>
            The session instance identifier of the audio session.
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioSessionControl.GetProcessID">
            <summary>
            The process identifier of the audio session.
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioSessionControl.IsSystemSoundsSession">
            <summary>
            Is the session a system sounds session.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioSessionControl.GetGroupingParam">
            <summary>
            the grouping param for an audio session grouping
            </summary>
            <returns></returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioSessionControl.SetGroupingParam(System.Guid,System.Guid)">
            <summary>
            For chanigng the grouping param and supplying the context of said change
            </summary>
            <param name="groupingId"></param>
            <param name="context"></param>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioSessionControl.RegisterEventClient(NAudio.CoreAudioApi.Interfaces.IAudioSessionEventsHandler)">
            <summary>
            Registers an even client for callbacks
            </summary>
            <param name="eventClient"></param>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioSessionControl.UnRegisterEventClient(NAudio.CoreAudioApi.Interfaces.IAudioSessionEventsHandler)">
            <summary>
            Unregisters an event client from receiving callbacks
            </summary>
            <param name="eventClient"></param>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioSessionEventsCallback">
            <summary>
            AudioSessionEvents callback implementation
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioSessionEventsCallback.#ctor(NAudio.CoreAudioApi.Interfaces.IAudioSessionEventsHandler)">
            <summary>
            Constructor.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioSessionEventsCallback.OnDisplayNameChanged(System.String,System.Guid@)">
            <summary>
            Notifies the client that the display name for the session has changed.
            </summary>
            <param name="displayName">The new display name for the session.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioSessionEventsCallback.OnIconPathChanged(System.String,System.Guid@)">
            <summary>
            Notifies the client that the display icon for the session has changed.
            </summary>
            <param name="iconPath">The path for the new display icon for the session.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioSessionEventsCallback.OnSimpleVolumeChanged(System.Single,System.Boolean,System.Guid@)">
            <summary>
            Notifies the client that the volume level or muting state of the session has changed.
            </summary>
            <param name="volume">The new volume level for the audio session.</param>
            <param name="isMuted">The new muting state.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioSessionEventsCallback.OnChannelVolumeChanged(System.UInt32,System.IntPtr,System.UInt32,System.Guid@)">
            <summary>
            Notifies the client that the volume level of an audio channel in the session submix has changed.
            </summary>
            <param name="channelCount">The channel count.</param>
            <param name="newVolumes">An array of volumnes cooresponding with each channel index.</param>
            <param name="channelIndex">The number of the channel whose volume level changed.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioSessionEventsCallback.OnGroupingParamChanged(System.Guid@,System.Guid@)">
            <summary>
            Notifies the client that the grouping parameter for the session has changed.
            </summary>
            <param name="groupingId">The new grouping parameter for the session.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioSessionEventsCallback.OnStateChanged(NAudio.CoreAudioApi.Interfaces.AudioSessionState)">
            <summary>
            Notifies the client that the stream-activity state of the session has changed.
            </summary>
            <param name="state">The new session state.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioSessionEventsCallback.OnSessionDisconnected(NAudio.CoreAudioApi.Interfaces.AudioSessionDisconnectReason)">
            <summary>
            Notifies the client that the session has been disconnected.
            </summary>
            <param name="disconnectReason">The reason that the audio session was disconnected.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioSessionManager">
            <summary>
            AudioSessionManager
            
            Designed to manage audio sessions and in particuar the
            SimpleAudioVolume interface to adjust a session volume
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioSessionManager.SessionCreatedDelegate">
            <summary>
            Session created delegate
            </summary>
        </member>
        <member name="E:NAudio.CoreAudioApi.AudioSessionManager.OnSessionCreated">
            <summary>
            Occurs when audio session has been added (for example run another program that use audio playback).
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioSessionManager.SimpleAudioVolume">
            <summary>
            SimpleAudioVolume object
            for adjusting the volume for the user session
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioSessionManager.AudioSessionControl">
            <summary>
            AudioSessionControl object
            for registring for callbacks and other session information
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioSessionManager.RefreshSessions">
            <summary>
            Refresh session of current device.
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioSessionManager.Sessions">
            <summary>
            Returns list of sessions of current device.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioSessionManager.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioSessionManager.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioStreamCategory">
            <summary>
            Specifies the category of an audio stream.
            https://docs.microsoft.com/en-us/windows/win32/api/audiosessiontypes/ne-audiosessiontypes-audio_stream_category
            AUDIO_STREAM_CATEGORY
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioStreamCategory.Other">
            <summary>
            Other audio stream.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioStreamCategory.ForegroundOnlyMedia">
            <summary>
            Media that will only stream when the app is in the foreground.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioStreamCategory.BackgroundCapableMedia">
            <summary>
            Media that can be streamed when the app is in the background.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioStreamCategory.Communications">
            <summary>
            Real-time communications, such as VOIP or chat.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioStreamCategory.Alerts">
            <summary>
            Alert sounds.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioStreamCategory.SoundEffects">
            <summary>
            Sound effects.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioStreamCategory.GameEffects">
            <summary>
            Game sound effects.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioStreamCategory.GameMedia">
            <summary>
            Background audio for games.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioStreamCategory.GameChat">
            <summary>
            Game chat audio. Similar to AudioCategory_Communications except that AudioCategory_GameChat will not attenuate other streams.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioStreamCategory.Speech">
            <summary>
            Speech
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioStreamCategory.Movie">
            <summary>
            Stream that includes audio with dialog.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioStreamCategory.Media">
            <summary>
            Stream that includes audio without dialog.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioStreamCategory.FarFieldSpeech">
            <summary>
            Media is audio captured with the intent of capturing voice sources located in the ‘far field’. (Far away from the microphone.)
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioStreamCategory.UniformSpeech">
            <summary>
            Media is captured audio that requires consistent speech processing for the captured audio stream across all Windows devices. Used by applications that process speech data using machine learning algorithms.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioStreamCategory.VoiceTyping">
            <summary>
            Media is audio captured with the intent of enabling dictation or typing by voice.
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioStreamVolume">
            <summary>
            Manages the AudioStreamVolume for the <see cref="T:NAudio.CoreAudioApi.AudioClient"/>.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioStreamVolume.CheckChannelIndex(System.Int32,System.String)">
            <summary>
            Verify that the channel index is valid.
            </summary>
            <param name="channelIndex"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioStreamVolume.GetAllVolumes">
            <summary>
            Return the current stream volumes for all channels
            </summary>
            <returns>An array of volume levels between 0.0 and 1.0 for each channel in the audio stream.</returns>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioStreamVolume.ChannelCount">
            <summary>
            Returns the current number of channels in this audio stream.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioStreamVolume.GetChannelVolume(System.Int32)">
            <summary>
            Return the current volume for the requested channel.
            </summary>
            <param name="channelIndex">The 0 based index into the channels.</param>
            <returns>The volume level for the channel between 0.0 and 1.0.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioStreamVolume.SetAllVolumes(System.Single[])">
            <summary>
            Set the volume level for each channel of the audio stream.
            </summary>
            <param name="levels">An array of volume levels (between 0.0 and 1.0) one for each channel.</param>
            <remarks>
            A volume level MUST be supplied for reach channel in the audio stream.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="levels"/> does not contain <see cref="P:NAudio.CoreAudioApi.AudioStreamVolume.ChannelCount"/> elements.
            </exception>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioStreamVolume.SetChannelVolume(System.Int32,System.Single)">
            <summary>
            Sets the volume level for one channel in the audio stream.
            </summary>
            <param name="index">The 0-based index into the channels to adjust the volume of.</param>
            <param name="level">The volume level between 0.0 and 1.0 for this channel of the audio stream.</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioStreamVolume.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioStreamVolume.Dispose(System.Boolean)">
            <summary>
            Release/cleanup objects during Dispose/finalization.
            </summary>
            <param name="disposing">True if disposing and false if being finalized.</param>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioVolumeNotificationData">
            <summary>
            Audio Volume Notification Data
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioVolumeNotificationData.EventContext">
            <summary>
            Event Context
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioVolumeNotificationData.Muted">
            <summary>
            Muted
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioVolumeNotificationData.Guid">
            <summary>
            Guid that raised the event
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioVolumeNotificationData.MasterVolume">
            <summary>
            Master Volume
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioVolumeNotificationData.Channels">
            <summary>
            Channels
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioVolumeNotificationData.ChannelVolume">
            <summary>
            Channel Volume
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioVolumeNotificationData.#ctor(System.Guid,System.Boolean,System.Single,System.Single[],System.Guid)">
            <summary>
            Audio Volume Notification Data
            </summary>
            <param name="eventContext"></param>
            <param name="muted"></param>
            <param name="masterVolume"></param>
            <param name="channelVolume"></param>
            <param name="guid"></param>
        </member>
        <member name="T:NAudio.CoreAudioApi.Connector">
            <summary>
            Connector
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Connector.ConnectTo(NAudio.CoreAudioApi.Connector)">
            <summary>
            Connects this connector to a connector in another device-topology object
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.Connector.Type">
            <summary>
            Retreives the type of this connector
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.Connector.DataFlow">
            <summary>
            Retreives the data flow of this connector
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Connector.Disconnect">
            <summary>
            Disconnects this connector from it's connected connector (if connected)
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.Connector.IsConnected">
            <summary>
            Indicates whether this connector is connected to another connector
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.Connector.ConnectedTo">
            <summary>
            Retreives the connector this connector is connected to (if connected)
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.Connector.ConnectedToConnectorId">
            <summary>
            Retreives the global ID of the connector this connector is connected to (if connected)
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.Connector.ConnectedToDeviceId">
            <summary>
            Retreives the device ID of the audio device this connector is connected to (if connected)
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.ConnectorType">
            <summary>
            Connector Type
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.ConnectorType.UnknownConnector">
            <summary>
            The connector is part of a connection of unknown type.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.ConnectorType.PhysicalInternal">
            <summary>
            The connector is part of a physical connection to an auxiliary device that is installed inside the system chassis
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.ConnectorType.PhysicalExternal">
            <summary>
            The connector is part of a physical connection to an external device.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.ConnectorType.SoftwareIo">
            <summary>
            The connector is part of a software-configured I/O connection (typically a DMA channel) between system memory and an audio hardware device on an audio adapter.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.ConnectorType.SoftwareFixed">
            <summary>
            The connector is part of a permanent connection that is fixed and cannot be configured under software control.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.ConnectorType.Network">
            <summary>
            The connector is part of a connection to a network.
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.DataFlow">
            <summary>
            The EDataFlow enumeration defines constants that indicate the direction 
            in which audio data flows between an audio endpoint device and an application
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.DataFlow.Render">
            <summary>
            Audio rendering stream. 
            Audio data flows from the application to the audio endpoint device, which renders the stream.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.DataFlow.Capture">
            <summary>
            Audio capture stream. Audio data flows from the audio endpoint device that captures the stream, 
            to the application
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.DataFlow.All">
            <summary>
            Audio rendering or capture stream. Audio data can flow either from the application to the audio 
            endpoint device, or from the audio endpoint device to the application.
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.DeviceState">
            <summary>
            Device State
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.DeviceState.Active">
            <summary>
            DEVICE_STATE_ACTIVE
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.DeviceState.Disabled">
            <summary>
            DEVICE_STATE_DISABLED
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.DeviceState.NotPresent">
            <summary>
            DEVICE_STATE_NOTPRESENT 
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.DeviceState.Unplugged">
            <summary>
            DEVICE_STATE_UNPLUGGED
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.DeviceState.All">
            <summary>
            DEVICE_STATEMASK_ALL
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.DeviceTopology">
            <summary>
            Windows CoreAudio DeviceTopology
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.DeviceTopology.ConnectorCount">
            <summary>
            Retrieves the number of connections associated with this device-topology object
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.DeviceTopology.GetConnector(System.UInt32)">
            <summary>
            Retrieves the connector at the supplied index
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.DeviceTopology.DeviceId">
            <summary>
            Retrieves the device id of the device represented by this device-topology object
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.EEndpointHardwareSupport">
            <summary>
            Endpoint Hardware Support
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.EEndpointHardwareSupport.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.EEndpointHardwareSupport.Mute">
            <summary>
            Mute
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.EEndpointHardwareSupport.Meter">
            <summary>
            Meter
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.Blob">
            <summary>
            Representation of binary large object container.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.Blob.Length">
            <summary>
            Length of binary object.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.Blob.Data">
            <summary>
            Pointer to buffer storing data.
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.ClsCtx">
            <summary>
            is defined in WTypes.h
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode">
            <summary>
            Audio Client WASAPI Error Codes (HResult)
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.NotInitialized">
            <summary>
            AUDCLNT_E_NOT_INITIALIZED
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.AlreadyInitialized">
            <summary>
            AUDCLNT_E_ALREADY_INITIALIZED
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.WrongEndpointType">
            <summary>
            AUDCLNT_E_WRONG_ENDPOINT_TYPE
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.DeviceInvalidated">
            <summary>
            AUDCLNT_E_DEVICE_INVALIDATED
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.NotStopped">
            <summary>
            AUDCLNT_E_NOT_STOPPED
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.BufferTooLarge">
            <summary>
            AUDCLNT_E_BUFFER_TOO_LARGE
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.OutOfOrder">
            <summary>
            AUDCLNT_E_OUT_OF_ORDER
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.UnsupportedFormat">
            <summary>
            AUDCLNT_E_UNSUPPORTED_FORMAT
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.InvalidSize">
            <summary>
            AUDCLNT_E_INVALID_SIZE
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.DeviceInUse">
            <summary>
            AUDCLNT_E_DEVICE_IN_USE
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.BufferOperationPending">
            <summary>
            AUDCLNT_E_BUFFER_OPERATION_PENDING
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.ThreadNotRegistered">
            <summary>
            AUDCLNT_E_THREAD_NOT_REGISTERED
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.NoSingleProcess">
            <summary>
            AUDCLNT_E_NO_SINGLE_PROCESS
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.ExclusiveModeNotAllowed">
            <summary>
            AUDCLNT_E_EXCLUSIVE_MODE_NOT_ALLOWED
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.EndpointCreateFailed">
            <summary>
            AUDCLNT_E_ENDPOINT_CREATE_FAILED
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.ServiceNotRunning">
            <summary>
            AUDCLNT_E_SERVICE_NOT_RUNNING
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.EventHandleNotExpected">
            <summary>
            AUDCLNT_E_EVENTHANDLE_NOT_EXPECTED
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.ExclusiveModeOnly">
            <summary>
            AUDCLNT_E_EXCLUSIVE_MODE_ONLY
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.BufferDurationPeriodNotEqual">
            <summary>
            AUDCLNT_E_BUFDURATION_PERIOD_NOT_EQUAL
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.EventHandleNotSet">
            <summary>
            AUDCLNT_E_EVENTHANDLE_NOT_SET
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.IncorrectBufferSize">
            <summary>
            AUDCLNT_E_INCORRECT_BUFFER_SIZE
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.BufferSizeError">
            <summary>
            AUDCLNT_E_BUFFER_SIZE_ERROR
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.CpuUsageExceeded">
            <summary>
            AUDCLNT_E_CPUUSAGE_EXCEEDED
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.BufferError">
            <summary>
            AUDCLNT_E_BUFFER_ERROR
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.BufferSizeNotAligned">
            <summary>
            AUDCLNT_E_BUFFER_SIZE_NOT_ALIGNED
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.InvalidDevicePeriod">
            <summary>
            AUDCLNT_E_INVALID_DEVICE_PERIOD
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.InvalidStreamFlag">
            <summary>
            AUDCLNT_E_INVALID_STREAM_FLAG
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.EndpointOffloadNotCapable">
            <summary>
            AUDCLNT_E_ENDPOINT_OFFLOAD_NOT_CAPABLE
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.OutOfOffloadResources">
            <summary>
            AUDCLNT_E_OUT_OF_OFFLOAD_RESOURCES
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.OffloadModeOnly">
            <summary>
            AUDCLNT_E_OFFLOAD_MODE_ONLY
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.NonOffloadModeOnly">
            <summary>
            AUDCLNT_E_NONOFFLOAD_MODE_ONLY
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.ResourcesInvalidated">
            <summary>
            AUDCLNT_E_RESOURCES_INVALIDATED
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.RawModeUnsupported">
            <summary>
            AUDCLNT_E_RAW_MODE_UNSUPPORTED
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.EnginePeriodicityLocked">
            <summary>
            AUDCLNT_E_ENGINE_PERIODICITY_LOCKED
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.EngineFormatLocked">
            <summary>
            AUDCLNT_E_ENGINE_FORMAT_LOCKED
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.HeadTrackingEnabled">
            <summary>
            AUDCLNT_E_HEADTRACKING_ENABLED
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrorCode.HeadTrackingUnsupported">
            <summary>
            AUDCLNT_E_HEADTRACKING_UNSUPPORTED
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IAudioClient">
            <summary>
            Windows CoreAudio IAudioClient interface
            Defined in AudioClient.h
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioClient.GetBufferSize(System.UInt32@)">
            <summary>
            The GetBufferSize method retrieves the size (maximum capacity) of the endpoint buffer.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioClient.GetService(System.Guid,System.Object@)">
            <summary>
            The GetService method accesses additional services from the audio client object.
            </summary>
            <param name="interfaceId">The interface ID for the requested service.</param>
            <param name="interfacePointer">Pointer to a pointer variable into which the method writes the address of an instance of the requested interface. </param>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IAudioClient2">
            <summary>
            https://docs.microsoft.com/en-us/windows/win32/api/audioclient/nn-audioclient-iaudioclient2
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioClient2.IsOffloadCapable(NAudio.CoreAudioApi.AudioStreamCategory,System.Boolean@)">
            <summary>
            The IsOffloadCapable method retrieves information about whether or not the endpoint on which a stream is created is capable of supporting an offloaded audio stream.
            </summary>
            <param name="category">An enumeration that specifies the category of an audio stream.</param>
            <param name="pbOffloadCapable">A pointer to a Boolean value. TRUE indicates that the endpoint is offload-capable. FALSE indicates that the endpoint is not offload-capable.</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioClient2.SetClientProperties(System.IntPtr)">
            <summary>
            Pointer to an AudioClientProperties structure.
            </summary>
            <param name="pProperties"></param>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioClient2.GetBufferSizeLimits(System.IntPtr,System.Boolean,System.Int64@,System.Int64@)">
            <summary>
            The GetBufferSizeLimits method returns the buffer size limits of the hardware audio engine in 100-nanosecond units.
            </summary>
            <param name="pFormat">A pointer to the target format that is being queried for the buffer size limit.</param>
            <param name="bEventDriven">Boolean value to indicate whether or not the stream can be event-driven.</param>
            <param name="phnsMinBufferDuration">Returns a pointer to the minimum buffer size (in 100-nanosecond units) that is required for the underlying hardware audio engine to operate at the format specified in the pFormat parameter, without frequent audio glitching.</param>
            <param name="phnsMaxBufferDuration">Returns a pointer to the maximum buffer size (in 100-nanosecond units) that the underlying hardware audio engine can support for the format specified in the pFormat parameter.</param>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IAudioClock">
            <summary>
            Defined in AudioClient.h
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IAudioClock2">
            <summary>
            Defined in AudioClient.h
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl">
            <summary>
            Windows CoreAudio IAudioSessionControl interface
            Defined in AudioPolicy.h
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl.GetState(NAudio.CoreAudioApi.Interfaces.AudioSessionState@)">
            <summary>
            Retrieves the current state of the audio session.
            </summary>
            <param name="state">Receives the current session state.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl.GetDisplayName(System.String@)">
            <summary>
            Retrieves the display name for the audio session.
            </summary>
            <param name="displayName">Receives a string that contains the display name.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl.SetDisplayName(System.String,System.Guid)">
            <summary>
            Assigns a display name to the current audio session.
            </summary>
            <param name="displayName">A string that contains the new display name for the session.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl.GetIconPath(System.String@)">
            <summary>
            Retrieves the path for the display icon for the audio session.
            </summary>
            <param name="iconPath">Receives a string that specifies the fully qualified path of the file that contains the icon.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl.SetIconPath(System.String,System.Guid)">
            <summary>
            Assigns a display icon to the current session.
            </summary>
            <param name="iconPath">A string that specifies the fully qualified path of the file that contains the new icon.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl.GetGroupingParam(System.Guid@)">
            <summary>
            Retrieves the grouping parameter of the audio session.
            </summary>
            <param name="groupingId">Receives the grouping parameter ID.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl.SetGroupingParam(System.Guid,System.Guid)">
            <summary>
            Assigns a session to a grouping of sessions.
            </summary>
            <param name="groupingId">The new grouping parameter ID.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl.RegisterAudioSessionNotification(NAudio.CoreAudioApi.Interfaces.IAudioSessionEvents)">
            <summary>
            Registers the client to receive notifications of session events, including changes in the session state.
            </summary>
            <param name="client">A client-implemented <see cref="T:NAudio.CoreAudioApi.Interfaces.IAudioSessionEvents"/> interface.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl.UnregisterAudioSessionNotification(NAudio.CoreAudioApi.Interfaces.IAudioSessionEvents)">
            <summary>
            Deletes a previous registration by the client to receive notifications.
            </summary>
            <param name="client">A client-implemented <see cref="T:NAudio.CoreAudioApi.Interfaces.IAudioSessionEvents"/> interface.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl2">
            <summary>
            Windows CoreAudio IAudioSessionControl interface
            Defined in AudioPolicy.h
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl2.GetState(NAudio.CoreAudioApi.Interfaces.AudioSessionState@)">
            <summary>
            Retrieves the current state of the audio session.
            </summary>
            <param name="state">Receives the current session state.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl2.GetDisplayName(System.String@)">
            <summary>
            Retrieves the display name for the audio session.
            </summary>
            <param name="displayName">Receives a string that contains the display name.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl2.SetDisplayName(System.String,System.Guid)">
            <summary>
            Assigns a display name to the current audio session.
            </summary>
            <param name="displayName">A string that contains the new display name for the session.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl2.GetIconPath(System.String@)">
            <summary>
            Retrieves the path for the display icon for the audio session.
            </summary>
            <param name="iconPath">Receives a string that specifies the fully qualified path of the file that contains the icon.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl2.SetIconPath(System.String,System.Guid)">
            <summary>
            Assigns a display icon to the current session.
            </summary>
            <param name="iconPath">A string that specifies the fully qualified path of the file that contains the new icon.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl2.GetGroupingParam(System.Guid@)">
            <summary>
            Retrieves the grouping parameter of the audio session.
            </summary>
            <param name="groupingId">Receives the grouping parameter ID.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl2.SetGroupingParam(System.Guid,System.Guid)">
            <summary>
            Assigns a session to a grouping of sessions.
            </summary>
            <param name="groupingId">The new grouping parameter ID.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl2.RegisterAudioSessionNotification(NAudio.CoreAudioApi.Interfaces.IAudioSessionEvents)">
            <summary>
            Registers the client to receive notifications of session events, including changes in the session state.
            </summary>
            <param name="client">A client-implemented <see cref="T:NAudio.CoreAudioApi.Interfaces.IAudioSessionEvents"/> interface.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl2.UnregisterAudioSessionNotification(NAudio.CoreAudioApi.Interfaces.IAudioSessionEvents)">
            <summary>
            Deletes a previous registration by the client to receive notifications.
            </summary>
            <param name="client">A client-implemented <see cref="T:NAudio.CoreAudioApi.Interfaces.IAudioSessionEvents"/> interface.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl2.GetSessionIdentifier(System.String@)">
            <summary>
            Retrieves the identifier for the audio session.
            </summary>
            <param name="retVal">Receives the session identifier.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl2.GetSessionInstanceIdentifier(System.String@)">
            <summary>
            Retrieves the identifier of the audio session instance.
            </summary>
            <param name="retVal">Receives the identifier of a particular instance.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl2.GetProcessId(System.UInt32@)">
            <summary>
            Retrieves the process identifier of the audio session.
            </summary>
            <param name="retVal">Receives the process identifier of the audio session.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl2.IsSystemSoundsSession">
            <summary>
            Indicates whether the session is a system sounds session.
            </summary>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl2.SetDuckingPreference(System.Boolean)">
            <summary>
            Enables or disables the default stream attenuation experience (auto-ducking) provided by the system.
            </summary>
            <param name="optOut">A variable that enables or disables system auto-ducking.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.AudioSessionState">
            <summary>
            Defines constants that indicate the current state of an audio session.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370792.aspx
            </remarks>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioSessionState.AudioSessionStateInactive">
            <summary>
            The audio session is inactive.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioSessionState.AudioSessionStateActive">
            <summary>
            The audio session is active.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioSessionState.AudioSessionStateExpired">
            <summary>
            The audio session has expired.
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.AudioSessionDisconnectReason">
            <summary>
            Defines constants that indicate a reason for an audio session being disconnected.
            </summary>
            <remarks>
            MSDN Reference: Unknown
            </remarks>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioSessionDisconnectReason.DisconnectReasonDeviceRemoval">
            <summary>
            The user removed the audio endpoint device.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioSessionDisconnectReason.DisconnectReasonServerShutdown">
            <summary>
            The Windows audio service has stopped.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioSessionDisconnectReason.DisconnectReasonFormatChanged">
            <summary>
            The stream format changed for the device that the audio session is connected to.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioSessionDisconnectReason.DisconnectReasonSessionLogoff">
            <summary>
            The user logged off the WTS session that the audio session was running in.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioSessionDisconnectReason.DisconnectReasonSessionDisconnected">
            <summary>
            The WTS session that the audio session was running in was disconnected.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioSessionDisconnectReason.DisconnectReasonExclusiveModeOverride">
            <summary>
            The (shared-mode) audio session was disconnected to make the audio endpoint device available for an exclusive-mode connection.
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IAudioSessionEvents">
            <summary>
            Windows CoreAudio IAudioSessionControl interface
            Defined in AudioPolicy.h
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionEvents.OnDisplayNameChanged(System.String,System.Guid@)">
            <summary>
            Notifies the client that the display name for the session has changed.
            </summary>
            <param name="displayName">The new display name for the session.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionEvents.OnIconPathChanged(System.String,System.Guid@)">
            <summary>
            Notifies the client that the display icon for the session has changed.
            </summary>
            <param name="iconPath">The path for the new display icon for the session.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionEvents.OnSimpleVolumeChanged(System.Single,System.Boolean,System.Guid@)">
            <summary>
            Notifies the client that the volume level or muting state of the session has changed.
            </summary>
            <param name="volume">The new volume level for the audio session.</param>
            <param name="isMuted">The new muting state.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionEvents.OnChannelVolumeChanged(System.UInt32,System.IntPtr,System.UInt32,System.Guid@)">
            <summary>
            Notifies the client that the volume level of an audio channel in the session submix has changed.
            </summary>
            <param name="channelCount">The channel count.</param>
            <param name="newVolumes">An array of volumnes cooresponding with each channel index.</param>
            <param name="channelIndex">The number of the channel whose volume level changed.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionEvents.OnGroupingParamChanged(System.Guid@,System.Guid@)">
            <summary>
            Notifies the client that the grouping parameter for the session has changed.
            </summary>
            <param name="groupingId">The new grouping parameter for the session.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionEvents.OnStateChanged(NAudio.CoreAudioApi.Interfaces.AudioSessionState)">
            <summary>
            Notifies the client that the stream-activity state of the session has changed.
            </summary>
            <param name="state">The new session state.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionEvents.OnSessionDisconnected(NAudio.CoreAudioApi.Interfaces.AudioSessionDisconnectReason)">
            <summary>
            Notifies the client that the session has been disconnected.
            </summary>
            <param name="disconnectReason">The reason that the audio session was disconnected.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IAudioSessionEventsHandler">
            <summary>
            interface to receive session related events
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionEventsHandler.OnVolumeChanged(System.Single,System.Boolean)">
            <summary>
            notification of volume changes including muting of audio session
            </summary>
            <param name="volume">the current volume</param>
            <param name="isMuted">the current mute state, true muted, false otherwise</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionEventsHandler.OnDisplayNameChanged(System.String)">
            <summary>
            notification of display name changed
            </summary>
            <param name="displayName">the current display name</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionEventsHandler.OnIconPathChanged(System.String)">
            <summary>
            notification of icon path changed
            </summary>
            <param name="iconPath">the current icon path</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionEventsHandler.OnChannelVolumeChanged(System.UInt32,System.IntPtr,System.UInt32)">
            <summary>
            notification of the client that the volume level of an audio channel in the session submix has changed
            </summary>
            <param name="channelCount">The channel count.</param>
            <param name="newVolumes">An array of volumnes cooresponding with each channel index.</param>
            <param name="channelIndex">The number of the channel whose volume level changed.</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionEventsHandler.OnGroupingParamChanged(System.Guid@)">
            <summary>
            notification of the client that the grouping parameter for the session has changed
            </summary>
            <param name="groupingId">>The new grouping parameter for the session.</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionEventsHandler.OnStateChanged(NAudio.CoreAudioApi.Interfaces.AudioSessionState)">
            <summary>
            notification of the client that the stream-activity state of the session has changed
            </summary>
            <param name="state">The new session state.</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionEventsHandler.OnSessionDisconnected(NAudio.CoreAudioApi.Interfaces.AudioSessionDisconnectReason)">
            <summary>
            notification of the client that the session has been disconnected
            </summary>
            <param name="disconnectReason">The reason that the audio session was disconnected.</param>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IAudioSessionManager">
            <summary>
            Windows CoreAudio IAudioSessionManager interface
            Defined in AudioPolicy.h
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionManager.GetAudioSessionControl(System.Guid,System.UInt32,NAudio.CoreAudioApi.Interfaces.IAudioSessionControl@)">
            <summary>
            Retrieves an audio session control.
            </summary>
            <param name="sessionId">A new or existing session ID.</param>
            <param name="streamFlags">Audio session flags.</param>
            <param name="sessionControl">Receives an <see cref="T:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl"/> interface for the audio session.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionManager.GetSimpleAudioVolume(System.Guid,System.UInt32,NAudio.CoreAudioApi.Interfaces.ISimpleAudioVolume@)">
            <summary>
            Retrieves a simple audio volume control.
            </summary>
            <param name="sessionId">A new or existing session ID.</param>
            <param name="streamFlags">Audio session flags.</param>
            <param name="audioVolume">Receives an <see cref="T:NAudio.CoreAudioApi.Interfaces.ISimpleAudioVolume"/> interface for the audio session.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionManager2.GetAudioSessionControl(System.Guid,System.UInt32,NAudio.CoreAudioApi.Interfaces.IAudioSessionControl@)">
            <summary>
            Retrieves an audio session control.
            </summary>
            <param name="sessionId">A new or existing session ID.</param>
            <param name="streamFlags">Audio session flags.</param>
            <param name="sessionControl">Receives an <see cref="T:NAudio.CoreAudioApi.Interfaces.IAudioSessionControl"/> interface for the audio session.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionManager2.GetSimpleAudioVolume(System.Guid,System.UInt32,NAudio.CoreAudioApi.Interfaces.ISimpleAudioVolume@)">
            <summary>
            Retrieves a simple audio volume control.
            </summary>
            <param name="sessionId">A new or existing session ID.</param>
            <param name="streamFlags">Audio session flags.</param>
            <param name="audioVolume">Receives an <see cref="T:NAudio.CoreAudioApi.Interfaces.ISimpleAudioVolume"/> interface for the audio session.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IAudioSessionNotification">
            <summary>
            Windows CoreAudio IAudioSessionNotification interface
            Defined in AudioPolicy.h
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioSessionNotification.OnSessionCreated(NAudio.CoreAudioApi.Interfaces.IAudioSessionControl)">
            <summary>
            
            </summary>
            <param name="newSession">session being added</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IConnector">
            <summary>
            Windows CoreAudio IConnector interface
            Defined in devicetopology.h
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IDeviceTopology">
            <summary>
            Windows CoreAudio IDeviceTopology interface
            Defined in devicetopology.h
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IMMEndpoint">
            <summary>
            defined in MMDeviceAPI.h
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IMMNotificationClient">
            <summary>
            IMMNotificationClient
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IMMNotificationClient.OnDeviceStateChanged(System.String,NAudio.CoreAudioApi.DeviceState)">
            <summary>
            Device State Changed
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IMMNotificationClient.OnDeviceAdded(System.String)">
            <summary>
            Device Added
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IMMNotificationClient.OnDeviceRemoved(System.String)">
            <summary>
            Device Removed
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IMMNotificationClient.OnDefaultDeviceChanged(NAudio.CoreAudioApi.DataFlow,NAudio.CoreAudioApi.Role,System.String)">
            <summary>
            Default Device Changed
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IMMNotificationClient.OnPropertyValueChanged(System.String,NAudio.CoreAudioApi.PropertyKey)">
            <summary>
            Property Value Changed
            </summary>
            <param name="pwstrDeviceId"></param>
            <param name="key"></param>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IPart">
            <summary>
            Windows CoreAudio IPart interface
            Defined in devicetopology.h
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IPartsList">
            <summary>
            Windows CoreAudio IPartsList interface
            Defined in devicetopology.h
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IPropertyStore">
            <summary>
            is defined in propsys.h
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.ISimpleAudioVolume">
            <summary>
            Windows CoreAudio ISimpleAudioVolume interface
            Defined in AudioClient.h
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.ISimpleAudioVolume.SetMasterVolume(System.Single,System.Guid)">
            <summary>
            Sets the master volume level for the audio session.
            </summary>
            <param name="levelNorm">The new volume level expressed as a normalized value between 0.0 and 1.0.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.ISimpleAudioVolume.GetMasterVolume(System.Single@)">
            <summary>
            Retrieves the client volume level for the audio session.
            </summary>
            <param name="levelNorm">Receives the volume level expressed as a normalized value between 0.0 and 1.0. </param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.ISimpleAudioVolume.SetMute(System.Boolean,System.Guid)">
            <summary>
            Sets the muting state for the audio session.
            </summary>
            <param name="isMuted">The new muting state.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.ISimpleAudioVolume.GetMute(System.Boolean@)">
            <summary>
            Retrieves the current muting state for the audio session.
            </summary>
            <param name="isMuted">Receives the muting state.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.MMDeviceEnumeratorComObject">
            <summary>
            implements IMMDeviceEnumerator
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.StorageAccessMode">
            <summary>
            MMDevice STGM enumeration
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.StorageAccessMode.Read">
            <summary>
            Read-only access mode.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.StorageAccessMode.Write">
            <summary>
            Write-only access mode.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.StorageAccessMode.ReadWrite">
            <summary>
            Read-write access mode.
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.PropVariant">
            <summary>
            from Propidl.h.
            http://msdn.microsoft.com/en-us/library/aa380072(VS.85).aspx
            contains a union so we have to do an explicit layout
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.PropVariant.vt">
            <summary>
            Value type tag.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.PropVariant.wReserved1">
            <summary>
            Reserved1.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.PropVariant.wReserved2">
            <summary>
            Reserved2.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.PropVariant.wReserved3">
            <summary>
            Reserved3.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.PropVariant.cVal">
            <summary>
            cVal.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.PropVariant.bVal">
            <summary>
            bVal.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.PropVariant.iVal">
            <summary>
            iVal.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.PropVariant.uiVal">
            <summary>
            uiVal.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.PropVariant.lVal">
            <summary>
            lVal.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.PropVariant.ulVal">
            <summary>
            ulVal.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.PropVariant.intVal">
            <summary>
            intVal.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.PropVariant.uintVal">
            <summary>
            uintVal.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.PropVariant.hVal">
            <summary>
            hVal.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.PropVariant.uhVal">
            <summary>
            uhVal.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.PropVariant.fltVal">
            <summary>
            fltVal.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.PropVariant.dblVal">
            <summary>
            dblVal.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.PropVariant.boolVal">
            <summary>
            boolVal.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.PropVariant.scode">
            <summary>
            scode.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.PropVariant.filetime">
            <summary>
            Date time.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.PropVariant.blobVal">
            <summary>
            Binary large object.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.PropVariant.pointerValue">
            <summary>
            Pointer value.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.PropVariant.FromLong(System.Int64)">
            <summary>
            Creates a new PropVariant containing a long value
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.PropVariant.GetBlob">
            <summary>
            Helper method to gets blob data
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.PropVariant.GetBlobAsArrayOf``1">
            <summary>
            Interprets a blob as an array of structs
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.Interfaces.PropVariant.DataType">
            <summary>
            Gets the type of data in this PropVariant
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.Interfaces.PropVariant.Value">
            <summary>
            Property value
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.PropVariant.Clear(System.IntPtr)">
            <summary>
            Clears with a known pointer
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.MMDevice">
            <summary>
            MM Device
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.MMDevice.GetPropertyInformation(NAudio.CoreAudioApi.Interfaces.StorageAccessMode)">
            <summary>
            Initializes the device's property store.
            </summary>
            <param name="stgmAccess">The storage-access mode to open store for.</param>
            <remarks>Administrative client is required for Write and ReadWrite modes.</remarks>
        </member>
        <member name="P:NAudio.CoreAudioApi.MMDevice.AudioClient">
            <summary>
            Audio Client
            Makes a new one each call to allow caller to manage when to dispose
            n.b. should probably not be a property anymore
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.MMDevice.AudioMeterInformation">
            <summary>
            Audio Meter Information
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.MMDevice.AudioEndpointVolume">
            <summary>
            Audio Endpoint Volume
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.MMDevice.AudioSessionManager">
            <summary>
            AudioSessionManager instance
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.MMDevice.DeviceTopology">
            <summary>
            DeviceTopology instance
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.MMDevice.Properties">
            <summary>
            Properties
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.MMDevice.FriendlyName">
            <summary>
            Friendly name for the endpoint
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.MMDevice.DeviceFriendlyName">
            <summary>
            Friendly name of device
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.MMDevice.IconPath">
            <summary>
            Icon path of device
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.MMDevice.InstanceId">
            <summary>
            Device Instance Id of Device
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.MMDevice.ID">
            <summary>
            Device ID
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.MMDevice.DataFlow">
            <summary>
            Data Flow
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.MMDevice.State">
            <summary>
            Device State
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.MMDevice.ToString">
            <summary>
            To string
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.MMDevice.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.MMDevice.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.MMDeviceCollection">
            <summary>
            Multimedia Device Collection
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.MMDeviceCollection.Count">
            <summary>
            Device count
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.MMDeviceCollection.Item(System.Int32)">
            <summary>
            Get device by index
            </summary>
            <param name="index">Device index</param>
            <returns>Device at the specified index</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.MMDeviceCollection.GetEnumerator">
            <summary>
            Get Enumerator
            </summary>
            <returns>Device enumerator</returns>
        </member>
        <member name="T:NAudio.CoreAudioApi.MMDeviceEnumerator">
            <summary>
            MM Device Enumerator
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.MMDeviceEnumerator.#ctor">
            <summary>
            Creates a new MM Device Enumerator
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.MMDeviceEnumerator.EnumerateAudioEndPoints(NAudio.CoreAudioApi.DataFlow,NAudio.CoreAudioApi.DeviceState)">
            <summary>
            Enumerate Audio Endpoints
            </summary>
            <param name="dataFlow">Desired DataFlow</param>
            <param name="dwStateMask">State Mask</param>
            <returns>Device Collection</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.MMDeviceEnumerator.GetDefaultAudioEndpoint(NAudio.CoreAudioApi.DataFlow,NAudio.CoreAudioApi.Role)">
            <summary>
            Get Default Endpoint
            </summary>
            <param name="dataFlow">Data Flow</param>
            <param name="role">Role</param>
            <returns>Device</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.MMDeviceEnumerator.HasDefaultAudioEndpoint(NAudio.CoreAudioApi.DataFlow,NAudio.CoreAudioApi.Role)">
            <summary>
            Check to see if a default audio end point exists without needing an exception.
            </summary>
            <param name="dataFlow">Data Flow</param>
            <param name="role">Role</param>
            <returns>True if one exists, and false if one does not exist.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.MMDeviceEnumerator.GetDevice(System.String)">
            <summary>
            Get device by ID
            </summary>
            <param name="id">Device ID</param>
            <returns>Device</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.MMDeviceEnumerator.RegisterEndpointNotificationCallback(NAudio.CoreAudioApi.Interfaces.IMMNotificationClient)">
            <summary>
            Registers a call back for Device Events
            </summary>
            <param name="client">Object implementing IMMNotificationClient type casted as IMMNotificationClient interface</param>
            <returns></returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.MMDeviceEnumerator.UnregisterEndpointNotificationCallback(NAudio.CoreAudioApi.Interfaces.IMMNotificationClient)">
            <summary>
            Unregisters a call back for Device Events
            </summary>
            <param name="client">Object implementing IMMNotificationClient type casted as IMMNotificationClient interface </param>
            <returns></returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.MMDeviceEnumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:NAudio.CoreAudioApi.MMDeviceEnumerator.Dispose(System.Boolean)">
            <summary>
            Called to dispose/finalize contained objects.
            </summary>
            <param name="disposing">True if disposing, false if called from a finalizer.</param>
        </member>
        <member name="T:NAudio.CoreAudioApi.Part">
            <summary>
            Audio Part
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.Part.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.Part.LocalId">
            <summary>
            Local ID
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.Part.GlobalId">
            <summary>
            Global ID
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.Part.PartType">
            <summary>
            Part Type
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.Part.GetSubType">
            <summary>
            Sub Type
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.Part.ControlInterfaceCount">
            <summary>
            Control Interface Count
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Part.GetControlInterface(System.UInt32)">
            <summary>
            Get Control Interface by index
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.Part.PartsIncoming">
            <summary>
            Incoming parts list
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.Part.PartsOutgoing">
            <summary>
            Outgoing parts list
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.Part.DeviceTopology">
            <summary>
            Device topology
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.Part.AudioVolumeLevel">
            <summary>
            Audio Volume Level
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.Part.AudioMute">
            <summary>
            Audio Mute
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.Part.JackDescription">
            <summary>
            Jack Description
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.PropertyKey">
            <summary>
            PROPERTYKEY is defined in wtypes.h
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKey.formatId">
            <summary>
            Format ID
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKey.propertyId">
            <summary>
            Property ID
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.PropertyKey.#ctor(System.Guid,System.Int32)">
            <summary>
            <param name="formatId"></param>
            <param name="propertyId"></param>
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.PropertyKeys">
            <summary>
            Property Keys
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.PKEY_DeviceInterface_FriendlyName">
            <summary>
            PKEY_DeviceInterface_FriendlyName
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.PKEY_AudioEndpoint_FormFactor">
            <summary>
            PKEY_AudioEndpoint_FormFactor
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.PKEY_AudioEndpoint_ControlPanelPageProvider">
            <summary>
            PKEY_AudioEndpoint_ControlPanelPageProvider
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.PKEY_AudioEndpoint_Association">
            <summary>
            PKEY_AudioEndpoint_Association
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.PKEY_AudioEndpoint_PhysicalSpeakers">
            <summary>
            PKEY_AudioEndpoint_PhysicalSpeakers
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.PKEY_AudioEndpoint_GUID">
            <summary>
            PKEY_AudioEndpoint_GUID
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.PKEY_AudioEndpoint_Disable_SysFx">
            <summary>
            PKEY_AudioEndpoint_Disable_SysFx 
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.PKEY_AudioEndpoint_FullRangeSpeakers">
            <summary>
            PKEY_AudioEndpoint_FullRangeSpeakers 
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.PKEY_AudioEndpoint_Supports_EventDriven_Mode">
            <summary>
            PKEY_AudioEndpoint_Supports_EventDriven_Mode 
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.PKEY_AudioEndpoint_JackSubType">
            <summary>
            PKEY_AudioEndpoint_JackSubType
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.PKEY_AudioEngine_DeviceFormat">
            <summary>
            PKEY_AudioEngine_DeviceFormat 
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.PKEY_AudioEngine_OEMFormat">
            <summary>
            PKEY_AudioEngine_OEMFormat
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.PKEY_Device_FriendlyName">
            <summary>
            PKEY _Devie_FriendlyName
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.PKEY_Device_IconPath">
            <summary>
            PKEY _Device_IconPath
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.PKEY_Device_DeviceDesc">
            <summary>
            Device description property.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.PKEY_Device_ControllerDeviceId">
            <summary>
            Id of controller device for endpoint device property.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.PKEY_Device_InterfaceKey">
            <summary>
            Device interface key property.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.PKEY_Device_InstanceId">
            <summary>
            System-supplied device instance identification string, assigned by PnP manager, persistent across system restarts.
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.PropertyStore">
            <summary>
            Property Store class, only supports reading properties at the moment.
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.PropertyStore.Count">
            <summary>
            Property Count
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.PropertyStore.Item(System.Int32)">
            <summary>
            Gets property by index
            </summary>
            <param name="index">Property index</param>
            <returns>The property</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.PropertyStore.Contains(NAudio.CoreAudioApi.PropertyKey)">
            <summary>
            Contains property guid
            </summary>
            <param name="key">Looks for a specific key</param>
            <returns>True if found</returns>
        </member>
        <member name="P:NAudio.CoreAudioApi.PropertyStore.Item(NAudio.CoreAudioApi.PropertyKey)">
            <summary>
            Indexer by guid
            </summary>
            <param name="key">Property Key</param>
            <returns>Property or null if not found</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.PropertyStore.Get(System.Int32)">
            <summary>
            Gets property key at sepecified index
            </summary>
            <param name="index">Index</param>
            <returns>Property key</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.PropertyStore.GetValue(System.Int32)">
            <summary>
            Gets property value at specified index
            </summary>
            <param name="index">Index</param>
            <returns>Property value</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.PropertyStore.SetValue(NAudio.CoreAudioApi.PropertyKey,NAudio.CoreAudioApi.Interfaces.PropVariant)">
            <summary>
            Sets property value at specified key.
            </summary>
            <param name="key">Key of property to set.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.PropertyStore.Commit">
            <summary>
            Saves a property change.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.PropertyStore.#ctor(NAudio.CoreAudioApi.Interfaces.IPropertyStore)">
            <summary>
            Creates a new property store
            </summary>
            <param name="store">IPropertyStore COM interface</param>
        </member>
        <member name="T:NAudio.CoreAudioApi.PropertyStoreProperty">
            <summary>
            Property Store Property
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.PropertyStoreProperty.Key">
            <summary>
            Property Key
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.PropertyStoreProperty.Value">
            <summary>
            Property Value
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Role">
            <summary>
            The ERole enumeration defines constants that indicate the role 
            that the system has assigned to an audio endpoint device
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Role.Console">
            <summary>
            Games, system notification sounds, and voice commands.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Role.Multimedia">
            <summary>
            Music, movies, narration, and live music recording
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Role.Communications">
            <summary>
            Voice communications (talking to another person).
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.SessionCollection">
            <summary>
            Collection of sessions.
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.SessionCollection.Item(System.Int32)">
            <summary>
            Returns session at index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:NAudio.CoreAudioApi.SessionCollection.Count">
            <summary>
            Number of current sessions.
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.SimpleAudioVolume">
            <summary>
            Windows CoreAudio SimpleAudioVolume
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.SimpleAudioVolume.#ctor(NAudio.CoreAudioApi.Interfaces.ISimpleAudioVolume)">
            <summary>
            Creates a new Audio endpoint volume
            </summary>
            <param name="realSimpleVolume">ISimpleAudioVolume COM interface</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.SimpleAudioVolume.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.SimpleAudioVolume.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.SimpleAudioVolume.Volume">
            <summary>
            Allows the user to adjust the volume from
            0.0 to 1.0
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.SimpleAudioVolume.Mute">
            <summary>
            Mute
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.WasapiCapture">
            <summary>
            Audio Capture using Wasapi
            See http://msdn.microsoft.com/en-us/library/dd370800%28VS.85%29.aspx
            </summary>
        </member>
        <member name="E:NAudio.CoreAudioApi.WasapiCapture.DataAvailable">
            <summary>
            Indicates recorded data is available 
            </summary>
        </member>
        <member name="E:NAudio.CoreAudioApi.WasapiCapture.RecordingStopped">
            <summary>
            Indicates that all recorded data has now been received.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.WasapiCapture.#ctor">
            <summary>
            Initialises a new instance of the WASAPI capture class
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.WasapiCapture.#ctor(NAudio.CoreAudioApi.MMDevice)">
            <summary>
            Initialises a new instance of the WASAPI capture class
            </summary>
            <param name="captureDevice">Capture device to use</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.WasapiCapture.#ctor(NAudio.CoreAudioApi.MMDevice,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.CoreAudioApi.WasapiCapture"/> class.
            </summary>
            <param name="captureDevice">The capture device.</param>
            <param name="useEventSync">true if sync is done with event. false use sleep.</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.WasapiCapture.#ctor(NAudio.CoreAudioApi.MMDevice,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.CoreAudioApi.WasapiCapture" /> class.
            </summary>
            <param name="captureDevice">The capture device.</param>
            <param name="useEventSync">true if sync is done with event. false use sleep.</param>
            <param name="audioBufferMillisecondsLength">Length of the audio buffer in milliseconds. A lower value means lower latency but increased CPU usage.</param>
        </member>
        <member name="P:NAudio.CoreAudioApi.WasapiCapture.ShareMode">
            <summary>
            Share Mode - set before calling StartRecording
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.WasapiCapture.CaptureState">
            <summary>
            Current Capturing State
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.WasapiCapture.WaveFormat">
            <summary>
            Capturing wave format
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.WasapiCapture.GetDefaultCaptureDevice">
            <summary>
            Gets the default audio capture device
            </summary>
            <returns>The default audio capture device</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.WasapiCapture.GetAudioClientStreamFlags">
            <summary>
            To allow overrides to specify different flags (e.g. loopback)
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.WasapiCapture.StartRecording">
            <summary>
            Start Capturing
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.WasapiCapture.StopRecording">
            <summary>
            Stop Capturing (requests a stop, wait for RecordingStopped event to know it has finished)
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.WasapiCapture.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:NAudio.FileFormats.Mp3.DmoMp3FrameDecompressor">
            <summary>
            MP3 Frame decompressor using the Windows Media MP3 Decoder DMO object
            </summary>
        </member>
        <member name="M:NAudio.FileFormats.Mp3.DmoMp3FrameDecompressor.#ctor(NAudio.Wave.WaveFormat)">
            <summary>
            Initializes a new instance of the DMO MP3 Frame decompressor
            </summary>
            <param name="sourceFormat"></param>
        </member>
        <member name="P:NAudio.FileFormats.Mp3.DmoMp3FrameDecompressor.OutputFormat">
            <summary>
            Converted PCM WaveFormat
            </summary>
        </member>
        <member name="M:NAudio.FileFormats.Mp3.DmoMp3FrameDecompressor.DecompressFrame(NAudio.Wave.Mp3Frame,System.Byte[],System.Int32)">
            <summary>
            Decompress a single frame of MP3
            </summary>
        </member>
        <member name="M:NAudio.FileFormats.Mp3.DmoMp3FrameDecompressor.Reset">
            <summary>
            Alerts us that a reposition has occured so the MP3 decoder needs to reset its state
            </summary>
        </member>
        <member name="M:NAudio.FileFormats.Mp3.DmoMp3FrameDecompressor.Dispose">
            <summary>
            Dispose of this obejct and clean up resources
            </summary>
        </member>
        <member name="T:NAudio.Dmo.DmoDescriptor">
            <summary>
            Contains the name and CLSID of a DirectX Media Object
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoDescriptor.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoDescriptor.Clsid">
            <summary>
            CLSID
            </summary>
        </member>
        <member name="M:NAudio.Dmo.DmoDescriptor.#ctor(System.String,System.Guid)">
            <summary>
            Initializes a new instance of DmoDescriptor
            </summary>
        </member>
        <member name="T:NAudio.Dmo.DmoEnumerator">
            <summary>
            DirectX Media Object Enumerator
            </summary>
        </member>
        <member name="M:NAudio.Dmo.DmoEnumerator.GetAudioEffectNames">
            <summary>
            Get audio effect names
            </summary>
            <returns>Audio effect names</returns>
        </member>
        <member name="M:NAudio.Dmo.DmoEnumerator.GetAudioEncoderNames">
            <summary>
            Get audio encoder names
            </summary>
            <returns>Audio encoder names</returns>
        </member>
        <member name="M:NAudio.Dmo.DmoEnumerator.GetAudioDecoderNames">
            <summary>
            Get audio decoder names
            </summary>
            <returns>Audio decoder names</returns>
        </member>
        <member name="T:NAudio.Dmo.DmoGuids">
            <summary>
            DMO Guids for use with DMOEnum
            dmoreg.h
            </summary>
        </member>
        <member name="T:NAudio.Dmo.DmoHResults">
            <summary>
            MediaErr.h
            </summary>
        </member>
        <member name="T:NAudio.Dmo.DmoInPlaceProcessFlags">
            <summary>
            DMO Inplace Process Flags
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoInPlaceProcessFlags.Normal">
            <summary>
            DMO_INPLACE_NORMAL 
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoInPlaceProcessFlags.Zero">
            <summary>
            DMO_INPLACE_ZERO
            </summary>
        </member>
        <member name="T:NAudio.Dmo.DmoInPlaceProcessReturn">
            <summary>
            Return value when Process is executed with IMediaObjectInPlace
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoInPlaceProcessReturn.Normal">
            <summary>
            Success. There is no remaining data to process.
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoInPlaceProcessReturn.HasEffectTail">
            <summary>
            Success. There is still data to process.
            </summary>
        </member>
        <member name="T:NAudio.Dmo.DmoInputDataBufferFlags">
            <summary>
            DMO Input Data Buffer Flags
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoInputDataBufferFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoInputDataBufferFlags.SyncPoint">
            <summary>
            DMO_INPUT_DATA_BUFFERF_SYNCPOINT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoInputDataBufferFlags.Time">
            <summary>
            DMO_INPUT_DATA_BUFFERF_TIME
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoInputDataBufferFlags.TimeLength">
            <summary>
            DMO_INPUT_DATA_BUFFERF_TIMELENGTH
            </summary>
        </member>
        <member name="T:NAudio.Dmo.DmoMediaType">
            <summary>
            http://msdn.microsoft.com/en-us/library/aa929922.aspx
            DMO_MEDIA_TYPE 
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoMediaType.MajorType">
            <summary>
            Major type
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoMediaType.MajorTypeName">
            <summary>
            Major type name
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoMediaType.SubType">
            <summary>
            Subtype
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoMediaType.SubTypeName">
            <summary>
            Subtype name
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoMediaType.FixedSizeSamples">
            <summary>
            Fixed size samples
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoMediaType.SampleSize">
            <summary>
            Sample size
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoMediaType.FormatType">
            <summary>
            Format type
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoMediaType.FormatTypeName">
            <summary>
            Format type name
            </summary>
        </member>
        <member name="M:NAudio.Dmo.DmoMediaType.GetWaveFormat">
            <summary>
            Gets the structure as a Wave format (if it is one)
            </summary>        
        </member>
        <member name="M:NAudio.Dmo.DmoMediaType.SetWaveFormat(NAudio.Wave.WaveFormat)">
            <summary>
            Sets this object up to point to a wave format
            </summary>
            <param name="waveFormat">Wave format structure</param>
        </member>
        <member name="T:NAudio.Dmo.DmoOutputDataBuffer">
            <summary>
            DMO Output Data Buffer
            </summary>
        </member>
        <member name="M:NAudio.Dmo.DmoOutputDataBuffer.#ctor(System.Int32)">
            <summary>
            Creates a new DMO Output Data Buffer structure
            </summary>
            <param name="maxBufferSize">Maximum buffer size</param>
        </member>
        <member name="M:NAudio.Dmo.DmoOutputDataBuffer.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoOutputDataBuffer.MediaBuffer">
            <summary>
            Media Buffer
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoOutputDataBuffer.Length">
            <summary>
            Length of data in buffer
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoOutputDataBuffer.StatusFlags">
            <summary>
            Status Flags
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoOutputDataBuffer.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoOutputDataBuffer.Duration">
            <summary>
            Duration
            </summary>
        </member>
        <member name="M:NAudio.Dmo.DmoOutputDataBuffer.RetrieveData(System.Byte[],System.Int32)">
            <summary>
            Retrives the data in this buffer
            </summary>
            <param name="data">Buffer to receive data</param>
            <param name="offset">Offset into buffer</param>
        </member>
        <member name="P:NAudio.Dmo.DmoOutputDataBuffer.MoreDataAvailable">
            <summary>
            Is more data available
            If true, ProcessOuput should be called again
            </summary>
        </member>
        <member name="T:NAudio.Dmo.DmoOutputDataBufferFlags">
            <summary>
            DMO Output Data Buffer Flags
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoOutputDataBufferFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoOutputDataBufferFlags.SyncPoint">
            <summary>
            DMO_OUTPUT_DATA_BUFFERF_SYNCPOINT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoOutputDataBufferFlags.Time">
            <summary>
            DMO_OUTPUT_DATA_BUFFERF_TIME
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoOutputDataBufferFlags.TimeLength">
            <summary>
            DMO_OUTPUT_DATA_BUFFERF_TIMELENGTH
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoOutputDataBufferFlags.Incomplete">
            <summary>
            DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE
            </summary>
        </member>
        <member name="T:NAudio.Dmo.DmoPartialMediaType">
            <summary>
            DMO_PARTIAL_MEDIATYPE
            </summary>
        </member>
        <member name="T:NAudio.Dmo.DmoProcessOutputFlags">
            <summary>
            DMO Process Output Flags
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoProcessOutputFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoProcessOutputFlags.DiscardWhenNoBuffer">
            <summary>
            DMO_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER
            </summary>
        </member>
        <member name="T:NAudio.Dmo.Effect.ChorusPhase">
            <summary>
            Chorus Phase
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.ChorusPhase.Neg180">
            <summary>
            DSFXCHORUS_PHASE_NEG_180
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.ChorusPhase.Neg90">
            <summary>
            DSFXCHORUS_PHASE_NEG_90
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.ChorusPhase.Zero">
            <summary>
            DSFXCHORUS_PHASE_ZERO
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.ChorusPhase.Pos90">
            <summary>
            DSFXCHORUS_PHASE_90
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.ChorusPhase.Pos180">
            <summary>
            DSFXCHORUS_PHASE_180
            </summary>
        </member>
        <member name="T:NAudio.Dmo.Effect.ChorusWaveForm">
            <summary>
            Chorus Wave Form
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.ChorusWaveForm.Triangle">
            <summary>
            DSFXCHORUS_WAVE_TRIANGLE
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.ChorusWaveForm.Sin">
            <summary>
            DSFXCHORUS_WAVE_SIN
            </summary>
        </member>
        <member name="T:NAudio.Dmo.Effect.DmoChorus">
            <summary>
            DMO Chorus Effect
            </summary>
        </member>
        <member name="T:NAudio.Dmo.Effect.DmoChorus.Params">
            <summary>
            DMO Chorus Params
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoChorus.Params.WetDryMixMin">
            <summary>
            DSFXCHORUS_WETDRYMIX_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoChorus.Params.WetDryMixMax">
            <summary>
            DSFXCHORUS_WETDRYMIX_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoChorus.Params.WetDrtMixDefault">
            <summary>
            DSFXCHORUS_WETDRYMIX_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoChorus.Params.DepthMin">
            <summary>
            DSFXCHORUS_DEPTH_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoChorus.Params.DepthMax">
            <summary>
            DSFXCHORUS_DEPTH_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoChorus.Params.DepthDefault">
            <summary>
            DSFXCHORUS_DEPTH_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoChorus.Params.FeedBackMin">
            <summary>
            DSFXCHORUS_FEEDBACK_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoChorus.Params.FeedBackMax">
            <summary>
            DSFXCHORUS_FEEDBACK_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoChorus.Params.FeedBaclDefault">
            <summary>
            DSFXCHORUS_FEEDBACK_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoChorus.Params.FrequencyMin">
            <summary>
            DSFXCHORUS_FREQUENCY_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoChorus.Params.FrequencyMax">
            <summary>
            DSFXCHORUS_FREQUENCY_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoChorus.Params.FrequencyDefault">
            <summary>
            DSFXCHORUS_FREQUENCY_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoChorus.Params.WaveFormDefault">
            <summary>
            DSFXCHORUS_WAVE_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoChorus.Params.DelayMin">
            <summary>
            DSFXCHORUS_DELAY_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoChorus.Params.DelayMax">
            <summary>
            DSFXCHORUS_DELAY_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoChorus.Params.DelayDefault">
            <summary>
            DSFXCHORUS_DELAY_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoChorus.Params.PhaseDefault">
            <summary>
            DSFXCHORUS_PHASE_DEFAULT
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoChorus.Params.WetDryMix">
            <summary>
            Ratio of wet (processed) signal to dry (unprocessed) signal.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoChorus.Params.Depth">
            <summary>
            Percentage by which the delay time is modulated by the low-frequency oscillator,
            in hundredths of a percentage point.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoChorus.Params.FeedBack">
            <summary>
            Percentage of output signal to feed back into the effect's input.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoChorus.Params.Frequency">
            <summary>
            Frequency of the LFO.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoChorus.Params.WaveForm">
            <summary>
            Waveform shape of the LFO.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoChorus.Params.Delay">
            <summary>
            Number of milliseconds the input is delayed before it is played back.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoChorus.Params.Phase">
            <summary>
            Phase differential between left and right LFOs.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoChorus.MediaObject">
            <summary>
            Media Object
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoChorus.MediaObjectInPlace">
            <summary>
            Media Object InPlace
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoChorus.EffectParams">
            <summary>
            Effect Parameter
            </summary>
        </member>
        <member name="M:NAudio.Dmo.Effect.DmoChorus.#ctor">
            <summary>
            Create new DMO Chorus
            </summary>
        </member>
        <member name="M:NAudio.Dmo.Effect.DmoChorus.Dispose">
            <summary>
            Dispose code
            </summary>
        </member>
        <member name="T:NAudio.Dmo.Effect.DmoCompressor">
            <summary>
            DMO Compressor Effect
            </summary>
        </member>
        <member name="T:NAudio.Dmo.Effect.DmoCompressor.Params">
            <summary>
            DMO Compressor Params
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoCompressor.Params.GainMin">
            <summary>
            DSFXCOMPRESSOR_GAIN_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoCompressor.Params.GainMax">
            <summary>
            DSFXCOMPRESSOR_GAIN_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoCompressor.Params.GainDefault">
            <summary>
            DSFXCOMPRESSOR_GAIN_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoCompressor.Params.AttackMin">
            <summary>
            DSFXCOMPRESSOR_ATTACK_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoCompressor.Params.AttackMax">
            <summary>
            DSFXCOMPRESSOR_ATTACK_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoCompressor.Params.AttackDefault">
            <summary>
            DSFXCOMPRESSOR_ATTACK_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoCompressor.Params.ReleaseMin">
            <summary>
            DSFXCOMPRESSOR_RELEASE_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoCompressor.Params.ReleaseMax">
            <summary>
            DSFXCOMPRESSOR_RELEASE_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoCompressor.Params.ReleaseDefault">
            <summary>
            DSFXCOMPRESSOR_RELEASE_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoCompressor.Params.ThresholdMin">
            <summary>
            DSFXCOMPRESSOR_THRESHOLD_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoCompressor.Params.ThresholdMax">
            <summary>
            DSFXCOMPRESSOR_THRESHOLD_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoCompressor.Params.TjresholdDefault">
            <summary>
            DSFXCOMPRESSOR_THRESHOLD_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoCompressor.Params.RatioMin">
            <summary>
            DSFXCOMPRESSOR_RATIO_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoCompressor.Params.RatioMax">
            <summary>
            DSFXCOMPRESSOR_RATIO_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoCompressor.Params.RatioDefault">
            <summary>
            DSFXCOMPRESSOR_RATIO_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoCompressor.Params.PreDelayMin">
            <summary>
            DSFXCOMPRESSOR_PREDELAY_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoCompressor.Params.PreDelayMax">
            <summary>
            DSFXCOMPRESSOR_PREDELAY_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoCompressor.Params.PreDelayDefault">
            <summary>
            DSFXCOMPRESSOR_PREDELAY_DEFAULT
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoCompressor.Params.Gain">
            <summary>
            Output gain of signal after compression.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoCompressor.Params.Attack">
            <summary>
            Time before compression reaches its full value.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoCompressor.Params.Release">
            <summary>
            Speed at which compression is stopped after input drops below Threshold.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoCompressor.Params.Threshold">
            <summary>
            Point at which compression begins, in decibels.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoCompressor.Params.Ratio">
            <summary>
            Compression ratio
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoCompressor.Params.PreDelay">
            <summary>
            Time after Threshold is reached before attack phase is started, in milliseconds.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoCompressor.MediaObject">
            <summary>
            Media Object
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoCompressor.MediaObjectInPlace">
            <summary>
            Media Object InPlace
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoCompressor.EffectParams">
            <summary>
            Effect Parameter
            </summary>
        </member>
        <member name="M:NAudio.Dmo.Effect.DmoCompressor.#ctor">
            <summary>
            Create new DMO Compressor
            </summary>
        </member>
        <member name="M:NAudio.Dmo.Effect.DmoCompressor.Dispose">
            <summary>
            Dispose code
            </summary>
        </member>
        <member name="T:NAudio.Dmo.Effect.DmoDistortion">
            <summary>
            DMO Distortion Effect
            </summary>
        </member>
        <member name="T:NAudio.Dmo.Effect.DmoDistortion.Params">
            <summary>
            DMO Distortion Params
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoDistortion.Params.GainMin">
            <summary>
            DSFXDISTORTION_GAIN_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoDistortion.Params.GainMax">
            <summary>
            DSFXDISTORTION_GAIN_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoDistortion.Params.GainDefault">
            <summary>
            DSFXDISTORTION_GAIN_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoDistortion.Params.EdgeMin">
            <summary>
            DSFXDISTORTION_EDGE_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoDistortion.Params.EdgeMax">
            <summary>
            DSFXDISTORTION_EDGE_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoDistortion.Params.EdgeDefault">
            <summary>
            DSFXDISTORTION_EDGE_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoDistortion.Params.PostEqCenterFrequencyMin">
            <summary>
            DSFXDISTORTION_POSTEQCENTERFREQUENCY_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoDistortion.Params.PostEqCenterFrequencyMax">
            <summary>
            DSFXDISTORTION_POSTEQCENTERFREQUENCY_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoDistortion.Params.PostEqCenterFrequencyDefault">
            <summary>
            DSFXDISTORTION_POSTEQCENTERFREQUENCY_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoDistortion.Params.PostEqBandWidthMin">
            <summary>
            DSFXDISTORTION_POSTEQBANDWIDTH_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoDistortion.Params.PostEqBandWidthMax">
            <summary>
            DSFXDISTORTION_POSTEQBANDWIDTH_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoDistortion.Params.PostEqBandWidthDefault">
            <summary>
            DSFXDISTORTION_POSTEQBANDWIDTH_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoDistortion.Params.PreLowPassCutoffMin">
            <summary>
            DSFXDISTORTION_PRELOWPASSCUTOFF_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoDistortion.Params.PreLowPassCutoffMax">
            <summary>
            DSFXDISTORTION_PRELOWPASSCUTOFF_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoDistortion.Params.PreLowPassCutoffDefault">
            <summary>
            DSFXDISTORTION_PRELOWPASSCUTOFF_DEFAULT
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoDistortion.Params.Gain">
            <summary>
            Amount of signal change after distortion.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoDistortion.Params.Edge">
            <summary>
            Percentage of distortion intensity.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoDistortion.Params.PostEqCenterFrequency">
            <summary>
            Center frequency of harmonic content addition.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoDistortion.Params.PostEqBandWidth">
            <summary>
            Width of frequency band that determines range of harmonic content addition.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoDistortion.Params.PreLowPassCutoff">
            <summary>
            Filter cutoff for high-frequency harmonics attenuation.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoDistortion.MediaObject">
            <summary>
            Media Object
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoDistortion.MediaObjectInPlace">
            <summary>
            Media Object InPlace
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoDistortion.EffectParams">
            <summary>
            Effect Parameter
            </summary>
        </member>
        <member name="M:NAudio.Dmo.Effect.DmoDistortion.#ctor">
            <summary>
            Create new DMO Distortion
            </summary>
        </member>
        <member name="M:NAudio.Dmo.Effect.DmoDistortion.Dispose">
            <summary>
            Dispose code
            </summary>
        </member>
        <member name="T:NAudio.Dmo.Effect.DmoEcho">
            <summary>
            Dmo Echo Effect
            </summary>
        </member>
        <member name="T:NAudio.Dmo.Effect.DmoEcho.Params">
            <summary>
            DMO Echo Params
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoEcho.Params.WetDryMixMin">
            <summary>
            DSFXECHO_WETDRYMIX_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoEcho.Params.WetDryMixMax">
            <summary>
            DSFXECHO_WETDRYMIX_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoEcho.Params.WetDeyMixDefault">
            <summary>
            DSFXECHO_WETDRYMIX_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoEcho.Params.FeedBackMin">
            <summary>
            DSFXECHO_FEEDBACK_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoEcho.Params.FeedBackMax">
            <summary>
            DSFXECHO_FEEDBACK_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoEcho.Params.FeedBackDefault">
            <summary>
            DSFXECHO_FEEDBACK_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoEcho.Params.LeftDelayMin">
            <summary>
            DSFXECHO_LEFTDELAY_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoEcho.Params.LeftDelayMax">
            <summary>
            DSFXECHO_LEFTDELAY_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoEcho.Params.LeftDelayDefault">
            <summary>
            DSFXECHO_LEFTDELAY_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoEcho.Params.RightDelayMin">
            <summary>
            DSFXECHO_RIGHTDELAY_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoEcho.Params.RightDelayMax">
            <summary>
            DSFXECHO_RIGHTDELAY_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoEcho.Params.RightDelayDefault">
            <summary>
            DSFXECHO_RIGHTDELAY_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoEcho.Params.PanDelayDefault">
            <summary>
            DSFXECHO_PANDELAY_DEFAULT
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoEcho.Params.WetDryMix">
            <summary>
            Ratio of wet (processed) signal to dry (unprocessed) signal.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoEcho.Params.FeedBack">
            <summary>
            Percentage of output fed back into input.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoEcho.Params.LeftDelay">
            <summary>
            Delay for left channel, in milliseconds.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoEcho.Params.RightDelay">
            <summary>
            Delay for right channel, in milliseconds.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoEcho.Params.PanDelay">
            <summary>
            Value that specifies whether to swap left and right delays with each successive echo.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoEcho.MediaObject">
            <summary>
            Media Object
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoEcho.MediaObjectInPlace">
            <summary>
            Media Object InPlace
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoEcho.EffectParams">
            <summary>
            Effect Parameter
            </summary>
        </member>
        <member name="M:NAudio.Dmo.Effect.DmoEcho.#ctor">
            <summary>
            Create new DMO Echo
            </summary>
        </member>
        <member name="M:NAudio.Dmo.Effect.DmoEcho.Dispose">
            <summary>
            Dispose code
            </summary>
        </member>
        <member name="T:NAudio.Dmo.Effect.DmoFlanger">
            <summary>
            DMO Flanger Effect
            </summary>
        </member>
        <member name="T:NAudio.Dmo.Effect.DmoFlanger.Params">
            <summary>
            DMO Flanger Params
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoFlanger.Params.WetDryMixMin">
            <summary>
            DSFXFLANGER_WETDRYMIX_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoFlanger.Params.WetDryMixMax">
            <summary>
            DSFXFLANGER_WETDRYMIX_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoFlanger.Params.WetDrtMixDefault">
            <summary>
            DSFXFLANGER_WETDRYMIX_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoFlanger.Params.DepthMin">
            <summary>
            DSFXFLANGER_DEPTH_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoFlanger.Params.DepthMax">
            <summary>
            DSFXFLANGER_DEPTH_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoFlanger.Params.DepthDefault">
            <summary>
            DSFXFLANGER_DEPTH_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoFlanger.Params.FeedBackMin">
            <summary>
            DSFXFLANGER_FEEDBACK_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoFlanger.Params.FeedBackMax">
            <summary>
            DSFXFLANGER_FEEDBACK_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoFlanger.Params.FeedBaclDefault">
            <summary>
            DSFXFLANGER_FEEDBACK_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoFlanger.Params.FrequencyMin">
            <summary>
            DSFXFLANGER_FREQUENCY_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoFlanger.Params.FrequencyMax">
            <summary>
            DSFXFLANGER_FREQUENCY_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoFlanger.Params.FrequencyDefault">
            <summary>
            DSFXFLANGER_FREQUENCY_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoFlanger.Params.WaveFormDefault">
            <summary>
            DSFXFLANGER_WAVE_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoFlanger.Params.DelayMin">
            <summary>
            DSFXFLANGER_DELAY_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoFlanger.Params.DelayMax">
            <summary>
            DSFXFLANGER_DELAY_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoFlanger.Params.DelayDefault">
            <summary>
            DSFXFLANGER_DELAY_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoFlanger.Params.PhaseDefault">
            <summary>
            DSFXFLANGER_PHASE_DEFAULT
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoFlanger.Params.WetDryMix">
            <summary>
            Ratio of wet (processed) signal to dry (unprocessed) signal.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoFlanger.Params.Depth">
            <summary>
            Percentage by which the delay time is modulated by the low-frequency oscillator,
            in hundredths of a percentage point.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoFlanger.Params.FeedBack">
            <summary>
            Percentage of output signal to feed back into the effect's input.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoFlanger.Params.Frequency">
            <summary>
            Frequency of the LFO.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoFlanger.Params.WaveForm">
            <summary>
            Waveform shape of the LFO.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoFlanger.Params.Delay">
            <summary>
            Number of milliseconds the input is delayed before it is played back.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoFlanger.Params.Phase">
            <summary>
            Phase differential between left and right LFOs.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoFlanger.MediaObject">
            <summary>
            Media Object
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoFlanger.MediaObjectInPlace">
            <summary>
            Media Object InPlace
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoFlanger.EffectParams">
            <summary>
            Effect Parameter
            </summary>
        </member>
        <member name="M:NAudio.Dmo.Effect.DmoFlanger.#ctor">
            <summary>
            Create new DMO Flanger
            </summary>
        </member>
        <member name="M:NAudio.Dmo.Effect.DmoFlanger.Dispose">
            <summary>
            Dispose code
            </summary>
        </member>
        <member name="T:NAudio.Dmo.Effect.DmoGargle">
            <summary>
            DMO Gargle Effect
            </summary>
        </member>
        <member name="T:NAudio.Dmo.Effect.DmoGargle.Params">
            <summary>
            DMO Gargle Params
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoGargle.Params.RateHzMin">
            <summary>
            DSFXGARGLE_RATEHZ_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoGargle.Params.RateHzMax">
            <summary>
            DSFXGARGLE_RATEHZ_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoGargle.Params.RateHzDefault">
            <summary>
            DSFXGARGLE_RATEHZ_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoGargle.Params.WaveShapeDefault">
            <summary>
            DSFXGARGLE_WAVE_DEFAULT
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoGargle.Params.RateHz">
            <summary>
            Rate of modulation in hz
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoGargle.Params.WaveShape">
            <summary>
            Gargle Wave Shape
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoGargle.MediaObject">
            <summary>
            Media Object
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoGargle.MediaObjectInPlace">
            <summary>
            Media Object InPlace
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoGargle.EffectParams">
            <summary>
            Effect Parameter
            </summary>
        </member>
        <member name="M:NAudio.Dmo.Effect.DmoGargle.#ctor">
            <summary>
            Create new DMO Gargle
            </summary>
        </member>
        <member name="M:NAudio.Dmo.Effect.DmoGargle.Dispose">
            <summary>
            Dispose code
            </summary>
        </member>
        <member name="T:NAudio.Dmo.Effect.DmoI3DL2Reverb">
            <summary>
            DMO I3DL2Reverb Effect
            </summary>
        </member>
        <member name="T:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params">
            <summary>
            DMO I3DL2Reverb Params
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.RoomMin">
            <summary>
            DSFX_I3DL2REVERB_ROOM_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.RoomMax">
            <summary>
            DSFX_I3DL2REVERB_ROOM_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.RoomDefault">
            <summary>
            DSFX_I3DL2REVERB_ROOM_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.RoomHfMin">
            <summary>
            DSFX_I3DL2REVERB_ROOMHF_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.RoomHfMax">
            <summary>
            DSFX_I3DL2REVERB_ROOMHF_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.RoomHfDefault">
            <summary>
            DSFX_I3DL2REVERB_ROOMHF_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.RoomRollOffFactorMin">
            <summary>
            DSFX_I3DL2REVERB_ROOMROLLOFFFACTOR_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.RoomRollOffFactorMax">
            <summary>
            DSFX_I3DL2REVERB_ROOMROLLOFFFACTOR_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.RoomRollOffFactorDefault">
            <summary>
            DSFX_I3DL2REVERB_ROOMROLLOFFFACTOR_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.DecayTimeMin">
            <summary>
            DSFX_I3DL2REVERB_DECAYTIME_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.DecayTimeMax">
            <summary>
            DSFX_I3DL2REVERB_DECAYTIME_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.DecayTimeDefault">
            <summary>
            DSFX_I3DL2REVERB_DECAYTIME_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.DecayHfRatioMin">
            <summary>
            DSFX_I3DL2REVERB_DECAYHFRATIO_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.DecayHfRatioMax">
            <summary>
            DSFX_I3DL2REVERB_DECAYHFRATIO_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.DecayHfRatioDefault">
            <summary>
            DSFX_I3DL2REVERB_DECAYHFRATIO_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.ReflectionsMin">
            <summary>
            DSFX_I3DL2REVERB_REFLECTIONS_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.ReflectionsMax">
            <summary>
            DSFX_I3DL2REVERB_REFLECTIONS_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.ReflectionsDefault">
            <summary>
            DSFX_I3DL2REVERB_REFLECTIONS_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.ReflectionsDelayMin">
            <summary>
            DSFX_I3DL2REVERB_REFLECTIONSDELAY_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.ReflectionsDelayMax">
            <summary>
            DSFX_I3DL2REVERB_REFLECTIONSDELAY_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.ReflectionsDelayDefault">
            <summary>
            DSFX_I3DL2REVERB_REFLECTIONSDELAY_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.ReverbMin">
            <summary>
            DSFX_I3DL2REVERB_REVERB_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.ReverbMax">
            <summary>
            DSFX_I3DL2REVERB_REVERB_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.ReverbDefault">
            <summary>
            DSFX_I3DL2REVERB_REVERB_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.ReverbDelayMin">
            <summary>
            DSFX_I3DL2REVERB_REVERBDELAY_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.ReverbDelayMax">
            <summary>
            DSFX_I3DL2REVERB_REVERBDELAY_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.ReverbDelayDefault">
            <summary>
            DSFX_I3DL2REVERB_REVERBDELAY_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.DiffusionMin">
            <summary>
            DSFX_I3DL2REVERB_DIFFUSION_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.DiffusionMax">
            <summary>
            DSFX_I3DL2REVERB_DIFFUSION_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.DiffusionDefault">
            <summary>
            DSFX_I3DL2REVERB_DIFFUSION_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.DensityMin">
            <summary>
            DSFX_I3DL2REVERB_DENSITY_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.DensityMax">
            <summary>
            DSFX_I3DL2REVERB_DENSITY_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.DensityDefault">
            <summary>
            DSFX_I3DL2REVERB_DENSITY_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.HfReferenceMin">
            <summary>
            DSFX_I3DL2REVERB_HFREFERENCE_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.HfReferenceMax">
            <summary>
            DSFX_I3DL2REVERB_HFREFERENCE_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.HfReferenceDefault">
            <summary>
            DSFX_I3DL2REVERB_HFREFERENCE_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.QualityMin">
            <summary>
            DSFX_I3DL2REVERB_QUALITY_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.QualityMax">
            <summary>
            DSFX_I3DL2REVERB_QUALITY_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.QualityDefault">
            <summary>
            DSFX_I3DL2REVERB_QUALITY_DEFAULT
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.Room">
            <summary>
            Attenuation of the room effect, in millibels (mB)
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.RoomHf">
            <summary>
            Attenuation of the room high-frequency effect, in mB.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.RoomRollOffFactor">
            <summary>
            Rolloff factor for the reflected signals.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.DecayTime">
            <summary>
            Decay time, in seconds.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.DecayHfRatio">
            <summary>
            Ratio of the decay time at high frequencies to the decay time at low frequencies.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.Reflections">
            <summary>
            Attenuation of early reflections relative to lRoom, in mB.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.ReflectionsDelay">
            <summary>
            Delay time of the first reflection relative to the direct path, in seconds.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.Reverb">
            <summary>
            Attenuation of late reverberation relative to lRoom, in mB.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.ReverbDelay">
            <summary>
            Time limit between the early reflections and the late reverberation relative to the time of the first reflection.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.Diffusion">
            <summary>
            Echo density in the late reverberation decay, in percent.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.Density">
            <summary>
            Modal density in the late reverberation decay, in percent.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.HfReference">
            <summary>
            Reference high frequency, in hertz.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.Quality">
            <summary>
            the quality of the environmental reverberation effect. Higher values produce better quality at the expense of processing time.
            </summary>
        </member>
        <member name="M:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.SetPreset(NAudio.Dmo.Effect.I3DL2EnvironmentPreset)">
            <summary>
            Sets standard reverberation parameters of a buffer.
            </summary>
            <param name="preset">I3DL2EnvironmentPreset</param>
        </member>
        <member name="M:NAudio.Dmo.Effect.DmoI3DL2Reverb.Params.GetPreset">
            <summary>
            retrieves an identifier for standard reverberation parameters of a buffer.
            </summary>
            <returns>I3DL2EnvironmentPreset</returns>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoI3DL2Reverb.MediaObject">
            <summary>
            Media Object
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoI3DL2Reverb.MediaObjectInPlace">
            <summary>
            Media Object InPlace
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoI3DL2Reverb.EffectParams">
            <summary>
            Effect Parameter
            </summary>
        </member>
        <member name="M:NAudio.Dmo.Effect.DmoI3DL2Reverb.#ctor">
            <summary>
            Create new DMO I3DL2Reverb
            </summary>
        </member>
        <member name="M:NAudio.Dmo.Effect.DmoI3DL2Reverb.Dispose">
            <summary>
            Dispose code
            </summary>
        </member>
        <member name="T:NAudio.Dmo.Effect.DmoParamEq">
            <summary>
            DMO Parametric Equalizer Effect
            </summary>
        </member>
        <member name="T:NAudio.Dmo.Effect.DmoParamEq.Params">
            <summary>
            DMO ParamEq Params
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoParamEq.Params.CenterMin">
            <summary>
            DSFXPARAMEQ_CENTER_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoParamEq.Params.CenterMax">
            <summary>
            DSFXPARAMEQ_CENTER_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoParamEq.Params.CenterDefault">
            <summary>
            DSFXPARAMEQ_CENTER_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoParamEq.Params.BandWidthMin">
            <summary>
            DSFXPARAMEQ_BANDWIDTH_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoParamEq.Params.BandWidthMax">
            <summary>
            DSFXPARAMEQ_BANDWIDTH_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoParamEq.Params.BandWidthDefault">
            <summary>
            DSFXPARAMEQ_BANDWIDTH_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoParamEq.Params.GainMin">
            <summary>
            DSFXPARAMEQ_GAIN_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoParamEq.Params.GainMax">
            <summary>
            DSFXPARAMEQ_GAIN_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoParamEq.Params.GainDefault">
            <summary>
            DSFXPARAMEQ_GAIN_DEFAULT
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoParamEq.Params.Center">
            <summary>
            Center frequency, in hertz
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoParamEq.Params.BandWidth">
            <summary>
            Bandwidth, in semitones.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoParamEq.Params.Gain">
            <summary>
            Gain
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoParamEq.MediaObject">
            <summary>
            Media Object
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoParamEq.MediaObjectInPlace">
            <summary>
            Media Object InPlace
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoParamEq.EffectParams">
            <summary>
            Effect Parameter
            </summary>
        </member>
        <member name="M:NAudio.Dmo.Effect.DmoParamEq.#ctor">
            <summary>
            Create new DMO ParamEq
            </summary>
        </member>
        <member name="M:NAudio.Dmo.Effect.DmoParamEq.Dispose">
            <summary>
            Dispose code
            </summary>
        </member>
        <member name="T:NAudio.Dmo.Effect.DmoWavesReverb">
            <summary>
            DMO Reverb Effect
            </summary>
        </member>
        <member name="T:NAudio.Dmo.Effect.DmoWavesReverb.Params">
            <summary>
            DMO Reverb Params
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoWavesReverb.Params.InGainMin">
            <summary>
            DSFX_WAVESREVERB_INGAIN_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoWavesReverb.Params.InGainMax">
            <summary>
            DSFX_WAVESREVERB_INGAIN_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoWavesReverb.Params.InGainDefault">
            <summary>
            DSFX_WAVESREVERB_INGAIN_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoWavesReverb.Params.ReverbMixMin">
            <summary>
            DSFX_WAVESREVERB_REVERBMIX_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoWavesReverb.Params.ReverbMixMax">
            <summary>
            DSFX_WAVESREVERB_REVERBMIX_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoWavesReverb.Params.ReverbMixDefault">
            <summary>
            DSFX_WAVESREVERB_REVERBMIX_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoWavesReverb.Params.ReverbTimeMin">
            <summary>
            DSFX_WAVESREVERB_REVERBTIME_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoWavesReverb.Params.ReverbTimeMax">
            <summary>
            DSFX_WAVESREVERB_REVERBTIME_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoWavesReverb.Params.ReverbTimeDefault">
            <summary>
            DSFX_WAVESREVERB_REVERBTIME_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoWavesReverb.Params.HighFreqRtRatioMin">
            <summary>
            DSFX_WAVESREVERB_HIGHFREQRTRATIO_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoWavesReverb.Params.HighFreqRtRatioMax">
            <summary>
            DSFX_WAVESREVERB_HIGHFREQRTRATIO_MAX
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.DmoWavesReverb.Params.HighFreqRtRatioDefault">
            <summary>
            DSFX_WAVESREVERB_HIGHFREQRTRATIO_DEFAULT
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoWavesReverb.Params.InGain">
            <summary>
            Input gain of signal, in decibels (dB).
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoWavesReverb.Params.ReverbMix">
            <summary>
            Reverb mix, in dB.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoWavesReverb.Params.ReverbTime">
            <summary>
            Reverb time, in milliseconds.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoWavesReverb.Params.HighFreqRtRatio">
            <summary>
            High-frequency reverb time ratio.
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoWavesReverb.MediaObject">
            <summary>
            Media Object
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoWavesReverb.MediaObjectInPlace">
            <summary>
            Media Object InPlace
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.DmoWavesReverb.EffectParams">
            <summary>
            Effect Parameter
            </summary>
        </member>
        <member name="M:NAudio.Dmo.Effect.DmoWavesReverb.#ctor">
            <summary>
            Create new DMO WavesReverb
            </summary>
        </member>
        <member name="M:NAudio.Dmo.Effect.DmoWavesReverb.Dispose">
            <summary>
            Dispose code
            </summary>
        </member>
        <member name="T:NAudio.Dmo.Effect.EchoPanDelay">
            <summary>
            DSFXECHO_PANDELAY
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.EchoPanDelay.Off">
            <summary>
            DSFXECHO_PANDELAY_MIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.EchoPanDelay.On">
            <summary>
            DSFXECHO_PANDELAY_MAX
            </summary>
        </member>
        <member name="T:NAudio.Dmo.Effect.FlangerPhase">
            <summary>
            Flanger Phase
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.FlangerPhase.Neg180">
            <summary>
            DSFXFLANGER_PHASE_NEG_180
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.FlangerPhase.Neg90">
            <summary>
            DSFXFLANGER_PHASE_NEG_90
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.FlangerPhase.Zero">
            <summary>
            DSFXFLANGER_PHASE_ZERO
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.FlangerPhase.Pos90">
            <summary>
            DSFXFLANGER_PHASE_90
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.FlangerPhase.Pos180">
            <summary>
            DSFXFLANGER_PHASE_180
            </summary>
        </member>
        <member name="T:NAudio.Dmo.Effect.FlangerWaveForm">
            <summary>
            Flanger Wave Form
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.FlangerWaveForm.Triangle">
            <summary>
            DSFXFLANGER_WAVE_TRIANGLE
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.FlangerWaveForm.Sin">
            <summary>
            DSFXFLANGER_WAVE_SIN
            </summary>
        </member>
        <member name="T:NAudio.Dmo.Effect.GargleWaveShape">
            <summary>
            Gargle Wave Shape
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.GargleWaveShape.Triangle">
            <summary>
            DSFXGARGLE_WAVE_TRIANGLE
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.GargleWaveShape.Square">
            <summary>
            DSFXGARGLE_WAVE_SQUARE
            </summary>
        </member>
        <member name="T:NAudio.Dmo.Effect.I3DL2EnvironmentPreset">
            <summary>
            I3DL2 Reverberation Presets
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.Default">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_DEFAULT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.Generic">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_GENERIC
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.PaddedCell">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_PADDEDCELL
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.Room">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_ROOM
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.Bathroom">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_BATHROOM
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.LivingRoom">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_LIVINGROOM
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.StoneRoom">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_STONEROOM
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.Auditorium">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_AUDITORIUM
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.ConcertHall">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_CONCERTHALL
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.Cave">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_CAVE
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.Arena">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_ARENA
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.Hangar">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_HANGAR
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.CarpetedHallway">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_CARPETEDHALLWAY
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.Hallway">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_HALLWAY
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.StoneCorridor">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_STONECORRIDOR
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.Alley">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_ALLEY
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.Forest">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_FOREST
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.City">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_CITY
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.Mountains">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_MOUNTAINS
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.Quarry">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_QUARRY
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.Plain">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_PLAIN
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.ParkingLot">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_PARKINGLOT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.SewerPipe">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_SEWERPIPE
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.UnderWater">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_UNDERWATER
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.SmallRoom">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_SMALLROOM
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.MediumRoom">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_MEDIUMROOM
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.LargeRoom">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_LARGEROOM
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.MediumHall">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_MEDIUMHALL
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.LargeHall">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_LARGEHALL
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Effect.I3DL2EnvironmentPreset.Plate">
            <summary>
            DSFX_I3DL2_ENVIRONMENT_PRESET_PLATE
            </summary>
        </member>
        <member name="T:NAudio.Dmo.Effect.IDmoEffector`1">
            <summary>
            Interface of DMO Effectors
            </summary>
            <typeparam name="TParameters">Parameters of the effect to be used</typeparam>
        </member>
        <member name="P:NAudio.Dmo.Effect.IDmoEffector`1.MediaObject">
            <summary>
            Media Object
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.IDmoEffector`1.MediaObjectInPlace">
            <summary>
            Media Object InPlace
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Effect.IDmoEffector`1.EffectParams">
            <summary>
            Effect Parameter
            </summary>
        </member>
        <member name="T:NAudio.Dmo.IMediaBuffer">
            <summary>
            IMediaBuffer Interface
            </summary>
        </member>
        <member name="M:NAudio.Dmo.IMediaBuffer.SetLength(System.Int32)">
            <summary>
            Set Length
            </summary>
            <param name="length">Length</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaBuffer.GetMaxLength(System.Int32@)">
            <summary>
            Get Max Length
            </summary>
            <param name="maxLength">Max Length</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaBuffer.GetBufferAndLength(System.IntPtr,System.IntPtr)">
            <summary>
            Get Buffer and Length
            </summary>
            <param name="bufferPointerPointer">Pointer to variable into which to write the Buffer Pointer </param>
            <param name="validDataLengthPointer">Pointer to variable into which to write the Valid Data Length</param>
            <returns>HRESULT</returns>
        </member>
        <member name="T:NAudio.Dmo.IMediaObject">
            <summary>
            defined in mediaobj.h
            </summary>
        </member>
        <member name="T:NAudio.Dmo.IMediaObjectInPlace">
            <summary>
            defined in mediaobj.h
            </summary>
        </member>
        <member name="T:NAudio.Dmo.IMediaParamInfo">
            <summary>
            defined in Medparam.h
            </summary>
        </member>
        <member name="T:NAudio.Dmo.IWMResamplerProps">
            <summary>
            Windows Media Resampler Props
            wmcodecdsp.h
            </summary>
        </member>
        <member name="M:NAudio.Dmo.IWMResamplerProps.SetHalfFilterLength(System.Int32)">
            <summary>
            Range is 1 to 60
            </summary>
        </member>
        <member name="M:NAudio.Dmo.IWMResamplerProps.SetUserChannelMtx(System.Single[])">
            <summary>
             Specifies the channel matrix.
            </summary>
        </member>
        <member name="T:NAudio.Dmo.MediaBuffer">
            <summary>
            Attempting to implement the COM IMediaBuffer interface as a .NET object
            Not sure what will happen when I pass this to an unmanaged object
            </summary>
        </member>
        <member name="M:NAudio.Dmo.MediaBuffer.#ctor(System.Int32)">
            <summary>
            Creates a new Media Buffer
            </summary>
            <param name="maxLength">Maximum length in bytes</param>
        </member>
        <member name="M:NAudio.Dmo.MediaBuffer.Dispose">
            <summary>
            Dispose and free memory for buffer
            </summary>
        </member>
        <member name="M:NAudio.Dmo.MediaBuffer.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:NAudio.Dmo.MediaBuffer.NAudio#Dmo#IMediaBuffer#SetLength(System.Int32)">
            <summary>
            Set length of valid data in the buffer
            </summary>
            <param name="length">length</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaBuffer.NAudio#Dmo#IMediaBuffer#GetMaxLength(System.Int32@)">
            <summary>
            Gets the maximum length of the buffer
            </summary>
            <param name="maxLength">Max length (output parameter)</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaBuffer.NAudio#Dmo#IMediaBuffer#GetBufferAndLength(System.IntPtr,System.IntPtr)">
            <summary>
            Gets buffer and / or length
            </summary>
            <param name="bufferPointerPointer">Pointer to variable into which buffer pointer should be written</param>
            <param name="validDataLengthPointer">Pointer to variable into which valid data length should be written</param>
            <returns>HRESULT</returns>
        </member>
        <member name="P:NAudio.Dmo.MediaBuffer.Length">
            <summary>
            Length of data in the media buffer
            </summary>
        </member>
        <member name="M:NAudio.Dmo.MediaBuffer.LoadData(System.Byte[],System.Int32)">
            <summary>
            Loads data into this buffer
            </summary>
            <param name="data">Data to load</param>
            <param name="bytes">Number of bytes to load</param>
        </member>
        <member name="M:NAudio.Dmo.MediaBuffer.RetrieveData(System.Byte[],System.Int32)">
            <summary>
            Retrieves the data in the output buffer
            </summary>
            <param name="data">buffer to retrieve into</param>
            <param name="offset">offset within that buffer</param>
        </member>
        <member name="T:NAudio.Dmo.MediaObject">
            <summary>
            Media Object
            </summary>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.#ctor(NAudio.Dmo.IMediaObject)">
            <summary>
            Creates a new Media Object
            </summary>
            <param name="mediaObject">Media Object COM interface</param>
        </member>
        <member name="P:NAudio.Dmo.MediaObject.InputStreamCount">
            <summary>
            Number of input streams
            </summary>
        </member>
        <member name="P:NAudio.Dmo.MediaObject.OutputStreamCount">
            <summary>
            Number of output streams
            </summary>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.GetInputType(System.Int32,System.Int32)">
            <summary>
            Gets the input media type for the specified input stream
            </summary>
            <param name="inputStream">Input stream index</param>
            <param name="inputTypeIndex">Input type index</param>
            <returns>DMO Media Type or null if there are no more input types</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.GetOutputType(System.Int32,System.Int32)">
            <summary>
            Gets the DMO Media Output type
            </summary>
            <param name="outputStream">The output stream</param>
            <param name="outputTypeIndex">Output type index</param>
            <returns>DMO Media Type or null if no more available</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.GetOutputCurrentType(System.Int32)">
            <summary>
            retrieves the media type that was set for an output stream, if any
            </summary>
            <param name="outputStreamIndex">Output stream index</param>
            <returns>DMO Media Type or null if no more available</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.GetInputTypes(System.Int32)">
            <summary>
            Enumerates the supported input types
            </summary>
            <param name="inputStreamIndex">Input stream index</param>
            <returns>Enumeration of input types</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.GetOutputTypes(System.Int32)">
            <summary>
            Enumerates the output types
            </summary>
            <param name="outputStreamIndex">Output stream index</param>
            <returns>Enumeration of supported output types</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.SupportsInputType(System.Int32,NAudio.Dmo.DmoMediaType)">
            <summary>
            Querys whether a specified input type is supported
            </summary>
            <param name="inputStreamIndex">Input stream index</param>
            <param name="mediaType">Media type to check</param>
            <returns>true if supports</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.SetInputType(System.Int32,NAudio.Dmo.DmoMediaType,NAudio.Dmo.DmoSetTypeFlags)">
            <summary>
            Sets the input type helper method
            </summary>
            <param name="inputStreamIndex">Input stream index</param>
            <param name="mediaType">Media type</param>
            <param name="flags">Flags (can be used to test rather than set)</param>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.SetInputType(System.Int32,NAudio.Dmo.DmoMediaType)">
            <summary>
            Sets the input type
            </summary>
            <param name="inputStreamIndex">Input stream index</param>
            <param name="mediaType">Media Type</param>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.SetInputWaveFormat(System.Int32,NAudio.Wave.WaveFormat)">
            <summary>
            Sets the input type to the specified Wave format
            </summary>
            <param name="inputStreamIndex">Input stream index</param>
            <param name="waveFormat">Wave format</param>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.SupportsInputWaveFormat(System.Int32,NAudio.Wave.WaveFormat)">
            <summary>
            Requests whether the specified Wave format is supported as an input
            </summary>
            <param name="inputStreamIndex">Input stream index</param>
            <param name="waveFormat">Wave format</param>
            <returns>true if supported</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.CreateDmoMediaTypeForWaveFormat(NAudio.Wave.WaveFormat)">
            <summary>
            Helper function to make a DMO Media Type to represent a particular WaveFormat
            </summary>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.SupportsOutputType(System.Int32,NAudio.Dmo.DmoMediaType)">
            <summary>
            Checks if a specified output type is supported
            n.b. you may need to set the input type first
            </summary>
            <param name="outputStreamIndex">Output stream index</param>
            <param name="mediaType">Media type</param>
            <returns>True if supported</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.SupportsOutputWaveFormat(System.Int32,NAudio.Wave.WaveFormat)">
            <summary>
            Tests if the specified Wave Format is supported for output
            n.b. may need to set the input type first
            </summary>
            <param name="outputStreamIndex">Output stream index</param>
            <param name="waveFormat">Wave format</param>
            <returns>True if supported</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.SetOutputType(System.Int32,NAudio.Dmo.DmoMediaType,NAudio.Dmo.DmoSetTypeFlags)">
            <summary>
            Helper method to call SetOutputType
            </summary>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.SetOutputType(System.Int32,NAudio.Dmo.DmoMediaType)">
            <summary>
            Sets the output type
            n.b. may need to set the input type first
            </summary>
            <param name="outputStreamIndex">Output stream index</param>
            <param name="mediaType">Media type to set</param>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.SetOutputWaveFormat(System.Int32,NAudio.Wave.WaveFormat)">
            <summary>
            Set output type to the specified wave format
            n.b. may need to set input type first
            </summary>
            <param name="outputStreamIndex">Output stream index</param>
            <param name="waveFormat">Wave format</param>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.GetInputSizeInfo(System.Int32)">
            <summary>
            Get Input Size Info
            </summary>
            <param name="inputStreamIndex">Input Stream Index</param>
            <returns>Input Size Info</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.GetOutputSizeInfo(System.Int32)">
            <summary>
            Get Output Size Info
            </summary>
            <param name="outputStreamIndex">Output Stream Index</param>
            <returns>Output Size Info</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.ProcessInput(System.Int32,NAudio.Dmo.IMediaBuffer,NAudio.Dmo.DmoInputDataBufferFlags,System.Int64,System.Int64)">
            <summary>
            Process Input
            </summary>
            <param name="inputStreamIndex">Input Stream index</param>
            <param name="mediaBuffer">Media Buffer</param>
            <param name="flags">Flags</param>
            <param name="timestamp">Timestamp</param>
            <param name="duration">Duration</param>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.ProcessOutput(NAudio.Dmo.DmoProcessOutputFlags,System.Int32,NAudio.Dmo.DmoOutputDataBuffer[])">
            <summary>
            Process Output
            </summary>
            <param name="flags">Flags</param>
            <param name="outputBufferCount">Output buffer count</param>
            <param name="outputBuffers">Output buffers</param>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.AllocateStreamingResources">
            <summary>
            Gives the DMO a chance to allocate any resources needed for streaming
            </summary>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.FreeStreamingResources">
            <summary>
            Tells the DMO to free any resources needed for streaming
            </summary>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.GetInputMaxLatency(System.Int32)">
            <summary>
            Gets maximum input latency
            </summary>
            <param name="inputStreamIndex">input stream index</param>
            <returns>Maximum input latency as a ref-time</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.Flush">
            <summary>
            Flushes all buffered data
            </summary>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.Discontinuity(System.Int32)">
            <summary>
            Report a discontinuity on the specified input stream
            </summary>
            <param name="inputStreamIndex">Input Stream index</param>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.IsAcceptingData(System.Int32)">
            <summary>
            Is this input stream accepting data?
            </summary>
            <param name="inputStreamIndex">Input Stream index</param>
            <returns>true if accepting data</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.Dispose">
            <summary>
            Experimental code, not currently being called
            Not sure if it is necessary anyway
            </summary>
        </member>
        <member name="T:NAudio.Dmo.MediaObjectInPlace">
            <summary>
            Media Object InPlace
            </summary>
        </member>
        <member name="M:NAudio.Dmo.MediaObjectInPlace.#ctor(NAudio.Dmo.IMediaObjectInPlace)">
            <summary>
            Creates a new Media Object InPlace
            </summary>
            <param name="mediaObjectInPlace">Media Object InPlace COM Interface</param>
        </member>
        <member name="M:NAudio.Dmo.MediaObjectInPlace.Process(System.Int32,System.Int32,System.Byte[],System.Int64,NAudio.Dmo.DmoInPlaceProcessFlags)">
            <summary>
            Processes a block of data.
            The application supplies a pointer to a block of input data. The DMO processes the data in place.
            </summary>
            <param name="size">Size of the data, in bytes.</param>
            <param name="offset">offset into buffer</param>
            <param name="data">In/Out Data Buffer</param>
            <param name="timeStart">Start time of the data.</param>
            <param name="inPlaceFlag">DmoInplaceProcessFlags</param>
            <returns>Return value when Process is executed with IMediaObjectInPlace</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObjectInPlace.Clone">
            <summary>
            Creates a copy of the DMO in its current state.
            </summary>
            <returns>Copyed MediaObjectInPlace</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObjectInPlace.GetLatency">
            <summary>
            Retrieves the latency introduced by this DMO.
            </summary>
            <returns>The latency, in 100-nanosecond units</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObjectInPlace.GetMediaObject">
            <summary>
            Get Media Object
            </summary>
            <returns>Media Object</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObjectInPlace.Dispose">
            <summary>
            Dispose code
            </summary>
        </member>
        <member name="T:NAudio.Dmo.MediaObjectSizeInfo">
            <summary>
            Media Object Size Info
            </summary>
        </member>
        <member name="P:NAudio.Dmo.MediaObjectSizeInfo.Size">
            <summary>
            Minimum Buffer Size, in bytes
            </summary>
        </member>
        <member name="P:NAudio.Dmo.MediaObjectSizeInfo.MaxLookahead">
            <summary>
            Max Lookahead
            </summary>
        </member>
        <member name="P:NAudio.Dmo.MediaObjectSizeInfo.Alignment">
            <summary>
            Alignment
            </summary>
        </member>
        <member name="M:NAudio.Dmo.MediaObjectSizeInfo.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Media Object Size Info
            </summary>
        </member>
        <member name="M:NAudio.Dmo.MediaObjectSizeInfo.ToString">
            <summary>
            ToString
            </summary>        
        </member>
        <member name="T:NAudio.Dmo.MediaParamInfo">
            <summary>
            MP_PARAMINFO
            </summary>
        </member>
        <member name="T:NAudio.Dmo.MediaParamType">
            <summary>
            MP_TYPE
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaParamType.Int">
            <summary>
            MPT_INT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaParamType.Float">
            <summary>
            MPT_FLOAT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaParamType.Bool">
            <summary>
            MPT_BOOL
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaParamType.Enum">
            <summary>
            MPT_ENUM
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaParamType.Max">
            <summary>
            MPT_MAX
            </summary>
        </member>
        <member name="T:NAudio.Dmo.MediaParamCurveType">
            <summary>
            MP_CURVE_TYPE
            </summary>
        </member>
        <member name="T:NAudio.Dmo.MediaTypes">
            <summary>
            uuids.h, ksuuids.h
            </summary>
        </member>
        <member name="T:NAudio.Dmo.ResamplerMediaComObject">
            <summary>
            From wmcodecsdp.h
            Implements:
            - IMediaObject 
            - IMFTransform (Media foundation - we will leave this for now as there is loads of MF stuff)
            - IPropertyStore 
            - IWMResamplerProps 
            Can resample PCM or IEEE
            </summary>
        </member>
        <member name="T:NAudio.Dmo.DmoResampler">
            <summary>
            DMO Resampler
            </summary>
        </member>
        <member name="M:NAudio.Dmo.DmoResampler.#ctor">
            <summary>
            Creates a new Resampler based on the DMO Resampler
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoResampler.MediaObject">
            <summary>
            Media Object
            </summary>
        </member>
        <member name="M:NAudio.Dmo.DmoResampler.Dispose">
            <summary>
            Dispose code - experimental at the moment
            Was added trying to track down why Resampler crashes NUnit
            This code not currently being called by ResamplerDmoStream
            </summary>
        </member>
        <member name="T:NAudio.Dmo.WindowsMediaMp3DecoderComObject">
            <summary>
            implements IMediaObject  (DirectX Media Object)
            implements IMFTransform (Media Foundation Transform)
            On Windows XP, it is always an MM (if present at all)
            </summary>
        </member>
        <member name="T:NAudio.Dmo.WindowsMediaMp3Decoder">
            <summary>
            Windows Media MP3 Decoder (as a DMO)
            WORK IN PROGRESS - DO NOT USE!
            </summary>
        </member>
        <member name="M:NAudio.Dmo.WindowsMediaMp3Decoder.#ctor">
            <summary>
            Creates a new Resampler based on the DMO Resampler
            </summary>
        </member>
        <member name="P:NAudio.Dmo.WindowsMediaMp3Decoder.MediaObject">
            <summary>
            Media Object
            </summary>
        </member>
        <member name="M:NAudio.Dmo.WindowsMediaMp3Decoder.Dispose">
            <summary>
            Dispose code - experimental at the moment
            Was added trying to track down why Resampler crashes NUnit
            This code not currently being called by ResamplerDmoStream
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.AudioSubtypes">
            <summary>
            Audio Subtype GUIDs
            http://msdn.microsoft.com/en-us/library/windows/desktop/aa372553%28v=vs.85%29.aspx
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.AudioSubtypes.MFAudioFormat_AAC">
            <summary>
            Advanced Audio Coding (AAC).
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.AudioSubtypes.MFAudioFormat_ADTS">
            <summary>
            Not used
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.AudioSubtypes.MFAudioFormat_Dolby_AC3_SPDIF">
            <summary>
            Dolby AC-3 audio over Sony/Philips Digital Interface (S/PDIF).
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.AudioSubtypes.MFAudioFormat_DRM">
            <summary>
            Encrypted audio data used with secure audio path.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.AudioSubtypes.MFAudioFormat_DTS">
            <summary>
            Digital Theater Systems (DTS) audio.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.AudioSubtypes.MFAudioFormat_Float">
            <summary>
            Uncompressed IEEE floating-point audio.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.AudioSubtypes.MFAudioFormat_MP3">
            <summary>
            MPEG Audio Layer-3 (MP3).
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.AudioSubtypes.MFAudioFormat_MPEG">
            <summary>
            MPEG-1 audio payload.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.AudioSubtypes.MFAudioFormat_MSP1">
            <summary>
            Windows Media Audio 9 Voice codec.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.AudioSubtypes.MFAudioFormat_PCM">
            <summary>
            Uncompressed PCM audio.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.AudioSubtypes.MFAudioFormat_WMASPDIF">
            <summary>
            Windows Media Audio 9 Professional codec over S/PDIF.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.AudioSubtypes.MFAudioFormat_WMAudio_Lossless">
            <summary>
            Windows Media Audio 9 Lossless codec or Windows Media Audio 9.1 codec.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.AudioSubtypes.MFAudioFormat_WMAudioV8">
            <summary>
            Windows Media Audio 8 codec, Windows Media Audio 9 codec, or Windows Media Audio 9.1 codec.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.AudioSubtypes.MFAudioFormat_WMAudioV9">
            <summary>
            Windows Media Audio 9 Professional codec or Windows Media Audio 9.1 Professional codec.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.AudioSubtypes.MFAudioFormat_Dolby_AC3">
            <summary>
            Dolby Digital (AC-3).
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.AudioSubtypes.MFAudioFormat_FLAC">
            <summary>
            Free Lossless Audio Codec (Supported in Windows 10 and later.)
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.AudioSubtypes.MFAudioFormat_ALAC">
            <summary>
            Apple Lossless Audio Codec (Supported in Windows 10 and later.)
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.AudioSubtypes.MEDIASUBTYPE_RAW_AAC1">
            <summary>
            MPEG-4 and AAC Audio Types
            http://msdn.microsoft.com/en-us/library/windows/desktop/dd317599(v=vs.85).aspx
            Reference : wmcodecdsp.h
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.AudioSubtypes.MEDIASUBTYPE_DVM">
            <summary>
            Dolby Audio Types
            http://msdn.microsoft.com/en-us/library/windows/desktop/dd317599(v=vs.85).aspx
            Reference : wmcodecdsp.h
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.AudioSubtypes.MEDIASUBTYPE_DOLBY_DDPLUS">
            <summary>
            Dolby Audio Types
            http://msdn.microsoft.com/en-us/library/windows/desktop/dd317599(v=vs.85).aspx
            Reference : wmcodecdsp.h
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.AudioSubtypes.KSDATAFORMAT_SUBTYPE_MULAW">
            <summary>
            μ-law coding
            http://msdn.microsoft.com/en-us/library/windows/desktop/dd390971(v=vs.85).aspx
            Reference : Ksmedia.h
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.AudioSubtypes.KSDATAFORMAT_SUBTYPE_ADPCM">
            <summary>
            Adaptive delta pulse code modulation (ADPCM)
            http://msdn.microsoft.com/en-us/library/windows/desktop/dd390971(v=vs.85).aspx
            Reference : Ksmedia.h
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.AudioSubtypes.KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL_PLUS">
            <summary>
            Dolby Digital Plus formatted for HDMI output.
            http://msdn.microsoft.com/en-us/library/windows/hardware/ff538392(v=vs.85).aspx
            Reference : internet
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.AudioSubtypes.MEDIASUBTYPE_MSAUDIO1">
            <summary>
            MSAudio1 - unknown meaning
            Reference : wmcodecdsp.h
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.AudioSubtypes.ImaAdpcm">
            <summary>
            IMA ADPCM ACM Wrapper
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.AudioSubtypes.WMMEDIASUBTYPE_WMSP2">
            <summary>
            WMSP2 - unknown meaning
            Reference: wmsdkidl.h
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.IMFActivate">
            <summary>
            IMFActivate, defined in mfobjects.h
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.GetItem(System.Guid,System.IntPtr)">
            <summary>
            Retrieves the value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.GetItemType(System.Guid,System.Int32@)">
            <summary>
            Retrieves the data type of the value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.CompareItem(System.Guid,System.IntPtr,System.Boolean@)">
            <summary>
            Queries whether a stored attribute value equals a specified PROPVARIANT.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.Compare(NAudio.MediaFoundation.IMFAttributes,System.Int32,System.Boolean@)">
            <summary>
            Compares the attributes on this object with the attributes on another object.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.GetUINT32(System.Guid,System.Int32@)">
            <summary>
            Retrieves a UINT32 value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.GetUINT64(System.Guid,System.Int64@)">
            <summary>
            Retrieves a UINT64 value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.GetDouble(System.Guid,System.Double@)">
            <summary>
            Retrieves a double value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.GetGUID(System.Guid,System.Guid@)">
            <summary>
            Retrieves a GUID value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.GetStringLength(System.Guid,System.Int32@)">
            <summary>
            Retrieves the length of a string value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.GetString(System.Guid,System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
            Retrieves a wide-character string associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.GetAllocatedString(System.Guid,System.String@,System.Int32@)">
            <summary>
            Retrieves a wide-character string associated with a key. This method allocates the memory for the string.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.GetBlobSize(System.Guid,System.Int32@)">
            <summary>
            Retrieves the length of a byte array associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.GetBlob(System.Guid,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Retrieves a byte array associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.GetAllocatedBlob(System.Guid,System.IntPtr@,System.Int32@)">
            <summary>
            Retrieves a byte array associated with a key. This method allocates the memory for the array.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.GetUnknown(System.Guid,System.Guid,System.Object@)">
            <summary>
            Retrieves an interface pointer associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.SetItem(System.Guid,System.IntPtr)">
            <summary>
            Associates an attribute value with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.DeleteItem(System.Guid)">
            <summary>
            Removes a key/value pair from the object's attribute list.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.DeleteAllItems">
            <summary>
            Removes all key/value pairs from the object's attribute list.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.SetUINT32(System.Guid,System.Int32)">
            <summary>
            Associates a UINT32 value with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.SetUINT64(System.Guid,System.Int64)">
            <summary>
            Associates a UINT64 value with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.SetDouble(System.Guid,System.Double)">
            <summary>
            Associates a double value with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.SetGUID(System.Guid,System.Guid)">
            <summary>
            Associates a GUID value with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.SetString(System.Guid,System.String)">
            <summary>
            Associates a wide-character string with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.SetBlob(System.Guid,System.Byte[],System.Int32)">
            <summary>
            Associates a byte array with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.SetUnknown(System.Guid,System.Object)">
            <summary>
            Associates an IUnknown pointer with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.LockStore">
            <summary>
            Locks the attribute store so that no other thread can access it.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.UnlockStore">
            <summary>
            Unlocks the attribute store.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.GetCount(System.Int32@)">
            <summary>
            Retrieves the number of attributes that are set on this object.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.GetItemByIndex(System.Int32,System.Guid@,System.IntPtr)">
            <summary>
            Retrieves an attribute at the specified index.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.CopyAllItems(NAudio.MediaFoundation.IMFAttributes)">
            <summary>
            Copies all of the attributes from this object into another attribute store.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.ActivateObject(System.Guid,System.Object@)">
            <summary>
            Creates the object associated with this activation object. 
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.ShutdownObject">
            <summary>
            Shuts down the created object.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFActivate.DetachObject">
            <summary>
            Detaches the created object from the activation object.
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.IMFAttributes">
            <summary>
            Provides a generic way to store key/value pairs on an object.
            http://msdn.microsoft.com/en-gb/library/windows/desktop/ms704598%28v=vs.85%29.aspx
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.GetItem(System.Guid,System.IntPtr)">
            <summary>
            Retrieves the value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.GetItemType(System.Guid,System.Int32@)">
            <summary>
            Retrieves the data type of the value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.CompareItem(System.Guid,System.IntPtr,System.Boolean@)">
            <summary>
            Queries whether a stored attribute value equals a specified PROPVARIANT.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.Compare(NAudio.MediaFoundation.IMFAttributes,System.Int32,System.Boolean@)">
            <summary>
            Compares the attributes on this object with the attributes on another object.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.GetUINT32(System.Guid,System.Int32@)">
            <summary>
            Retrieves a UINT32 value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.GetUINT64(System.Guid,System.Int64@)">
            <summary>
            Retrieves a UINT64 value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.GetDouble(System.Guid,System.Double@)">
            <summary>
            Retrieves a double value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.GetGUID(System.Guid,System.Guid@)">
            <summary>
            Retrieves a GUID value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.GetStringLength(System.Guid,System.Int32@)">
            <summary>
            Retrieves the length of a string value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.GetString(System.Guid,System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
            Retrieves a wide-character string associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.GetAllocatedString(System.Guid,System.String@,System.Int32@)">
            <summary>
            Retrieves a wide-character string associated with a key. This method allocates the memory for the string.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.GetBlobSize(System.Guid,System.Int32@)">
            <summary>
            Retrieves the length of a byte array associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.GetBlob(System.Guid,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Retrieves a byte array associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.GetAllocatedBlob(System.Guid,System.IntPtr@,System.Int32@)">
            <summary>
            Retrieves a byte array associated with a key. This method allocates the memory for the array.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.GetUnknown(System.Guid,System.Guid,System.Object@)">
            <summary>
            Retrieves an interface pointer associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.SetItem(System.Guid,System.IntPtr)">
            <summary>
            Associates an attribute value with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.DeleteItem(System.Guid)">
            <summary>
            Removes a key/value pair from the object's attribute list.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.DeleteAllItems">
            <summary>
            Removes all key/value pairs from the object's attribute list.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.SetUINT32(System.Guid,System.Int32)">
            <summary>
            Associates a UINT32 value with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.SetUINT64(System.Guid,System.Int64)">
            <summary>
            Associates a UINT64 value with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.SetDouble(System.Guid,System.Double)">
            <summary>
            Associates a double value with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.SetGUID(System.Guid,System.Guid)">
            <summary>
            Associates a GUID value with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.SetString(System.Guid,System.String)">
            <summary>
            Associates a wide-character string with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.SetBlob(System.Guid,System.Byte[],System.Int32)">
            <summary>
            Associates a byte array with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.SetUnknown(System.Guid,System.Object)">
            <summary>
            Associates an IUnknown pointer with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.LockStore">
            <summary>
            Locks the attribute store so that no other thread can access it.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.UnlockStore">
            <summary>
            Unlocks the attribute store.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.GetCount(System.Int32@)">
            <summary>
            Retrieves the number of attributes that are set on this object.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.GetItemByIndex(System.Int32,System.Guid@,System.IntPtr)">
            <summary>
            Retrieves an attribute at the specified index.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFAttributes.CopyAllItems(NAudio.MediaFoundation.IMFAttributes)">
            <summary>
            Copies all of the attributes from this object into another attribute store.
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.IMFByteStream">
            <summary>
            IMFByteStream 
            http://msdn.microsoft.com/en-gb/library/windows/desktop/ms698720%28v=vs.85%29.aspx
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFByteStream.GetCapabilities(System.Int32@)">
            <summary>
            Retrieves the characteristics of the byte stream. 
            virtual HRESULT STDMETHODCALLTYPE GetCapabilities(/*[out]*/ __RPC__out DWORD *pdwCapabilities) = 0;
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFByteStream.GetLength(System.Int64@)">
            <summary>
            Retrieves the length of the stream. 
            virtual HRESULT STDMETHODCALLTYPE GetLength(/*[out]*/ __RPC__out QWORD *pqwLength) = 0;
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFByteStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream. 
            virtual HRESULT STDMETHODCALLTYPE SetLength(/*[in]*/ QWORD qwLength) = 0;
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFByteStream.GetCurrentPosition(System.Int64@)">
            <summary>
            Retrieves the current read or write position in the stream. 
            virtual HRESULT STDMETHODCALLTYPE GetCurrentPosition(/*[out]*/ __RPC__out QWORD *pqwPosition) = 0;
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFByteStream.SetCurrentPosition(System.Int64)">
            <summary>
            Sets the current read or write position. 
            virtual HRESULT STDMETHODCALLTYPE SetCurrentPosition(/*[in]*/ QWORD qwPosition) = 0;
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFByteStream.IsEndOfStream(System.Boolean@)">
            <summary>
            Queries whether the current position has reached the end of the stream. 
            virtual HRESULT STDMETHODCALLTYPE IsEndOfStream(/*[out]*/ __RPC__out BOOL *pfEndOfStream) = 0;
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFByteStream.Read(System.IntPtr,System.Int32,System.Int32@)">
            <summary>
            Reads data from the stream. 
            virtual HRESULT STDMETHODCALLTYPE Read(/*[size_is][out]*/ __RPC__out_ecount_full(cb) BYTE *pb, /*[in]*/ ULONG cb, /*[out]*/ __RPC__out ULONG *pcbRead) = 0;
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFByteStream.BeginRead(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Begins an asynchronous read operation from the stream. 
            virtual /*[local]*/ HRESULT STDMETHODCALLTYPE BeginRead(/*[out]*/ _Out_writes_bytes_(cb)  BYTE *pb, /*[in]*/ ULONG cb, /*[in]*/ IMFAsyncCallback *pCallback, /*[in]*/ IUnknown *punkState) = 0;
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFByteStream.EndRead(System.IntPtr,System.Int32@)">
            <summary>
            Completes an asynchronous read operation. 
            virtual /*[local]*/ HRESULT STDMETHODCALLTYPE EndRead(/*[in]*/ IMFAsyncResult *pResult, /*[out]*/ _Out_  ULONG *pcbRead) = 0;
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFByteStream.Write(System.IntPtr,System.Int32,System.Int32@)">
            <summary>
            Writes data to the stream. 
            virtual HRESULT STDMETHODCALLTYPE Write(/*[size_is][in]*/ __RPC__in_ecount_full(cb) const BYTE *pb, /*[in]*/ ULONG cb, /*[out]*/ __RPC__out ULONG *pcbWritten) = 0;
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFByteStream.BeginWrite(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Begins an asynchronous write operation to the stream. 
            virtual /*[local]*/ HRESULT STDMETHODCALLTYPE BeginWrite(/*[in]*/ _In_reads_bytes_(cb)  const BYTE *pb, /*[in]*/ ULONG cb, /*[in]*/ IMFAsyncCallback *pCallback, /*[in]*/ IUnknown *punkState) = 0;
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFByteStream.EndWrite(System.IntPtr,System.Int32@)">
            <summary>
            Completes an asynchronous write operation. 
            virtual /*[local]*/ HRESULT STDMETHODCALLTYPE EndWrite(/*[in]*/ IMFAsyncResult *pResult, /*[out]*/ _Out_  ULONG *pcbWritten) = 0;
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFByteStream.Seek(System.Int32,System.Int64,System.Int32,System.Int64@)">
            <summary>
            Moves the current position in the stream by a specified offset. 
            virtual HRESULT STDMETHODCALLTYPE Seek(/*[in]*/ MFBYTESTREAM_SEEK_ORIGIN SeekOrigin, /*[in]*/ LONGLONG llSeekOffset, /*[in]*/ DWORD dwSeekFlags, /*[out]*/ __RPC__out QWORD *pqwCurrentPosition) = 0;
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFByteStream.Flush">
            <summary>
            Clears any internal buffers used by the stream. 
            virtual HRESULT STDMETHODCALLTYPE Flush( void) = 0;
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFByteStream.Close">
            <summary>
            Closes the stream and releases any resources associated with the stream. 
            virtual HRESULT STDMETHODCALLTYPE Close( void) = 0;
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.IMFCollection">
            <summary>
            Represents a generic collection of IUnknown pointers. 
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFCollection.GetElementCount(System.Int32@)">
            <summary>
            Retrieves the number of objects in the collection.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFCollection.GetElement(System.Int32,System.Object@)">
            <summary>
            Retrieves an object in the collection.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFCollection.AddElement(System.Object)">
            <summary>
            Adds an object to the collection.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFCollection.RemoveElement(System.Int32,System.Object@)">
            <summary>
            Removes an object from the collection.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFCollection.InsertElementAt(System.Int32,System.Object)">
            <summary>
            Removes an object from the collection.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFCollection.RemoveAllElements">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.IMFMediaBuffer">
            <summary>
            IMFMediaBuffer
            http://msdn.microsoft.com/en-gb/library/windows/desktop/ms696261%28v=vs.85%29.aspx
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaBuffer.Lock(System.IntPtr@,System.Int32@,System.Int32@)">
            <summary>
            Gives the caller access to the memory in the buffer.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaBuffer.Unlock">
            <summary>
            Unlocks a buffer that was previously locked.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaBuffer.GetCurrentLength(System.Int32@)">
            <summary>
            Retrieves the length of the valid data in the buffer.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaBuffer.SetCurrentLength(System.Int32)">
            <summary>
            Sets the length of the valid data in the buffer.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaBuffer.GetMaxLength(System.Int32@)">
            <summary>
            Retrieves the allocated size of the buffer.
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.IMFMediaEvent">
            <summary>
            IMFMediaEvent - Represents an event generated by a Media Foundation object. Use this interface to get information about the event.
            http://msdn.microsoft.com/en-us/library/windows/desktop/ms702249%28v=vs.85%29.aspx
            Mfobjects.h
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.GetItem(System.Guid,System.IntPtr)">
            <summary>
            Retrieves the value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.GetItemType(System.Guid,System.Int32@)">
            <summary>
            Retrieves the data type of the value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.CompareItem(System.Guid,System.IntPtr,System.Boolean@)">
            <summary>
            Queries whether a stored attribute value equals a specified PROPVARIANT.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.Compare(NAudio.MediaFoundation.IMFAttributes,System.Int32,System.Boolean@)">
            <summary>
            Compares the attributes on this object with the attributes on another object.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.GetUINT32(System.Guid,System.Int32@)">
            <summary>
            Retrieves a UINT32 value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.GetUINT64(System.Guid,System.Int64@)">
            <summary>
            Retrieves a UINT64 value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.GetDouble(System.Guid,System.Double@)">
            <summary>
            Retrieves a double value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.GetGUID(System.Guid,System.Guid@)">
            <summary>
            Retrieves a GUID value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.GetStringLength(System.Guid,System.Int32@)">
            <summary>
            Retrieves the length of a string value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.GetString(System.Guid,System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
            Retrieves a wide-character string associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.GetAllocatedString(System.Guid,System.String@,System.Int32@)">
            <summary>
            Retrieves a wide-character string associated with a key. This method allocates the memory for the string.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.GetBlobSize(System.Guid,System.Int32@)">
            <summary>
            Retrieves the length of a byte array associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.GetBlob(System.Guid,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Retrieves a byte array associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.GetAllocatedBlob(System.Guid,System.IntPtr@,System.Int32@)">
            <summary>
            Retrieves a byte array associated with a key. This method allocates the memory for the array.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.GetUnknown(System.Guid,System.Guid,System.Object@)">
            <summary>
            Retrieves an interface pointer associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.SetItem(System.Guid,System.IntPtr)">
            <summary>
            Associates an attribute value with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.DeleteItem(System.Guid)">
            <summary>
            Removes a key/value pair from the object's attribute list.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.DeleteAllItems">
            <summary>
            Removes all key/value pairs from the object's attribute list.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.SetUINT32(System.Guid,System.Int32)">
            <summary>
            Associates a UINT32 value with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.SetUINT64(System.Guid,System.Int64)">
            <summary>
            Associates a UINT64 value with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.SetDouble(System.Guid,System.Double)">
            <summary>
            Associates a double value with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.SetGUID(System.Guid,System.Guid)">
            <summary>
            Associates a GUID value with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.SetString(System.Guid,System.String)">
            <summary>
            Associates a wide-character string with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.SetBlob(System.Guid,System.Byte[],System.Int32)">
            <summary>
            Associates a byte array with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.SetUnknown(System.Guid,System.Object)">
            <summary>
            Associates an IUnknown pointer with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.LockStore">
            <summary>
            Locks the attribute store so that no other thread can access it.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.UnlockStore">
            <summary>
            Unlocks the attribute store.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.GetCount(System.Int32@)">
            <summary>
            Retrieves the number of attributes that are set on this object.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.GetItemByIndex(System.Int32,System.Guid@,System.IntPtr)">
            <summary>
            Retrieves an attribute at the specified index.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.CopyAllItems(NAudio.MediaFoundation.IMFAttributes)">
            <summary>
            Copies all of the attributes from this object into another attribute store.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.GetType(NAudio.MediaFoundation.MediaEventType@)">
            <summary>
            Retrieves the event type. 
            </summary>
            <remarks>
            virtual HRESULT STDMETHODCALLTYPE GetType( 
                /* [out] */ __RPC__out MediaEventType *pmet) = 0;
            </remarks>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.GetExtendedType(System.Guid@)">
            <summary>
            Retrieves the extended type of the event.
            </summary>
            <remarks>
            virtual HRESULT STDMETHODCALLTYPE GetExtendedType( 
                /* [out] */ __RPC__out GUID *pguidExtendedType) = 0;
            </remarks>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.GetStatus(System.Int32@)">
            <summary>
            Retrieves an HRESULT that specifies the event status.
            </summary>
            <remarks>
            virtual HRESULT STDMETHODCALLTYPE GetStatus( 
                /* [out] */ __RPC__out HRESULT *phrStatus) = 0;
            </remarks>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaEvent.GetValue(System.IntPtr)">
            <summary>
            Retrieves the value associated with the event, if any. 
            </summary>
            <remarks>
            virtual HRESULT STDMETHODCALLTYPE GetValue( 
                /* [out] */ __RPC__out PROPVARIANT *pvValue) = 0;
            </remarks>
        </member>
        <member name="T:NAudio.MediaFoundation.IMFMediaType">
            <summary>
            Represents a description of a media format. 
            http://msdn.microsoft.com/en-us/library/windows/desktop/ms704850%28v=vs.85%29.aspx
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.GetItem(System.Guid,System.IntPtr)">
            <summary>
            Retrieves the value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.GetItemType(System.Guid,System.Int32@)">
            <summary>
            Retrieves the data type of the value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.CompareItem(System.Guid,System.IntPtr,System.Boolean@)">
            <summary>
            Queries whether a stored attribute value equals a specified PROPVARIANT.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.Compare(NAudio.MediaFoundation.IMFAttributes,System.Int32,System.Boolean@)">
            <summary>
            Compares the attributes on this object with the attributes on another object.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.GetUINT32(System.Guid,System.Int32@)">
            <summary>
            Retrieves a UINT32 value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.GetUINT64(System.Guid,System.Int64@)">
            <summary>
            Retrieves a UINT64 value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.GetDouble(System.Guid,System.Double@)">
            <summary>
            Retrieves a double value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.GetGUID(System.Guid,System.Guid@)">
            <summary>
            Retrieves a GUID value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.GetStringLength(System.Guid,System.Int32@)">
            <summary>
            Retrieves the length of a string value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.GetString(System.Guid,System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
            Retrieves a wide-character string associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.GetAllocatedString(System.Guid,System.String@,System.Int32@)">
            <summary>
            Retrieves a wide-character string associated with a key. This method allocates the memory for the string.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.GetBlobSize(System.Guid,System.Int32@)">
            <summary>
            Retrieves the length of a byte array associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.GetBlob(System.Guid,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Retrieves a byte array associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.GetAllocatedBlob(System.Guid,System.IntPtr@,System.Int32@)">
            <summary>
            Retrieves a byte array associated with a key. This method allocates the memory for the array.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.GetUnknown(System.Guid,System.Guid,System.Object@)">
            <summary>
            Retrieves an interface pointer associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.SetItem(System.Guid,System.IntPtr)">
            <summary>
            Associates an attribute value with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.DeleteItem(System.Guid)">
            <summary>
            Removes a key/value pair from the object's attribute list.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.DeleteAllItems">
            <summary>
            Removes all key/value pairs from the object's attribute list.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.SetUINT32(System.Guid,System.Int32)">
            <summary>
            Associates a UINT32 value with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.SetUINT64(System.Guid,System.Int64)">
            <summary>
            Associates a UINT64 value with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.SetDouble(System.Guid,System.Double)">
            <summary>
            Associates a double value with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.SetGUID(System.Guid,System.Guid)">
            <summary>
            Associates a GUID value with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.SetString(System.Guid,System.String)">
            <summary>
            Associates a wide-character string with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.SetBlob(System.Guid,System.Byte[],System.Int32)">
            <summary>
            Associates a byte array with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.SetUnknown(System.Guid,System.Object)">
            <summary>
            Associates an IUnknown pointer with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.LockStore">
            <summary>
            Locks the attribute store so that no other thread can access it.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.UnlockStore">
            <summary>
            Unlocks the attribute store.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.GetCount(System.Int32@)">
            <summary>
            Retrieves the number of attributes that are set on this object.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.GetItemByIndex(System.Int32,System.Guid@,System.IntPtr)">
            <summary>
            Retrieves an attribute at the specified index.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.CopyAllItems(NAudio.MediaFoundation.IMFAttributes)">
            <summary>
            Copies all of the attributes from this object into another attribute store.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.GetMajorType(System.Guid@)">
            <summary>
            Retrieves the major type of the format.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.IsCompressedFormat(System.Boolean@)">
            <summary>
            Queries whether the media type is a compressed format.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.IsEqual(NAudio.MediaFoundation.IMFMediaType,System.Int32@)">
            <summary>
            Compares two media types and determines whether they are identical.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.GetRepresentation(System.Guid,System.IntPtr@)">
            <summary>
            Retrieves an alternative representation of the media type.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFMediaType.FreeRepresentation(System.Guid,System.IntPtr)">
            <summary>
            Frees memory that was allocated by the GetRepresentation method.
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.IMFReadWriteClassFactory">
            <summary>
            Creates an instance of either the sink writer or the source reader.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFReadWriteClassFactory.CreateInstanceFromURL(System.Guid,System.String,NAudio.MediaFoundation.IMFAttributes,System.Guid,System.Object@)">
            <summary>
            Creates an instance of the sink writer or source reader, given a URL.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFReadWriteClassFactory.CreateInstanceFromObject(System.Guid,System.Object,NAudio.MediaFoundation.IMFAttributes,System.Guid,System.Object@)">
            <summary>
            Creates an instance of the sink writer or source reader, given an IUnknown pointer. 
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.MFReadWriteClassFactory">
            <summary>
            CLSID_MFReadWriteClassFactory
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.IMFSample">
            <summary>
            http://msdn.microsoft.com/en-gb/library/windows/desktop/ms702192%28v=vs.85%29.aspx
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.GetItem(System.Guid,System.IntPtr)">
            <summary>
            Retrieves the value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.GetItemType(System.Guid,System.Int32@)">
            <summary>
            Retrieves the data type of the value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.CompareItem(System.Guid,System.IntPtr,System.Boolean@)">
            <summary>
            Queries whether a stored attribute value equals a specified PROPVARIANT.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.Compare(NAudio.MediaFoundation.IMFAttributes,System.Int32,System.Boolean@)">
            <summary>
            Compares the attributes on this object with the attributes on another object.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.GetUINT32(System.Guid,System.Int32@)">
            <summary>
            Retrieves a UINT32 value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.GetUINT64(System.Guid,System.Int64@)">
            <summary>
            Retrieves a UINT64 value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.GetDouble(System.Guid,System.Double@)">
            <summary>
            Retrieves a double value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.GetGUID(System.Guid,System.Guid@)">
            <summary>
            Retrieves a GUID value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.GetStringLength(System.Guid,System.Int32@)">
            <summary>
            Retrieves the length of a string value associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.GetString(System.Guid,System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
            Retrieves a wide-character string associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.GetAllocatedString(System.Guid,System.String@,System.Int32@)">
            <summary>
            Retrieves a wide-character string associated with a key. This method allocates the memory for the string.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.GetBlobSize(System.Guid,System.Int32@)">
            <summary>
            Retrieves the length of a byte array associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.GetBlob(System.Guid,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Retrieves a byte array associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.GetAllocatedBlob(System.Guid,System.IntPtr@,System.Int32@)">
            <summary>
            Retrieves a byte array associated with a key. This method allocates the memory for the array.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.GetUnknown(System.Guid,System.Guid,System.Object@)">
            <summary>
            Retrieves an interface pointer associated with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.SetItem(System.Guid,System.IntPtr)">
            <summary>
            Associates an attribute value with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.DeleteItem(System.Guid)">
            <summary>
            Removes a key/value pair from the object's attribute list.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.DeleteAllItems">
            <summary>
            Removes all key/value pairs from the object's attribute list.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.SetUINT32(System.Guid,System.Int32)">
            <summary>
            Associates a UINT32 value with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.SetUINT64(System.Guid,System.Int64)">
            <summary>
            Associates a UINT64 value with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.SetDouble(System.Guid,System.Double)">
            <summary>
            Associates a double value with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.SetGUID(System.Guid,System.Guid)">
            <summary>
            Associates a GUID value with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.SetString(System.Guid,System.String)">
            <summary>
            Associates a wide-character string with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.SetBlob(System.Guid,System.Byte[],System.Int32)">
            <summary>
            Associates a byte array with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.SetUnknown(System.Guid,System.Object)">
            <summary>
            Associates an IUnknown pointer with a key.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.LockStore">
            <summary>
            Locks the attribute store so that no other thread can access it.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.UnlockStore">
            <summary>
            Unlocks the attribute store.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.GetCount(System.Int32@)">
            <summary>
            Retrieves the number of attributes that are set on this object.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.GetItemByIndex(System.Int32,System.Guid@,System.IntPtr)">
            <summary>
            Retrieves an attribute at the specified index.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.CopyAllItems(NAudio.MediaFoundation.IMFAttributes)">
            <summary>
            Copies all of the attributes from this object into another attribute store.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.GetSampleFlags(System.Int32@)">
            <summary>
            Retrieves flags associated with the sample.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.SetSampleFlags(System.Int32)">
            <summary>
            Sets flags associated with the sample.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.GetSampleTime(System.Int64@)">
            <summary>
            Retrieves the presentation time of the sample.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.SetSampleTime(System.Int64)">
            <summary>
            Sets the presentation time of the sample.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.GetSampleDuration(System.Int64@)">
            <summary>
            Retrieves the duration of the sample.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.SetSampleDuration(System.Int64)">
            <summary>
            Sets the duration of the sample.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.GetBufferCount(System.Int32@)">
            <summary>
            Retrieves the number of buffers in the sample.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.GetBufferByIndex(System.Int32,NAudio.MediaFoundation.IMFMediaBuffer@)">
            <summary>
            Retrieves a buffer from the sample.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.ConvertToContiguousBuffer(NAudio.MediaFoundation.IMFMediaBuffer@)">
            <summary>
            Converts a sample with multiple buffers into a sample with a single buffer.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.AddBuffer(NAudio.MediaFoundation.IMFMediaBuffer)">
            <summary>
             Adds a buffer to the end of the list of buffers in the sample.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.RemoveBufferByIndex(System.Int32)">
            <summary>
            Removes a buffer at a specified index from the sample.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.RemoveAllBuffers">
            <summary>
            Removes all buffers from the sample.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.GetTotalLength(System.Int32@)">
            <summary>
            Retrieves the total length of the valid data in all of the buffers in the sample.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSample.CopyToBuffer(NAudio.MediaFoundation.IMFMediaBuffer)">
            <summary>
            Copies the sample data to a buffer.
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.IMFSinkWriter">
            <summary>
            Implemented by the Microsoft Media Foundation sink writer object.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSinkWriter.AddStream(NAudio.MediaFoundation.IMFMediaType,System.Int32@)">
            <summary>
            Adds a stream to the sink writer.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSinkWriter.SetInputMediaType(System.Int32,NAudio.MediaFoundation.IMFMediaType,NAudio.MediaFoundation.IMFAttributes)">
            <summary>
            Sets the input format for a stream on the sink writer.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSinkWriter.BeginWriting">
            <summary>
            Initializes the sink writer for writing.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSinkWriter.WriteSample(System.Int32,NAudio.MediaFoundation.IMFSample)">
            <summary>
            Delivers a sample to the sink writer.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSinkWriter.SendStreamTick(System.Int32,System.Int64)">
            <summary>
            Indicates a gap in an input stream.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSinkWriter.PlaceMarker(System.Int32,System.IntPtr)">
            <summary>
            Places a marker in the specified stream.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSinkWriter.NotifyEndOfSegment(System.Int32)">
            <summary>
            Notifies the media sink that a stream has reached the end of a segment.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSinkWriter.Flush(System.Int32)">
            <summary>
            Flushes one or more streams.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSinkWriter.DoFinalize">
            <summary>
            (Finalize) Completes all writing operations on the sink writer.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSinkWriter.GetServiceForStream(System.Int32,System.Guid@,System.Guid@,System.IntPtr@)">
            <summary>
            Queries the underlying media sink or encoder for an interface.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSinkWriter.GetStatistics(System.Int32,NAudio.MediaFoundation.MF_SINK_WRITER_STATISTICS)">
            <summary>
            Gets statistics about the performance of the sink writer.
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.IMFSourceReader">
            <summary>
            IMFSourceReader interface
            http://msdn.microsoft.com/en-us/library/windows/desktop/dd374655%28v=vs.85%29.aspx
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSourceReader.GetStreamSelection(System.Int32,System.Boolean@)">
            <summary>
            Queries whether a stream is selected.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSourceReader.SetStreamSelection(System.Int32,System.Boolean)">
            <summary>
            Selects or deselects one or more streams.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSourceReader.GetNativeMediaType(System.Int32,System.Int32,NAudio.MediaFoundation.IMFMediaType@)">
            <summary>
            Gets a format that is supported natively by the media source.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSourceReader.GetCurrentMediaType(System.Int32,NAudio.MediaFoundation.IMFMediaType@)">
            <summary>
            Gets the current media type for a stream.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSourceReader.SetCurrentMediaType(System.Int32,System.IntPtr,NAudio.MediaFoundation.IMFMediaType)">
            <summary>
            Sets the media type for a stream.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSourceReader.SetCurrentPosition(System.Guid,System.IntPtr)">
            <summary>
            Seeks to a new position in the media source.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSourceReader.ReadSample(System.Int32,System.Int32,System.Int32@,NAudio.MediaFoundation.MF_SOURCE_READER_FLAG@,System.UInt64@,NAudio.MediaFoundation.IMFSample@)">
            <summary>
            Reads the next sample from the media source.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSourceReader.Flush(System.Int32)">
            <summary>
            Flushes one or more streams.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSourceReader.GetServiceForStream(System.Int32,System.Guid,System.Guid,System.IntPtr@)">
            <summary>
            Queries the underlying media source or decoder for an interface.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFSourceReader.GetPresentationAttribute(System.Int32,System.Guid,System.IntPtr)">
            <summary>
            Gets an attribute from the underlying media source.
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.MF_SOURCE_READER_FLAG">
            <summary>
            Contains flags that indicate the status of the IMFSourceReader::ReadSample method
            http://msdn.microsoft.com/en-us/library/windows/desktop/dd375773(v=vs.85).aspx
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MF_SOURCE_READER_FLAG.None">
            <summary>
            No Error
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MF_SOURCE_READER_FLAG.MF_SOURCE_READERF_ERROR">
            <summary>
            An error occurred. If you receive this flag, do not make any further calls to IMFSourceReader methods.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MF_SOURCE_READER_FLAG.MF_SOURCE_READERF_ENDOFSTREAM">
            <summary>
            The source reader reached the end of the stream.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MF_SOURCE_READER_FLAG.MF_SOURCE_READERF_NEWSTREAM">
            <summary>
            One or more new streams were created
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MF_SOURCE_READER_FLAG.MF_SOURCE_READERF_NATIVEMEDIATYPECHANGED">
            <summary>
            The native format has changed for one or more streams. The native format is the format delivered by the media source before any decoders are inserted.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MF_SOURCE_READER_FLAG.MF_SOURCE_READERF_CURRENTMEDIATYPECHANGED">
            <summary>
            The current media has type changed for one or more streams. To get the current media type, call the IMFSourceReader::GetCurrentMediaType method.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MF_SOURCE_READER_FLAG.MF_SOURCE_READERF_STREAMTICK">
            <summary>
            There is a gap in the stream. This flag corresponds to an MEStreamTick event from the media source.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MF_SOURCE_READER_FLAG.MF_SOURCE_READERF_ALLEFFECTSREMOVED">
            <summary>
            All transforms inserted by the application have been removed for a particular stream.
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.IMFTransform">
            <summary>
            IMFTransform, defined in mftransform.h
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFTransform.GetStreamLimits(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Retrieves the minimum and maximum number of input and output streams.
            </summary>
            <remarks>
            virtual HRESULT STDMETHODCALLTYPE GetStreamLimits( 
                /* [out] */ __RPC__out DWORD *pdwInputMinimum,
                /* [out] */ __RPC__out DWORD *pdwInputMaximum,
                /* [out] */ __RPC__out DWORD *pdwOutputMinimum,
                /* [out] */ __RPC__out DWORD *pdwOutputMaximum) = 0;
            </remarks>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFTransform.GetStreamCount(System.Int32@,System.Int32@)">
            <summary>
            Retrieves the current number of input and output streams on this MFT.
            </summary>
            <remarks>
            virtual HRESULT STDMETHODCALLTYPE GetStreamCount( 
                /* [out] */ __RPC__out DWORD *pcInputStreams,
                /* [out] */ __RPC__out DWORD *pcOutputStreams) = 0;
            </remarks>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFTransform.GetStreamIds(System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Retrieves the stream identifiers for the input and output streams on this MFT.
            </summary>
            <remarks>
            virtual HRESULT STDMETHODCALLTYPE GetStreamIDs( 
                DWORD dwInputIDArraySize,
                /* [size_is][out] */ __RPC__out_ecount_full(dwInputIDArraySize) DWORD *pdwInputIDs,
                DWORD dwOutputIDArraySize,
                /* [size_is][out] */ __RPC__out_ecount_full(dwOutputIDArraySize) DWORD *pdwOutputIDs) = 0;
            </remarks>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFTransform.GetInputStreamInfo(System.Int32,NAudio.MediaFoundation.MFT_INPUT_STREAM_INFO@)">
            <summary>
            Gets the buffer requirements and other information for an input stream on this Media Foundation transform (MFT). 
            </summary>
            <remarks>
            virtual HRESULT STDMETHODCALLTYPE GetInputStreamInfo( 
                DWORD dwInputStreamID,
                /* [out] */ __RPC__out MFT_INPUT_STREAM_INFO *pStreamInfo) = 0;
            </remarks>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFTransform.GetOutputStreamInfo(System.Int32,NAudio.MediaFoundation.MFT_OUTPUT_STREAM_INFO@)">
            <summary>
            Gets the buffer requirements and other information for an output stream on this Media Foundation transform (MFT). 
            </summary>
            <remarks>
            virtual HRESULT STDMETHODCALLTYPE GetOutputStreamInfo( 
                DWORD dwOutputStreamID,
                /* [out] */ __RPC__out MFT_OUTPUT_STREAM_INFO *pStreamInfo) = 0;
            </remarks>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFTransform.GetAttributes(NAudio.MediaFoundation.IMFAttributes@)">
            <summary>
            Gets the global attribute store for this Media Foundation transform (MFT). 
            </summary>
            <remarks>
             virtual HRESULT STDMETHODCALLTYPE GetAttributes( 
                /* [out] */ __RPC__deref_out_opt IMFAttributes **pAttributes) = 0;
            </remarks>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFTransform.GetInputStreamAttributes(System.Int32,NAudio.MediaFoundation.IMFAttributes@)">
            <summary>
            Retrieves the attribute store for an input stream on this MFT.
            </summary>
            <remarks>
            virtual HRESULT STDMETHODCALLTYPE GetInputStreamAttributes( 
                DWORD dwInputStreamID,
                /* [out] */ __RPC__deref_out_opt IMFAttributes **pAttributes) = 0;
            </remarks>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFTransform.GetOutputStreamAttributes(System.Int32,NAudio.MediaFoundation.IMFAttributes@)">
            <summary>
            Retrieves the attribute store for an output stream on this MFT.
            </summary>
            <remarks>
            virtual HRESULT STDMETHODCALLTYPE GetOutputStreamAttributes( 
                DWORD dwOutputStreamID,
                /* [out] */ __RPC__deref_out_opt IMFAttributes **pAttributes) = 0;
            </remarks>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFTransform.DeleteInputStream(System.Int32)">
            <summary>
            Removes an input stream from this MFT.
            </summary>
            <remarks>
            virtual HRESULT STDMETHODCALLTYPE DeleteInputStream( 
                DWORD dwStreamID) = 0;
            </remarks>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFTransform.AddInputStreams(System.Int32,System.IntPtr)">
            <summary>
            Adds one or more new input streams to this MFT.
            </summary>
            <remarks>
            virtual HRESULT STDMETHODCALLTYPE AddInputStreams( 
                DWORD cStreams,
                /* [in] */ __RPC__in DWORD *adwStreamIDs) = 0;
            </remarks>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFTransform.GetInputAvailableType(System.Int32,System.Int32,NAudio.MediaFoundation.IMFMediaType@)">
            <summary>
            Gets an available media type for an input stream on this Media Foundation transform (MFT). 
            </summary>
            <remarks>
            virtual HRESULT STDMETHODCALLTYPE GetInputAvailableType( 
                DWORD dwInputStreamID,
                DWORD dwTypeIndex,
                /* [out] */ __RPC__deref_out_opt IMFMediaType **ppType) = 0;
            </remarks>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFTransform.GetOutputAvailableType(System.Int32,System.Int32,NAudio.MediaFoundation.IMFMediaType@)">
            <summary>
            Retrieves an available media type for an output stream on this MFT.
            </summary>
            <remarks>
            virtual HRESULT STDMETHODCALLTYPE GetOutputAvailableType( 
                DWORD dwOutputStreamID,
                DWORD dwTypeIndex,
                /* [out] */ __RPC__deref_out_opt IMFMediaType **ppType) = 0;
            </remarks>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFTransform.SetInputType(System.Int32,NAudio.MediaFoundation.IMFMediaType,NAudio.MediaFoundation._MFT_SET_TYPE_FLAGS)">
            <summary>
            Sets, tests, or clears the media type for an input stream on this Media Foundation transform (MFT). 
            </summary>
            <remarks>
            virtual HRESULT STDMETHODCALLTYPE SetInputType( 
                DWORD dwInputStreamID,
                /* [in] */ __RPC__in_opt IMFMediaType *pType,
                DWORD dwFlags) = 0;
            </remarks>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFTransform.SetOutputType(System.Int32,NAudio.MediaFoundation.IMFMediaType,NAudio.MediaFoundation._MFT_SET_TYPE_FLAGS)">
            <summary>
            Sets, tests, or clears the media type for an output stream on this Media Foundation transform (MFT). 
            </summary>
            <remarks>
            virtual HRESULT STDMETHODCALLTYPE SetOutputType( 
                DWORD dwOutputStreamID,
                /* [in] */ __RPC__in_opt IMFMediaType *pType,
                DWORD dwFlags) = 0;
            </remarks>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFTransform.GetInputCurrentType(System.Int32,NAudio.MediaFoundation.IMFMediaType@)">
            <summary>
            Gets the current media type for an input stream on this Media Foundation transform (MFT). 
            </summary>
            <remarks>
            virtual HRESULT STDMETHODCALLTYPE GetInputCurrentType( 
                DWORD dwInputStreamID,
                /* [out] */ __RPC__deref_out_opt IMFMediaType **ppType) = 0;
            </remarks>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFTransform.GetOutputCurrentType(System.Int32,NAudio.MediaFoundation.IMFMediaType@)">
            <summary>
            Gets the current media type for an output stream on this Media Foundation transform (MFT). 
            </summary>
            <remarks>
            virtual HRESULT STDMETHODCALLTYPE GetOutputCurrentType( 
                DWORD dwOutputStreamID,
                /* [out] */ __RPC__deref_out_opt IMFMediaType **ppType) = 0;
            </remarks>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFTransform.GetInputStatus(System.Int32,NAudio.MediaFoundation._MFT_INPUT_STATUS_FLAGS@)">
            <summary>
            Queries whether an input stream on this Media Foundation transform (MFT) can accept more data. 
            </summary>
            <remarks>
            virtual HRESULT STDMETHODCALLTYPE GetInputStatus( 
                DWORD dwInputStreamID,
                /* [out] */ __RPC__out DWORD *pdwFlags) = 0;
            </remarks>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFTransform.GetOutputStatus(System.Int32,NAudio.MediaFoundation._MFT_OUTPUT_STATUS_FLAGS@)">
            <summary>
            Queries whether the Media Foundation transform (MFT) is ready to produce output data. 
            </summary>
            <remarks>
            virtual HRESULT STDMETHODCALLTYPE GetOutputStatus( 
                /* [out] */ __RPC__out DWORD *pdwFlags) = 0;
            </remarks>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFTransform.SetOutputBounds(System.Int64,System.Int64)">
            <summary>
            Sets the range of time stamps the client needs for output. 
            </summary>
            <remarks>
            virtual HRESULT STDMETHODCALLTYPE SetOutputBounds( 
                LONGLONG hnsLowerBound,
                LONGLONG hnsUpperBound) = 0;
            </remarks>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFTransform.ProcessEvent(System.Int32,NAudio.MediaFoundation.IMFMediaEvent)">
            <summary>
            Sends an event to an input stream on this Media Foundation transform (MFT). 
            </summary>
            <remarks>
            virtual HRESULT STDMETHODCALLTYPE ProcessEvent( 
                DWORD dwInputStreamID,
                /* [in] */ __RPC__in_opt IMFMediaEvent *pEvent) = 0;
            </remarks>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFTransform.ProcessMessage(NAudio.MediaFoundation.MFT_MESSAGE_TYPE,System.IntPtr)">
            <summary>
            Sends a message to the Media Foundation transform (MFT). 
            </summary>
            <remarks>
            virtual HRESULT STDMETHODCALLTYPE ProcessMessage( 
                MFT_MESSAGE_TYPE eMessage,
                ULONG_PTR ulParam) = 0;
            </remarks>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFTransform.ProcessInput(System.Int32,NAudio.MediaFoundation.IMFSample,System.Int32)">
            <summary>
            Delivers data to an input stream on this Media Foundation transform (MFT). 
            </summary>
            <remarks>
            virtual /* [local] */ HRESULT STDMETHODCALLTYPE ProcessInput( 
                DWORD dwInputStreamID,
                IMFSample *pSample,
                DWORD dwFlags) = 0;
            </remarks>
        </member>
        <member name="M:NAudio.MediaFoundation.IMFTransform.ProcessOutput(NAudio.MediaFoundation._MFT_PROCESS_OUTPUT_FLAGS,System.Int32,NAudio.MediaFoundation.MFT_OUTPUT_DATA_BUFFER[],NAudio.MediaFoundation._MFT_PROCESS_OUTPUT_STATUS@)">
            <summary>
            Generates output from the current input data. 
            </summary>
            <remarks>
            virtual /* [local] */ HRESULT STDMETHODCALLTYPE ProcessOutput( 
                DWORD dwFlags,
                DWORD cOutputBufferCount,
                /* [size_is][out][in] */ MFT_OUTPUT_DATA_BUFFER *pOutputSamples,
                /* [out] */ DWORD *pdwStatus) = 0;
            </remarks>
        </member>
        <member name="T:NAudio.MediaFoundation.MediaEventType">
            <summary>
            See mfobjects.h
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEUnknown">
            <summary>
            Unknown event type.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEError">
            <summary>
            Signals a serious error.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEExtendedType">
            <summary>
            Custom event type.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MENonFatalError">
            <summary>
            A non-fatal error occurred during streaming.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MESessionUnknown">
            <summary>
            Session Unknown
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MESessionTopologySet">
            <summary>
            Raised after the IMFMediaSession::SetTopology method completes asynchronously
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MESessionTopologiesCleared">
            <summary>
            Raised by the Media Session when the IMFMediaSession::ClearTopologies method completes asynchronously.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MESessionStarted">
            <summary>
            Raised when the IMFMediaSession::Start method completes asynchronously.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MESessionPaused">
            <summary>
            Raised when the IMFMediaSession::Pause method completes asynchronously.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MESessionStopped">
            <summary>
            Raised when the IMFMediaSession::Stop method completes asynchronously.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MESessionClosed">
            <summary>
            Raised when the IMFMediaSession::Close method completes asynchronously.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MESessionEnded">
            <summary>
            Raised by the Media Session when it has finished playing the last presentation in the playback queue.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MESessionRateChanged">
            <summary>
            Raised by the Media Session when the playback rate changes.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MESessionScrubSampleComplete">
            <summary>
            Raised by the Media Session when it completes a scrubbing request.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MESessionCapabilitiesChanged">
            <summary>
            Raised by the Media Session when the session capabilities change.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MESessionTopologyStatus">
            <summary>
            Raised by the Media Session when the status of a topology changes.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MESessionNotifyPresentationTime">
            <summary>
            Raised by the Media Session when a new presentation starts.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MENewPresentation">
            <summary>
            Raised by a media source a new presentation is ready.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MELicenseAcquisitionStart">
            <summary>
            License acquisition is about to begin.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MELicenseAcquisitionCompleted">
            <summary>
            License acquisition is complete.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEIndividualizationStart">
            <summary>
            Individualization is about to begin.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEIndividualizationCompleted">
            <summary>
            Individualization is complete.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEEnablerProgress">
            <summary>
            Signals the progress of a content enabler object.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEEnablerCompleted">
            <summary>
            A content enabler object's action is complete.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEPolicyError">
            <summary>
            Raised by a trusted output if an error occurs while enforcing the output policy.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEPolicyReport">
            <summary>
            Contains status information about the enforcement of an output policy.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEBufferingStarted">
            <summary>
            A media source started to buffer data.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEBufferingStopped">
            <summary>
            A media source stopped buffering data.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEConnectStart">
            <summary>
            The network source started opening a URL.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEConnectEnd">
            <summary>
            The network source finished opening a URL.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEReconnectStart">
            <summary>
            Raised by a media source at the start of a reconnection attempt.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEReconnectEnd">
            <summary>
            Raised by a media source at the end of a reconnection attempt.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MERendererEvent">
            <summary>
            Raised by the enhanced video renderer (EVR) when it receives a user event from the presenter.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MESessionStreamSinkFormatChanged">
            <summary>
            Raised by the Media Session when the format changes on a media sink.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MESourceUnknown">
            <summary>
            Source Unknown
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MESourceStarted">
            <summary>
            Raised when a media source starts without seeking.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEStreamStarted">
            <summary>
            Raised by a media stream when the source starts without seeking.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MESourceSeeked">
            <summary>
            Raised when a media source seeks to a new position.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEStreamSeeked">
            <summary>
            Raised by a media stream after a call to IMFMediaSource::Start causes a seek in the stream.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MENewStream">
            <summary>
            Raised by a media source when it starts a new stream.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEUpdatedStream">
            <summary>
            Raised by a media source when it restarts or seeks a stream that is already active.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MESourceStopped">
            <summary>
            Raised by a media source when the IMFMediaSource::Stop method completes asynchronously.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEStreamStopped">
            <summary>
            Raised by a media stream when the IMFMediaSource::Stop method completes asynchronously.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MESourcePaused">
            <summary>
            Raised by a media source when the IMFMediaSource::Pause method completes asynchronously.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEStreamPaused">
            <summary>
            Raised by a media stream when the IMFMediaSource::Pause method completes asynchronously.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEEndOfPresentation">
            <summary>
            Raised by a media source when a presentation ends.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEEndOfStream">
            <summary>
            Raised by a media stream when the stream ends.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEMediaSample">
            <summary>
            Raised when a media stream delivers a new sample.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEStreamTick">
            <summary>
            Signals that a media stream does not have data available at a specified time.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEStreamThinMode">
            <summary>
            Raised by a media stream when it starts or stops thinning the stream.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEStreamFormatChanged">
            <summary>
            Raised by a media stream when the media type of the stream changes.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MESourceRateChanged">
            <summary>
            Raised by a media source when the playback rate changes.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEEndOfPresentationSegment">
            <summary>
            Raised by the sequencer source when a segment is completed and is followed by another segment.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MESourceCharacteristicsChanged">
            <summary>
            Raised by a media source when the source's characteristics change.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MESourceRateChangeRequested">
            <summary>
            Raised by a media source to request a new playback rate.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MESourceMetadataChanged">
            <summary>
            Raised by a media source when it updates its metadata.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MESequencerSourceTopologyUpdated">
            <summary>
            Raised by the sequencer source when the IMFSequencerSource::UpdateTopology method completes asynchronously.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MESinkUnknown">
            <summary>
            Sink Unknown
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEStreamSinkStarted">
            <summary>
            Raised by a stream sink when it completes the transition to the running state.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEStreamSinkStopped">
            <summary>
            Raised by a stream sink when it completes the transition to the stopped state.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEStreamSinkPaused">
            <summary>
            Raised by a stream sink when it completes the transition to the paused state.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEStreamSinkRateChanged">
            <summary>
            Raised by a stream sink when the rate has changed.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEStreamSinkRequestSample">
            <summary>
            Raised by a stream sink to request a new media sample from the pipeline.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEStreamSinkMarker">
            <summary>
            Raised by a stream sink after the IMFStreamSink::PlaceMarker method is called.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEStreamSinkPrerolled">
            <summary>
            Raised by a stream sink when the stream has received enough preroll data to begin rendering.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEStreamSinkScrubSampleComplete">
            <summary>
            Raised by a stream sink when it completes a scrubbing request.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEStreamSinkFormatChanged">
            <summary>
            Raised by a stream sink when the sink's media type is no longer valid.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEStreamSinkDeviceChanged">
            <summary>
            Raised by the stream sinks of the EVR if the video device changes.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEQualityNotify">
            <summary>
            Provides feedback about playback quality to the quality manager.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MESinkInvalidated">
            <summary>
            Raised when a media sink becomes invalid.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEAudioSessionNameChanged">
            <summary>
            The audio session display name changed.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEAudioSessionVolumeChanged">
            <summary>
            The volume or mute state of the audio session changed
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEAudioSessionDeviceRemoved">
            <summary>
            The audio device was removed.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEAudioSessionServerShutdown">
            <summary>
            The Windows audio server system was shut down.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEAudioSessionGroupingParamChanged">
            <summary>
            The grouping parameters changed for the audio session.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEAudioSessionIconChanged">
            <summary>
            The audio session icon changed.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEAudioSessionFormatChanged">
            <summary>
            The default audio format for the audio device changed.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEAudioSessionDisconnected">
            <summary>
            The audio session was disconnected from a Windows Terminal Services session
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEAudioSessionExclusiveModeOverride">
            <summary>
            The audio session was preempted by an exclusive-mode connection.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.METrustUnknown">
            <summary>
            Trust Unknown
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEPolicyChanged">
            <summary>
            The output policy for a stream changed.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEContentProtectionMessage">
            <summary>
            Content protection message
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEPolicySet">
            <summary>
            The IMFOutputTrustAuthority::SetPolicy method completed.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEWMDRMLicenseBackupCompleted">
            <summary>
            DRM License Backup Completed
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEWMDRMLicenseBackupProgress">
            <summary>
            DRM License Backup Progress
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEWMDRMLicenseRestoreCompleted">
            <summary>
            DRM License Restore Completed
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEWMDRMLicenseRestoreProgress">
            <summary>
            DRM License Restore Progress
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEWMDRMLicenseAcquisitionCompleted">
            <summary>
            DRM License Acquisition Completed
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEWMDRMIndividualizationCompleted">
            <summary>
            DRM Individualization Completed
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEWMDRMIndividualizationProgress">
            <summary>
            DRM Individualization Progress
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEWMDRMProximityCompleted">
            <summary>
            DRM Proximity Completed
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEWMDRMLicenseStoreCleaned">
            <summary>
            DRM License Store Cleaned
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.MEWMDRMRevocationDownloadCompleted">
            <summary>
            DRM Revocation Download Completed
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.METransformUnknown">
            <summary>
            Transform Unknown
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.METransformNeedInput">
            <summary>
            Sent by an asynchronous MFT to request a new input sample.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.METransformHaveOutput">
            <summary>
            Sent by an asynchronous MFT when new output data is available from the MFT.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.METransformDrainComplete">
            <summary>
            Sent by an asynchronous Media Foundation transform (MFT) when a drain operation is complete.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaEventType.METransformMarker">
            <summary>
            Sent by an asynchronous MFT in response to an MFT_MESSAGE_COMMAND_MARKER message.
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.MediaFoundationAttributes">
            <summary>
            Media Foundation attribute guids
            http://msdn.microsoft.com/en-us/library/windows/desktop/ms696989%28v=vs.85%29.aspx
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_TRANSFORM_ASYNC">
            <summary>
            Specifies whether an MFT performs asynchronous processing.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_TRANSFORM_ASYNC_UNLOCK">
            <summary>
            Enables the use of an asynchronous MFT.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_TRANSFORM_FLAGS_Attribute">
            <summary>
            Contains flags for an MFT activation object.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_TRANSFORM_CATEGORY_Attribute">
            <summary>
            Specifies the category for an MFT.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MFT_TRANSFORM_CLSID_Attribute">
            <summary>
            Contains the class identifier (CLSID) of an MFT.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_TRANSCODE_CONTAINERTYPE">
            <summary>
            Specifies the container type of an encoded file. The container types are supported by Media Foundation.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MFT_INPUT_TYPES_Attributes">
            <summary>
            Contains the registered input types for a Media Foundation transform (MFT).
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MFT_OUTPUT_TYPES_Attributes">
            <summary>
            Contains the registered output types for a Media Foundation transform (MFT).
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MFT_ENUM_HARDWARE_URL_Attribute">
            <summary>
            Contains the symbolic link for a hardware-based MFT.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MFT_FRIENDLY_NAME_Attribute">
            <summary>
            Contains the display name for a hardware-based MFT.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MFT_CONNECTED_STREAM_ATTRIBUTE">
            <summary>
            Contains a pointer to the stream attributes of the connected stream on a hardware-based MFT.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MFT_CONNECTED_TO_HW_STREAM">
            <summary>
            Specifies whether a hardware-based MFT is connected to another hardware-based MFT.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MFT_PREFERRED_OUTPUTTYPE_Attribute">
            <summary>
            Specifies the preferred output format for an encoder.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MFT_PROCESS_LOCAL_Attribute">
            <summary>
            Specifies whether an MFT is registered only in the application's process.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MFT_PREFERRED_ENCODER_PROFILE">
            <summary>
            Contains configuration properties for an encoder.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MFT_HW_TIMESTAMP_WITH_QPC_Attribute">
            <summary>
            Specifies whether a hardware device source uses the system time for time stamps.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MFT_FIELDOFUSE_UNLOCK_Attribute">
            <summary>
            Contains an IMFFieldOfUseMFTUnlock pointer, which can be used to unlock the MFT.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MFT_CODEC_MERIT_Attribute">
            <summary>
            Contains the merit value of a hardware codec.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MFT_ENUM_TRANSCODE_ONLY_ATTRIBUTE">
            <summary>
            Specifies whether a decoder is optimized for transcoding rather than for playback.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_PD_PMPHOST_CONTEXT">
            <summary>
            Contains a pointer to the proxy object for the application's presentation descriptor.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_PD_APP_CONTEXT">
            <summary>
            Contains a pointer to the presentation descriptor from the protected media path (PMP).
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_PD_DURATION">
            <summary>
            Specifies the duration of a presentation, in 100-nanosecond units.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_PD_TOTAL_FILE_SIZE">
            <summary>
            Specifies the total size of the source file, in bytes. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_PD_AUDIO_ENCODING_BITRATE">
            <summary>
            Specifies the audio encoding bit rate for the presentation, in bits per second.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_PD_VIDEO_ENCODING_BITRATE">
            <summary>
            Specifies the video encoding bit rate for the presentation, in bits per second.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_PD_MIME_TYPE">
            <summary>
            Specifies the MIME type of the content.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_PD_LAST_MODIFIED_TIME">
            <summary>
            Specifies when a presentation was last modified.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_PD_PLAYBACK_ELEMENT_ID">
            <summary>
            The identifier of the playlist element in the presentation.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_PD_PREFERRED_LANGUAGE">
            <summary>
            Contains the preferred RFC 1766 language of the media source.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_PD_PLAYBACK_BOUNDARY_TIME">
            <summary>
            The time at which the presentation must begin, relative to the start of the media source.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_PD_AUDIO_ISVARIABLEBITRATE">
            <summary>
            Specifies whether the audio streams in the presentation have a variable bit rate.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_MT_MAJOR_TYPE">
            <summary>
            Media type Major Type
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_MT_SUBTYPE">
            <summary>
            Media Type subtype
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_MT_AUDIO_BLOCK_ALIGNMENT">
            <summary>
            Audio block alignment
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_MT_AUDIO_AVG_BYTES_PER_SECOND">
            <summary>
            Audio average bytes per second
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_MT_AUDIO_NUM_CHANNELS">
            <summary>
            Audio number of channels
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_MT_AUDIO_SAMPLES_PER_SECOND">
            <summary>
            Audio samples per second
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_MT_AUDIO_BITS_PER_SAMPLE">
            <summary>
            Audio bits per sample
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_READWRITE_ENABLE_HARDWARE_TRANSFORMS">
            <summary>
            Enables the source reader or sink writer to use hardware-based Media Foundation transforms (MFTs).
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_SINK_WRITER_DISABLE_THROTTLING">
            <summary>
            Specifies whether the sink writer limits the rate of incoming data.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_MT_USER_DATA">
            <summary>
            Contains additional format data for a media type. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_MT_ALL_SAMPLES_INDEPENDENT">
            <summary>
            Specifies for a media type whether each sample is independent of the other samples in the stream. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_MT_FIXED_SIZE_SAMPLES">
            <summary>
            Specifies for a media type whether the samples have a fixed size. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_MT_AM_FORMAT_TYPE">
            <summary>
            Contains a DirectShow format GUID for a media type. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_MT_AUDIO_PREFER_WAVEFORMATEX">
            <summary>
            Specifies the preferred legacy format structure to use when converting an audio media type. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_MT_COMPRESSED">
            <summary>
            Specifies for a media type whether the media data is compressed. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_MT_AVG_BITRATE">
            <summary>
            Approximate data rate of the video stream, in bits per second, for a video media type. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_MT_AAC_PAYLOAD_TYPE">
            <summary>
            Specifies the payload type of an Advanced Audio Coding (AAC) stream.
            0 - The stream contains raw_data_block elements only
            1 - Audio Data Transport Stream (ADTS). The stream contains an adts_sequence, as defined by MPEG-2.
            2 - Audio Data Interchange Format (ADIF). The stream contains an adif_sequence, as defined by MPEG-2.
            3 - The stream contains an MPEG-4 audio transport stream with a synchronization layer (LOAS) and a multiplex layer (LATM).
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationAttributes.MF_MT_AAC_AUDIO_PROFILE_LEVEL_INDICATION">
            <summary>
            Specifies the audio profile and level of an Advanced Audio Coding (AAC) stream, as defined by ISO/IEC 14496-3.
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.MediaFoundationErrors">
            <summary>
            Media Foundation Errors
            
            </summary>
            <remarks>
             RANGES
             14000 - 14999 = General Media Foundation errors
             15000 - 15999 = ASF parsing errors
             16000 - 16999 = Media Source errors
             17000 - 17999 = MEDIAFOUNDATION Network Error Events
             18000 - 18999 = MEDIAFOUNDATION WMContainer Error Events
             19000 - 19999 = MEDIAFOUNDATION Media Sink Error Events
             20000 - 20999 = Renderer errors
             21000 - 21999 = Topology Errors
             25000 - 25999 = Timeline Errors
             26000 - 26999 = Unused
             28000 - 28999 = Transform errors
             29000 - 29999 = Content Protection errors
             40000 - 40999 = Clock errors
             41000 - 41999 = MF Quality Management Errors
             42000 - 42999 = MF Transcode API Errors
            </remarks>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_PLATFORM_NOT_INITIALIZED">
            
             MessageId: MF_E_PLATFORM_NOT_INITIALIZED
            
             MessageText:
            
             Platform not initialized. Please call MFStartup().%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_BUFFERTOOSMALL">
            
             MessageId: MF_E_BUFFERTOOSMALL
            
             MessageText:
            
             The buffer was too small to carry out the requested action.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_INVALIDREQUEST">
            
             MessageId: MF_E_INVALIDREQUEST
            
             MessageText:
            
             The request is invalid in the current state.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_INVALIDSTREAMNUMBER">
            
             MessageId: MF_E_INVALIDSTREAMNUMBER
            
             MessageText:
            
             The stream number provided was invalid.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_INVALIDMEDIATYPE">
            
             MessageId: MF_E_INVALIDMEDIATYPE
            
             MessageText:
            
             The data specified for the media type is invalid, inconsistent, or not supported by this object.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NOTACCEPTING">
            
             MessageId: MF_E_NOTACCEPTING
            
             MessageText:
            
             The callee is currently not accepting further input.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NOT_INITIALIZED">
            
             MessageId: MF_E_NOT_INITIALIZED
            
             MessageText:
            
             This object needs to be initialized before the requested operation can be carried out.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_UNSUPPORTED_REPRESENTATION">
            
             MessageId: MF_E_UNSUPPORTED_REPRESENTATION
            
             MessageText:
            
             The requested representation is not supported by this object.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NO_MORE_TYPES">
            
             MessageId: MF_E_NO_MORE_TYPES
            
             MessageText:
            
             An object ran out of media types to suggest therefore the requested chain of streaming objects cannot be completed.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_UNSUPPORTED_SERVICE">
            
             MessageId: MF_E_UNSUPPORTED_SERVICE
            
             MessageText:
            
             The object does not support the specified service.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_UNEXPECTED">
            
             MessageId: MF_E_UNEXPECTED
            
             MessageText:
            
             An unexpected error has occurred in the operation requested.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_INVALIDNAME">
            
             MessageId: MF_E_INVALIDNAME
            
             MessageText:
            
             Invalid name.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_INVALIDTYPE">
            
             MessageId: MF_E_INVALIDTYPE
            
             MessageText:
            
             Invalid type.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_INVALID_FILE_FORMAT">
            
             MessageId: MF_E_INVALID_FILE_FORMAT
            
             MessageText:
            
             The file does not conform to the relevant file format specification.
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_INVALIDINDEX">
            
             MessageId: MF_E_INVALIDINDEX
            
             MessageText:
            
             Invalid index.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_INVALID_TIMESTAMP">
            
             MessageId: MF_E_INVALID_TIMESTAMP
            
             MessageText:
            
             An invalid timestamp was given.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_UNSUPPORTED_SCHEME">
            
             MessageId: MF_E_UNSUPPORTED_SCHEME
            
             MessageText:
            
             The scheme of the given URL is unsupported.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_UNSUPPORTED_BYTESTREAM_TYPE">
            
             MessageId: MF_E_UNSUPPORTED_BYTESTREAM_TYPE
            
             MessageText:
            
             The byte stream type of the given URL is unsupported.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_UNSUPPORTED_TIME_FORMAT">
            
             MessageId: MF_E_UNSUPPORTED_TIME_FORMAT
            
             MessageText:
            
             The given time format is unsupported.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NO_SAMPLE_TIMESTAMP">
            
             MessageId: MF_E_NO_SAMPLE_TIMESTAMP
            
             MessageText:
            
             The Media Sample does not have a timestamp.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NO_SAMPLE_DURATION">
            
             MessageId: MF_E_NO_SAMPLE_DURATION
            
             MessageText:
            
             The Media Sample does not have a duration.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_INVALID_STREAM_DATA">
            
             MessageId: MF_E_INVALID_STREAM_DATA
            
             MessageText:
            
             The request failed because the data in the stream is corrupt.%0\n.
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_RT_UNAVAILABLE">
            
             MessageId: MF_E_RT_UNAVAILABLE
            
             MessageText:
            
             Real time services are not available.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_UNSUPPORTED_RATE">
            
             MessageId: MF_E_UNSUPPORTED_RATE
            
             MessageText:
            
             The specified rate is not supported.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_THINNING_UNSUPPORTED">
            
             MessageId: MF_E_THINNING_UNSUPPORTED
            
             MessageText:
            
             This component does not support stream-thinning.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_REVERSE_UNSUPPORTED">
            
             MessageId: MF_E_REVERSE_UNSUPPORTED
            
             MessageText:
            
             The call failed because no reverse playback rates are available.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_UNSUPPORTED_RATE_TRANSITION">
            
             MessageId: MF_E_UNSUPPORTED_RATE_TRANSITION
            
             MessageText:
            
             The requested rate transition cannot occur in the current state.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_RATE_CHANGE_PREEMPTED">
            
             MessageId: MF_E_RATE_CHANGE_PREEMPTED
            
             MessageText:
            
             The requested rate change has been pre-empted and will not occur.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NOT_FOUND">
            
             MessageId: MF_E_NOT_FOUND
            
             MessageText:
            
             The specified object or value does not exist.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NOT_AVAILABLE">
            
             MessageId: MF_E_NOT_AVAILABLE
            
             MessageText:
            
             The requested value is not available.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NO_CLOCK">
            
             MessageId: MF_E_NO_CLOCK
            
             MessageText:
            
             The specified operation requires a clock and no clock is available.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_S_MULTIPLE_BEGIN">
            
             MessageId: MF_S_MULTIPLE_BEGIN
            
             MessageText:
            
             This callback and state had already been passed in to this event generator earlier.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_MULTIPLE_BEGIN">
            
             MessageId: MF_E_MULTIPLE_BEGIN
            
             MessageText:
            
             This callback has already been passed in to this event generator.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_MULTIPLE_SUBSCRIBERS">
            
             MessageId: MF_E_MULTIPLE_SUBSCRIBERS
            
             MessageText:
            
             Some component is already listening to events on this event generator.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TIMER_ORPHANED">
            
             MessageId: MF_E_TIMER_ORPHANED
            
             MessageText:
            
             This timer was orphaned before its callback time arrived.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_STATE_TRANSITION_PENDING">
            
             MessageId: MF_E_STATE_TRANSITION_PENDING
            
             MessageText:
            
             A state transition is already pending.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_UNSUPPORTED_STATE_TRANSITION">
            
             MessageId: MF_E_UNSUPPORTED_STATE_TRANSITION
            
             MessageText:
            
             The requested state transition is unsupported.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_UNRECOVERABLE_ERROR_OCCURRED">
            
             MessageId: MF_E_UNRECOVERABLE_ERROR_OCCURRED
            
             MessageText:
            
             An unrecoverable error has occurred.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_SAMPLE_HAS_TOO_MANY_BUFFERS">
            
             MessageId: MF_E_SAMPLE_HAS_TOO_MANY_BUFFERS
            
             MessageText:
            
             The provided sample has too many buffers.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_SAMPLE_NOT_WRITABLE">
            
             MessageId: MF_E_SAMPLE_NOT_WRITABLE
            
             MessageText:
            
             The provided sample is not writable.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_INVALID_KEY">
            
             MessageId: MF_E_INVALID_KEY
            
             MessageText:
            
             The specified key is not valid.
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_BAD_STARTUP_VERSION">
            
             MessageId: MF_E_BAD_STARTUP_VERSION
            
             MessageText:
            
             You are calling MFStartup with the wrong MF_VERSION. Mismatched bits?
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_UNSUPPORTED_CAPTION">
            
             MessageId: MF_E_UNSUPPORTED_CAPTION
            
             MessageText:
            
             The caption of the given URL is unsupported.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_INVALID_POSITION">
            
             MessageId: MF_E_INVALID_POSITION
            
             MessageText:
            
             The operation on the current offset is not permitted.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_ATTRIBUTENOTFOUND">
            
             MessageId: MF_E_ATTRIBUTENOTFOUND
            
             MessageText:
            
             The requested attribute was not found.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_PROPERTY_TYPE_NOT_ALLOWED">
            
             MessageId: MF_E_PROPERTY_TYPE_NOT_ALLOWED
            
             MessageText:
            
             The specified property type is not allowed in this context.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_PROPERTY_TYPE_NOT_SUPPORTED">
            
             MessageId: MF_E_PROPERTY_TYPE_NOT_SUPPORTED
            
             MessageText:
            
             The specified property type is not supported.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_PROPERTY_EMPTY">
            
             MessageId: MF_E_PROPERTY_EMPTY
            
             MessageText:
            
             The specified property is empty.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_PROPERTY_NOT_EMPTY">
            
             MessageId: MF_E_PROPERTY_NOT_EMPTY
            
             MessageText:
            
             The specified property is not empty.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_PROPERTY_VECTOR_NOT_ALLOWED">
            
             MessageId: MF_E_PROPERTY_VECTOR_NOT_ALLOWED
            
             MessageText:
            
             The vector property specified is not allowed in this context.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_PROPERTY_VECTOR_REQUIRED">
            
             MessageId: MF_E_PROPERTY_VECTOR_REQUIRED
            
             MessageText:
            
             A vector property is required in this context.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_OPERATION_CANCELLED">
            
             MessageId: MF_E_OPERATION_CANCELLED
            
             MessageText:
            
             The operation is cancelled.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_BYTESTREAM_NOT_SEEKABLE">
            
             MessageId: MF_E_BYTESTREAM_NOT_SEEKABLE
            
             MessageText:
            
             The provided bytestream was expected to be seekable and it is not.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_DISABLED_IN_SAFEMODE">
            
             MessageId: MF_E_DISABLED_IN_SAFEMODE
            
             MessageText:
            
             The Media Foundation platform is disabled when the system is running in Safe Mode.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_CANNOT_PARSE_BYTESTREAM">
            
             MessageId: MF_E_CANNOT_PARSE_BYTESTREAM
            
             MessageText:
            
             The Media Source could not parse the byte stream.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_SOURCERESOLVER_MUTUALLY_EXCLUSIVE_FLAGS">
            
             MessageId: MF_E_SOURCERESOLVER_MUTUALLY_EXCLUSIVE_FLAGS
            
             MessageText:
            
             Mutually exclusive flags have been specified to source resolver. This flag combination is invalid.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_MEDIAPROC_WRONGSTATE">
            
             MessageId: MF_E_MEDIAPROC_WRONGSTATE
            
             MessageText:
            
             MediaProc is in the wrong state%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_RT_THROUGHPUT_NOT_AVAILABLE">
            
             MessageId: MF_E_RT_THROUGHPUT_NOT_AVAILABLE
            
             MessageText:
            
             Real time I/O service can not provide requested throughput.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_RT_TOO_MANY_CLASSES">
            
             MessageId: MF_E_RT_TOO_MANY_CLASSES
            
             MessageText:
            
             The workqueue cannot be registered with more classes.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_RT_WOULDBLOCK">
            
             MessageId: MF_E_RT_WOULDBLOCK
            
             MessageText:
            
             This operation cannot succeed because another thread owns this object.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NO_BITPUMP">
            
             MessageId: MF_E_NO_BITPUMP
            
             MessageText:
            
             Internal. Bitpump not found.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_RT_OUTOFMEMORY">
            
             MessageId: MF_E_RT_OUTOFMEMORY
            
             MessageText:
            
             No more RT memory available.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_RT_WORKQUEUE_CLASS_NOT_SPECIFIED">
            
             MessageId: MF_E_RT_WORKQUEUE_CLASS_NOT_SPECIFIED
            
             MessageText:
            
             An MMCSS class has not been set for this work queue.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_INSUFFICIENT_BUFFER">
            
             MessageId: MF_E_INSUFFICIENT_BUFFER
            
             MessageText:
            
             Insufficient memory for response.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_CANNOT_CREATE_SINK">
            
             MessageId: MF_E_CANNOT_CREATE_SINK
            
             MessageText:
            
             Activate failed to create mediasink. Call OutputNode::GetUINT32(MF_TOPONODE_MAJORTYPE) for more information. %0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_BYTESTREAM_UNKNOWN_LENGTH">
            
             MessageId: MF_E_BYTESTREAM_UNKNOWN_LENGTH
            
             MessageText:
            
             The length of the provided bytestream is unknown.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_SESSION_PAUSEWHILESTOPPED">
            
             MessageId: MF_E_SESSION_PAUSEWHILESTOPPED
            
             MessageText:
            
             The media session cannot pause from a stopped state.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_S_ACTIVATE_REPLACED">
            
             MessageId: MF_S_ACTIVATE_REPLACED
            
             MessageText:
            
             The activate could not be created in the remote process for some reason it was replaced with empty one.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_FORMAT_CHANGE_NOT_SUPPORTED">
            
             MessageId: MF_E_FORMAT_CHANGE_NOT_SUPPORTED
            
             MessageText:
            
             The data specified for the media type is supported, but would require a format change, which is not supported by this object.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_INVALID_WORKQUEUE">
            
             MessageId: MF_E_INVALID_WORKQUEUE
            
             MessageText:
            
             The operation failed because an invalid combination of workqueue ID and flags was specified.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_DRM_UNSUPPORTED">
            
             MessageId: MF_E_DRM_UNSUPPORTED
            
             MessageText:
            
             No DRM support is available.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_UNAUTHORIZED">
            
             MessageId: MF_E_UNAUTHORIZED
            
             MessageText:
            
             This operation is not authorized.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_OUT_OF_RANGE">
            
             MessageId: MF_E_OUT_OF_RANGE
            
             MessageText:
            
             The value is not in the specified or valid range.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_INVALID_CODEC_MERIT">
            
             MessageId: MF_E_INVALID_CODEC_MERIT
            
             MessageText:
            
             The registered codec merit is not valid.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_HW_MFT_FAILED_START_STREAMING">
            
             MessageId: MF_E_HW_MFT_FAILED_START_STREAMING
            
             MessageText:
            
             Hardware MFT failed to start streaming due to lack of hardware resources.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_S_ASF_PARSEINPROGRESS">
            
             MessageId: MF_S_ASF_PARSEINPROGRESS
            
             MessageText:
            
             Parsing is still in progress and is not yet complete.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_ASF_PARSINGINCOMPLETE">
            
             MessageId: MF_E_ASF_PARSINGINCOMPLETE
            
             MessageText:
            
             Not enough data have been parsed to carry out the requested action.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_ASF_MISSINGDATA">
            
             MessageId: MF_E_ASF_MISSINGDATA
            
             MessageText:
            
             There is a gap in the ASF data provided.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_ASF_INVALIDDATA">
            
             MessageId: MF_E_ASF_INVALIDDATA
            
             MessageText:
            
             The data provided are not valid ASF.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_ASF_OPAQUEPACKET">
            
             MessageId: MF_E_ASF_OPAQUEPACKET
            
             MessageText:
            
             The packet is opaque, so the requested information cannot be returned.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_ASF_NOINDEX">
            
             MessageId: MF_E_ASF_NOINDEX
            
             MessageText:
            
             The requested operation failed since there is no appropriate ASF index.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_ASF_OUTOFRANGE">
            
             MessageId: MF_E_ASF_OUTOFRANGE
            
             MessageText:
            
             The value supplied is out of range for this operation.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_ASF_INDEXNOTLOADED">
            
             MessageId: MF_E_ASF_INDEXNOTLOADED
            
             MessageText:
            
             The index entry requested needs to be loaded before it can be available.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_ASF_TOO_MANY_PAYLOADS">
            
             MessageId: MF_E_ASF_TOO_MANY_PAYLOADS
            
             MessageText:
            
             The packet has reached the maximum number of payloads.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_ASF_UNSUPPORTED_STREAM_TYPE">
            
             MessageId: MF_E_ASF_UNSUPPORTED_STREAM_TYPE
            
             MessageText:
            
             Stream type is not supported.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_ASF_DROPPED_PACKET">
            
             MessageId: MF_E_ASF_DROPPED_PACKET
            
             MessageText:
            
             One or more ASF packets were dropped.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NO_EVENTS_AVAILABLE">
            
             MessageId: MF_E_NO_EVENTS_AVAILABLE
            
             MessageText:
            
             There are no events available in the queue.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_INVALID_STATE_TRANSITION">
            
             MessageId: MF_E_INVALID_STATE_TRANSITION
            
             MessageText:
            
             A media source cannot go from the stopped state to the paused state.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_END_OF_STREAM">
            
             MessageId: MF_E_END_OF_STREAM
            
             MessageText:
            
             The media stream cannot process any more samples because there are no more samples in the stream.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_SHUTDOWN">
            
             MessageId: MF_E_SHUTDOWN
            
             MessageText:
            
             The request is invalid because Shutdown() has been called.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_MP3_NOTFOUND">
            
             MessageId: MF_E_MP3_NOTFOUND
            
             MessageText:
            
             The MP3 object was not found.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_MP3_OUTOFDATA">
            
             MessageId: MF_E_MP3_OUTOFDATA
            
             MessageText:
            
             The MP3 parser ran out of data before finding the MP3 object.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_MP3_NOTMP3">
            
             MessageId: MF_E_MP3_NOTMP3
            
             MessageText:
            
             The file is not really a MP3 file.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_MP3_NOTSUPPORTED">
            
             MessageId: MF_E_MP3_NOTSUPPORTED
            
             MessageText:
            
             The MP3 file is not supported.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NO_DURATION">
            
             MessageId: MF_E_NO_DURATION
            
             MessageText:
            
             The Media stream has no duration.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_INVALID_FORMAT">
            
             MessageId: MF_E_INVALID_FORMAT
            
             MessageText:
            
             The Media format is recognized but is invalid.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_PROPERTY_NOT_FOUND">
            
             MessageId: MF_E_PROPERTY_NOT_FOUND
            
             MessageText:
            
             The property requested was not found.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_PROPERTY_READ_ONLY">
            
             MessageId: MF_E_PROPERTY_READ_ONLY
            
             MessageText:
            
             The property is read only.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_PROPERTY_NOT_ALLOWED">
            
             MessageId: MF_E_PROPERTY_NOT_ALLOWED
            
             MessageText:
            
             The specified property is not allowed in this context.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_MEDIA_SOURCE_NOT_STARTED">
            
             MessageId: MF_E_MEDIA_SOURCE_NOT_STARTED
            
             MessageText:
            
             The media source is not started.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_UNSUPPORTED_FORMAT">
            
             MessageId: MF_E_UNSUPPORTED_FORMAT
            
             MessageText:
            
             The Media format is recognized but not supported.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_MP3_BAD_CRC">
            
             MessageId: MF_E_MP3_BAD_CRC
            
             MessageText:
            
             The MPEG frame has bad CRC.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NOT_PROTECTED">
            
             MessageId: MF_E_NOT_PROTECTED
            
             MessageText:
            
             The file is not protected.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_MEDIA_SOURCE_WRONGSTATE">
            
             MessageId: MF_E_MEDIA_SOURCE_WRONGSTATE
            
             MessageText:
            
             The media source is in the wrong state%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_MEDIA_SOURCE_NO_STREAMS_SELECTED">
            
             MessageId: MF_E_MEDIA_SOURCE_NO_STREAMS_SELECTED
            
             MessageText:
            
             No streams are selected in source presentation descriptor.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_CANNOT_FIND_KEYFRAME_SAMPLE">
            
             MessageId: MF_E_CANNOT_FIND_KEYFRAME_SAMPLE
            
             MessageText:
            
             No key frame sample was found.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NETWORK_RESOURCE_FAILURE">
            
             MessageId: MF_E_NETWORK_RESOURCE_FAILURE
            
             MessageText:
            
             An attempt to acquire a network resource failed.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_WRITE">
            
             MessageId: MF_E_NET_WRITE
            
             MessageText:
            
             Error writing to the network.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_READ">
            
             MessageId: MF_E_NET_READ
            
             MessageText:
            
             Error reading from the network.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_REQUIRE_NETWORK">
            
             MessageId: MF_E_NET_REQUIRE_NETWORK
            
             MessageText:
            
             Internal. Entry cannot complete operation without network.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_REQUIRE_ASYNC">
            
             MessageId: MF_E_NET_REQUIRE_ASYNC
            
             MessageText:
            
             Internal. Async op is required.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_BWLEVEL_NOT_SUPPORTED">
            
             MessageId: MF_E_NET_BWLEVEL_NOT_SUPPORTED
            
             MessageText:
            
             Internal. Bandwidth levels are not supported.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_STREAMGROUPS_NOT_SUPPORTED">
            
             MessageId: MF_E_NET_STREAMGROUPS_NOT_SUPPORTED
            
             MessageText:
            
             Internal. Stream groups are not supported.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_MANUALSS_NOT_SUPPORTED">
            
             MessageId: MF_E_NET_MANUALSS_NOT_SUPPORTED
            
             MessageText:
            
             Manual stream selection is not supported.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_INVALID_PRESENTATION_DESCRIPTOR">
            
             MessageId: MF_E_NET_INVALID_PRESENTATION_DESCRIPTOR
            
             MessageText:
            
             Invalid presentation descriptor.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_CACHESTREAM_NOT_FOUND">
            
             MessageId: MF_E_NET_CACHESTREAM_NOT_FOUND
            
             MessageText:
            
             Cannot find cache stream.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_I_MANUAL_PROXY">
            
             MessageId: MF_I_MANUAL_PROXY
            
             MessageText:
            
             The proxy setting is manual.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_REQUIRE_INPUT">
            duplicate removed
            MessageId=17011 Severity=Informational Facility=MEDIAFOUNDATION SymbolicName=MF_E_INVALID_REQUEST
            Language=English
            The request is invalid in the current state.%0
            .
            
             MessageId: MF_E_NET_REQUIRE_INPUT
            
             MessageText:
            
             Internal. Entry cannot complete operation without input.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_REDIRECT">
            
             MessageId: MF_E_NET_REDIRECT
            
             MessageText:
            
             The client redirected to another server.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_REDIRECT_TO_PROXY">
            
             MessageId: MF_E_NET_REDIRECT_TO_PROXY
            
             MessageText:
            
             The client is redirected to a proxy server.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_TOO_MANY_REDIRECTS">
            
             MessageId: MF_E_NET_TOO_MANY_REDIRECTS
            
             MessageText:
            
             The client reached maximum redirection limit.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_TIMEOUT">
            
             MessageId: MF_E_NET_TIMEOUT
            
             MessageText:
            
             The server, a computer set up to offer multimedia content to other computers, could not handle your request for multimedia content in a timely manner.  Please try again later.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_CLIENT_CLOSE">
            
             MessageId: MF_E_NET_CLIENT_CLOSE
            
             MessageText:
            
             The control socket is closed by the client.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_BAD_CONTROL_DATA">
            
             MessageId: MF_E_NET_BAD_CONTROL_DATA
            
             MessageText:
            
             The server received invalid data from the client on the control connection.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_INCOMPATIBLE_SERVER">
            
             MessageId: MF_E_NET_INCOMPATIBLE_SERVER
            
             MessageText:
            
             The server is not a compatible streaming media server.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_UNSAFE_URL">
            
             MessageId: MF_E_NET_UNSAFE_URL
            
             MessageText:
            
             Url.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_CACHE_NO_DATA">
            
             MessageId: MF_E_NET_CACHE_NO_DATA
            
             MessageText:
            
             Data is not available.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_EOL">
            
             MessageId: MF_E_NET_EOL
            
             MessageText:
            
             End of line.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_BAD_REQUEST">
            
             MessageId: MF_E_NET_BAD_REQUEST
            
             MessageText:
            
             The request could not be understood by the server.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_INTERNAL_SERVER_ERROR">
            
             MessageId: MF_E_NET_INTERNAL_SERVER_ERROR
            
             MessageText:
            
             The server encountered an unexpected condition which prevented it from fulfilling the request.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_SESSION_NOT_FOUND">
            
             MessageId: MF_E_NET_SESSION_NOT_FOUND
            
             MessageText:
            
             Session not found.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_NOCONNECTION">
            
             MessageId: MF_E_NET_NOCONNECTION
            
             MessageText:
            
             There is no connection established with the Windows Media server. The operation failed.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_CONNECTION_FAILURE">
            
             MessageId: MF_E_NET_CONNECTION_FAILURE
            
             MessageText:
            
             The network connection has failed.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_INCOMPATIBLE_PUSHSERVER">
            
             MessageId: MF_E_NET_INCOMPATIBLE_PUSHSERVER
            
             MessageText:
            
             The Server service that received the HTTP push request is not a compatible version of Windows Media Services (WMS).  This error may indicate the push request was received by IIS instead of WMS.  Ensure WMS is started and has the HTTP Server control protocol properly enabled and try again.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_SERVER_ACCESSDENIED">
            
             MessageId: MF_E_NET_SERVER_ACCESSDENIED
            
             MessageText:
            
             The Windows Media server is denying access.  The username and/or password might be incorrect.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_PROXY_ACCESSDENIED">
            
             MessageId: MF_E_NET_PROXY_ACCESSDENIED
            
             MessageText:
            
             The proxy server is denying access.  The username and/or password might be incorrect.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_CANNOTCONNECT">
            
             MessageId: MF_E_NET_CANNOTCONNECT
            
             MessageText:
            
             Unable to establish a connection to the server.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_INVALID_PUSH_TEMPLATE">
            
             MessageId: MF_E_NET_INVALID_PUSH_TEMPLATE
            
             MessageText:
            
             The specified push template is invalid.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_INVALID_PUSH_PUBLISHING_POINT">
            
             MessageId: MF_E_NET_INVALID_PUSH_PUBLISHING_POINT
            
             MessageText:
            
             The specified push publishing point is invalid.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_BUSY">
            
             MessageId: MF_E_NET_BUSY
            
             MessageText:
            
             The requested resource is in use.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_RESOURCE_GONE">
            
             MessageId: MF_E_NET_RESOURCE_GONE
            
             MessageText:
            
             The Publishing Point or file on the Windows Media Server is no longer available.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_ERROR_FROM_PROXY">
            
             MessageId: MF_E_NET_ERROR_FROM_PROXY
            
             MessageText:
            
             The proxy experienced an error while attempting to contact the media server.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_PROXY_TIMEOUT">
            
             MessageId: MF_E_NET_PROXY_TIMEOUT
            
             MessageText:
            
             The proxy did not receive a timely response while attempting to contact the media server.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_SERVER_UNAVAILABLE">
            
             MessageId: MF_E_NET_SERVER_UNAVAILABLE
            
             MessageText:
            
             The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_TOO_MUCH_DATA">
            
             MessageId: MF_E_NET_TOO_MUCH_DATA
            
             MessageText:
            
             The encoding process was unable to keep up with the amount of supplied data.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_SESSION_INVALID">
            
             MessageId: MF_E_NET_SESSION_INVALID
            
             MessageText:
            
             Session not found.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_OFFLINE_MODE">
            
             MessageId: MF_E_OFFLINE_MODE
            
             MessageText:
            
             The requested URL is not available in offline mode.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_UDP_BLOCKED">
            
             MessageId: MF_E_NET_UDP_BLOCKED
            
             MessageText:
            
             A device in the network is blocking UDP traffic.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_UNSUPPORTED_CONFIGURATION">
            
             MessageId: MF_E_NET_UNSUPPORTED_CONFIGURATION
            
             MessageText:
            
             The specified configuration value is not supported.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NET_PROTOCOL_DISABLED">
            
             MessageId: MF_E_NET_PROTOCOL_DISABLED
            
             MessageText:
            
             The networking protocol is disabled.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_ALREADY_INITIALIZED">
            
             MessageId: MF_E_ALREADY_INITIALIZED
            
             MessageText:
            
             This object has already been initialized and cannot be re-initialized at this time.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_BANDWIDTH_OVERRUN">
            
             MessageId: MF_E_BANDWIDTH_OVERRUN
            
             MessageText:
            
             The amount of data passed in exceeds the given bitrate and buffer window.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_LATE_SAMPLE">
            
             MessageId: MF_E_LATE_SAMPLE
            
             MessageText:
            
             The sample was passed in too late to be correctly processed.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_FLUSH_NEEDED">
            
             MessageId: MF_E_FLUSH_NEEDED
            
             MessageText:
            
             The requested action cannot be carried out until the object is flushed and the queue is emptied.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_INVALID_PROFILE">
            
             MessageId: MF_E_INVALID_PROFILE
            
             MessageText:
            
             The profile is invalid.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_INDEX_NOT_COMMITTED">
            
             MessageId: MF_E_INDEX_NOT_COMMITTED
            
             MessageText:
            
             The index that is being generated needs to be committed before the requested action can be carried out.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NO_INDEX">
            
             MessageId: MF_E_NO_INDEX
            
             MessageText:
            
             The index that is necessary for the requested action is not found.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_CANNOT_INDEX_IN_PLACE">
            
             MessageId: MF_E_CANNOT_INDEX_IN_PLACE
            
             MessageText:
            
             The requested index cannot be added in-place to the specified ASF content.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_MISSING_ASF_LEAKYBUCKET">
            
             MessageId: MF_E_MISSING_ASF_LEAKYBUCKET
            
             MessageText:
            
             The ASF leaky bucket parameters must be specified in order to carry out this request.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_INVALID_ASF_STREAMID">
            
             MessageId: MF_E_INVALID_ASF_STREAMID
            
             MessageText:
            
             The stream id is invalid. The valid range for ASF stream id is from 1 to 127.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_STREAMSINK_REMOVED">
            
             MessageId: MF_E_STREAMSINK_REMOVED
            
             MessageText:
            
             The requested Stream Sink has been removed and cannot be used.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_STREAMSINKS_OUT_OF_SYNC">
            
             MessageId: MF_E_STREAMSINKS_OUT_OF_SYNC
            
             MessageText:
            
             The various Stream Sinks in this Media Sink are too far out of sync for the requested action to take place.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_STREAMSINKS_FIXED">
            
             MessageId: MF_E_STREAMSINKS_FIXED
            
             MessageText:
            
             Stream Sinks cannot be added to or removed from this Media Sink because its set of streams is fixed.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_STREAMSINK_EXISTS">
            
             MessageId: MF_E_STREAMSINK_EXISTS
            
             MessageText:
            
             The given Stream Sink already exists.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_SAMPLEALLOCATOR_CANCELED">
            
             MessageId: MF_E_SAMPLEALLOCATOR_CANCELED
            
             MessageText:
            
             Sample allocations have been canceled.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_SAMPLEALLOCATOR_EMPTY">
            
             MessageId: MF_E_SAMPLEALLOCATOR_EMPTY
            
             MessageText:
            
             The sample allocator is currently empty, due to outstanding requests.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_SINK_ALREADYSTOPPED">
            
             MessageId: MF_E_SINK_ALREADYSTOPPED
            
             MessageText:
            
             When we try to sopt a stream sink, it is already stopped %0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_ASF_FILESINK_BITRATE_UNKNOWN">
            
             MessageId: MF_E_ASF_FILESINK_BITRATE_UNKNOWN
            
             MessageText:
            
             The ASF file sink could not reserve AVIO because the bitrate is unknown.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_SINK_NO_STREAMS">
            
             MessageId: MF_E_SINK_NO_STREAMS
            
             MessageText:
            
             No streams are selected in sink presentation descriptor.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_S_SINK_NOT_FINALIZED">
            
             MessageId: MF_S_SINK_NOT_FINALIZED
            
             MessageText:
            
             The sink has not been finalized before shut down. This may cause sink generate a corrupted content.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_METADATA_TOO_LONG">
            
             MessageId: MF_E_METADATA_TOO_LONG
            
             MessageText:
            
             A metadata item was too long to write to the output container.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_SINK_NO_SAMPLES_PROCESSED">
            
             MessageId: MF_E_SINK_NO_SAMPLES_PROCESSED
            
             MessageText:
            
             The operation failed because no samples were processed by the sink.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_VIDEO_REN_NO_PROCAMP_HW">
            
             MessageId: MF_E_VIDEO_REN_NO_PROCAMP_HW
            
             MessageText:
            
             There is no available procamp hardware with which to perform color correction.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_VIDEO_REN_NO_DEINTERLACE_HW">
            
             MessageId: MF_E_VIDEO_REN_NO_DEINTERLACE_HW
            
             MessageText:
            
             There is no available deinterlacing hardware with which to deinterlace the video stream.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_VIDEO_REN_COPYPROT_FAILED">
            
             MessageId: MF_E_VIDEO_REN_COPYPROT_FAILED
            
             MessageText:
            
             A video stream requires copy protection to be enabled, but there was a failure in attempting to enable copy protection.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_VIDEO_REN_SURFACE_NOT_SHARED">
            
             MessageId: MF_E_VIDEO_REN_SURFACE_NOT_SHARED
            
             MessageText:
            
             A component is attempting to access a surface for sharing that is not shared.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_VIDEO_DEVICE_LOCKED">
            
             MessageId: MF_E_VIDEO_DEVICE_LOCKED
            
             MessageText:
            
             A component is attempting to access a shared device that is already locked by another component.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NEW_VIDEO_DEVICE">
            
             MessageId: MF_E_NEW_VIDEO_DEVICE
            
             MessageText:
            
             The device is no longer available. The handle should be closed and a new one opened.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NO_VIDEO_SAMPLE_AVAILABLE">
            
             MessageId: MF_E_NO_VIDEO_SAMPLE_AVAILABLE
            
             MessageText:
            
             A video sample is not currently queued on a stream that is required for mixing.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NO_AUDIO_PLAYBACK_DEVICE">
            
             MessageId: MF_E_NO_AUDIO_PLAYBACK_DEVICE
            
             MessageText:
            
             No audio playback device was found.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_AUDIO_PLAYBACK_DEVICE_IN_USE">
            
             MessageId: MF_E_AUDIO_PLAYBACK_DEVICE_IN_USE
            
             MessageText:
            
             The requested audio playback device is currently in use.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_AUDIO_PLAYBACK_DEVICE_INVALIDATED">
            
             MessageId: MF_E_AUDIO_PLAYBACK_DEVICE_INVALIDATED
            
             MessageText:
            
             The audio playback device is no longer present.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_AUDIO_SERVICE_NOT_RUNNING">
            
             MessageId: MF_E_AUDIO_SERVICE_NOT_RUNNING
            
             MessageText:
            
             The audio service is not running.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TOPO_INVALID_OPTIONAL_NODE">
            
             MessageId: MF_E_TOPO_INVALID_OPTIONAL_NODE
            
             MessageText:
            
             The topology contains an invalid optional node.  Possible reasons are incorrect number of outputs and inputs or optional node is at the beginning or end of a segment. %0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TOPO_CANNOT_FIND_DECRYPTOR">
            
             MessageId: MF_E_TOPO_CANNOT_FIND_DECRYPTOR
            
             MessageText:
            
             No suitable transform was found to decrypt the content. %0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TOPO_CODEC_NOT_FOUND">
            
             MessageId: MF_E_TOPO_CODEC_NOT_FOUND
            
             MessageText:
            
             No suitable transform was found to encode or decode the content. %0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TOPO_CANNOT_CONNECT">
            
             MessageId: MF_E_TOPO_CANNOT_CONNECT
            
             MessageText:
            
             Unable to find a way to connect nodes%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TOPO_UNSUPPORTED">
            
             MessageId: MF_E_TOPO_UNSUPPORTED
            
             MessageText:
            
             Unsupported operations in topoloader%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TOPO_INVALID_TIME_ATTRIBUTES">
            
             MessageId: MF_E_TOPO_INVALID_TIME_ATTRIBUTES
            
             MessageText:
            
             The topology or its nodes contain incorrectly set time attributes%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TOPO_LOOPS_IN_TOPOLOGY">
            
             MessageId: MF_E_TOPO_LOOPS_IN_TOPOLOGY
            
             MessageText:
            
             The topology contains loops, which are unsupported in media foundation topologies%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TOPO_MISSING_PRESENTATION_DESCRIPTOR">
            
             MessageId: MF_E_TOPO_MISSING_PRESENTATION_DESCRIPTOR
            
             MessageText:
            
             A source stream node in the topology does not have a presentation descriptor%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TOPO_MISSING_STREAM_DESCRIPTOR">
            
             MessageId: MF_E_TOPO_MISSING_STREAM_DESCRIPTOR
            
             MessageText:
            
             A source stream node in the topology does not have a stream descriptor%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TOPO_STREAM_DESCRIPTOR_NOT_SELECTED">
            
             MessageId: MF_E_TOPO_STREAM_DESCRIPTOR_NOT_SELECTED
            
             MessageText:
            
             A stream descriptor was set on a source stream node but it was not selected on the presentation descriptor%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TOPO_MISSING_SOURCE">
            
             MessageId: MF_E_TOPO_MISSING_SOURCE
            
             MessageText:
            
             A source stream node in the topology does not have a source%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TOPO_SINK_ACTIVATES_UNSUPPORTED">
            
             MessageId: MF_E_TOPO_SINK_ACTIVATES_UNSUPPORTED
            
             MessageText:
            
             The topology loader does not support sink activates on output nodes.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_SEQUENCER_UNKNOWN_SEGMENT_ID">
            
             MessageId: MF_E_SEQUENCER_UNKNOWN_SEGMENT_ID
            
             MessageText:
            
             The sequencer cannot find a segment with the given ID.%0\n.
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_S_SEQUENCER_CONTEXT_CANCELED">
            
             MessageId: MF_S_SEQUENCER_CONTEXT_CANCELED
            
             MessageText:
            
             The context was canceled.%0\n.
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NO_SOURCE_IN_CACHE">
            
             MessageId: MF_E_NO_SOURCE_IN_CACHE
            
             MessageText:
            
             Cannot find source in source cache.%0\n.
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_S_SEQUENCER_SEGMENT_AT_END_OF_STREAM">
            
             MessageId: MF_S_SEQUENCER_SEGMENT_AT_END_OF_STREAM
            
             MessageText:
            
             Cannot update topology flags.%0\n.
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TRANSFORM_TYPE_NOT_SET">
            
             MessageId: MF_E_TRANSFORM_TYPE_NOT_SET
            
             MessageText:
            
             A valid type has not been set for this stream or a stream that it depends on.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TRANSFORM_STREAM_CHANGE">
            
             MessageId: MF_E_TRANSFORM_STREAM_CHANGE
            
             MessageText:
            
             A stream change has occurred. Output cannot be produced until the streams have been renegotiated.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TRANSFORM_INPUT_REMAINING">
            
             MessageId: MF_E_TRANSFORM_INPUT_REMAINING
            
             MessageText:
            
             The transform cannot take the requested action until all of the input data it currently holds is processed or flushed.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TRANSFORM_PROFILE_MISSING">
            
             MessageId: MF_E_TRANSFORM_PROFILE_MISSING
            
             MessageText:
            
             The transform requires a profile but no profile was supplied or found.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TRANSFORM_PROFILE_INVALID_OR_CORRUPT">
            
             MessageId: MF_E_TRANSFORM_PROFILE_INVALID_OR_CORRUPT
            
             MessageText:
            
             The transform requires a profile but the supplied profile was invalid or corrupt.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TRANSFORM_PROFILE_TRUNCATED">
            
             MessageId: MF_E_TRANSFORM_PROFILE_TRUNCATED
            
             MessageText:
            
             The transform requires a profile but the supplied profile ended unexpectedly while parsing.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TRANSFORM_PROPERTY_PID_NOT_RECOGNIZED">
            
             MessageId: MF_E_TRANSFORM_PROPERTY_PID_NOT_RECOGNIZED
            
             MessageText:
            
             The property ID does not match any property supported by the transform.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TRANSFORM_PROPERTY_VARIANT_TYPE_WRONG">
            
             MessageId: MF_E_TRANSFORM_PROPERTY_VARIANT_TYPE_WRONG
            
             MessageText:
            
             The variant does not have the type expected for this property ID.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TRANSFORM_PROPERTY_NOT_WRITEABLE">
            
             MessageId: MF_E_TRANSFORM_PROPERTY_NOT_WRITEABLE
            
             MessageText:
            
             An attempt was made to set the value on a read-only property.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TRANSFORM_PROPERTY_ARRAY_VALUE_WRONG_NUM_DIM">
            
             MessageId: MF_E_TRANSFORM_PROPERTY_ARRAY_VALUE_WRONG_NUM_DIM
            
             MessageText:
            
             The array property value has an unexpected number of dimensions.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TRANSFORM_PROPERTY_VALUE_SIZE_WRONG">
            
             MessageId: MF_E_TRANSFORM_PROPERTY_VALUE_SIZE_WRONG
            
             MessageText:
            
             The array or blob property value has an unexpected size.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TRANSFORM_PROPERTY_VALUE_OUT_OF_RANGE">
            
             MessageId: MF_E_TRANSFORM_PROPERTY_VALUE_OUT_OF_RANGE
            
             MessageText:
            
             The property value is out of range for this transform.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TRANSFORM_PROPERTY_VALUE_INCOMPATIBLE">
            
             MessageId: MF_E_TRANSFORM_PROPERTY_VALUE_INCOMPATIBLE
            
             MessageText:
            
             The property value is incompatible with some other property or mediatype set on the transform.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_OUTPUT_MEDIATYPE">
            
             MessageId: MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_OUTPUT_MEDIATYPE
            
             MessageText:
            
             The requested operation is not supported for the currently set output mediatype.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_INPUT_MEDIATYPE">
            
             MessageId: MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_INPUT_MEDIATYPE
            
             MessageText:
            
             The requested operation is not supported for the currently set input mediatype.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_MEDIATYPE_COMBINATION">
            
             MessageId: MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_MEDIATYPE_COMBINATION
            
             MessageText:
            
             The requested operation is not supported for the currently set combination of mediatypes.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TRANSFORM_CONFLICTS_WITH_OTHER_CURRENTLY_ENABLED_FEATURES">
            
             MessageId: MF_E_TRANSFORM_CONFLICTS_WITH_OTHER_CURRENTLY_ENABLED_FEATURES
            
             MessageText:
            
             The requested feature is not supported in combination with some other currently enabled feature.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TRANSFORM_NEED_MORE_INPUT">
            
             MessageId: MF_E_TRANSFORM_NEED_MORE_INPUT
            
             MessageText:
            
             The transform cannot produce output until it gets more input samples.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_SPKR_CONFIG">
            
             MessageId: MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_SPKR_CONFIG
            
             MessageText:
            
             The requested operation is not supported for the current speaker configuration.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TRANSFORM_CANNOT_CHANGE_MEDIATYPE_WHILE_PROCESSING">
            
             MessageId: MF_E_TRANSFORM_CANNOT_CHANGE_MEDIATYPE_WHILE_PROCESSING
            
             MessageText:
            
             The transform cannot accept mediatype changes in the middle of processing.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_S_TRANSFORM_DO_NOT_PROPAGATE_EVENT">
            
             MessageId: MF_S_TRANSFORM_DO_NOT_PROPAGATE_EVENT
            
             MessageText:
            
             The caller should not propagate this event to downstream components.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_UNSUPPORTED_D3D_TYPE">
            
             MessageId: MF_E_UNSUPPORTED_D3D_TYPE
            
             MessageText:
            
             The input type is not supported for D3D device.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TRANSFORM_ASYNC_LOCKED">
            
             MessageId: MF_E_TRANSFORM_ASYNC_LOCKED
            
             MessageText:
            
             The caller does not appear to support this transform's asynchronous capabilities.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TRANSFORM_CANNOT_INITIALIZE_ACM_DRIVER">
            
             MessageId: MF_E_TRANSFORM_CANNOT_INITIALIZE_ACM_DRIVER
            
             MessageText:
            
             An audio compression manager driver could not be initialized by the transform.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_LICENSE_INCORRECT_RIGHTS">
            
             MessageId: MF_E_LICENSE_INCORRECT_RIGHTS
            
             MessageText:
            
             You are not allowed to open this file. Contact the content provider for further assistance.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_LICENSE_OUTOFDATE">
            
             MessageId: MF_E_LICENSE_OUTOFDATE
            
             MessageText:
            
             The license for this media file has expired. Get a new license or contact the content provider for further assistance.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_LICENSE_REQUIRED">
            
             MessageId: MF_E_LICENSE_REQUIRED
            
             MessageText:
            
             You need a license to perform the requested operation on this media file.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_DRM_HARDWARE_INCONSISTENT">
            
             MessageId: MF_E_DRM_HARDWARE_INCONSISTENT
            
             MessageText:
            
             The licenses for your media files are corrupted. Contact Microsoft product support.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NO_CONTENT_PROTECTION_MANAGER">
            
             MessageId: MF_E_NO_CONTENT_PROTECTION_MANAGER
            
             MessageText:
            
             The APP needs to provide IMFContentProtectionManager callback to access the protected media file.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_LICENSE_RESTORE_NO_RIGHTS">
            
             MessageId: MF_E_LICENSE_RESTORE_NO_RIGHTS
            
             MessageText:
            
             Client does not have rights to restore licenses.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_BACKUP_RESTRICTED_LICENSE">
            
             MessageId: MF_E_BACKUP_RESTRICTED_LICENSE
            
             MessageText:
            
             Licenses are restricted and hence can not be backed up.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_LICENSE_RESTORE_NEEDS_INDIVIDUALIZATION">
            
             MessageId: MF_E_LICENSE_RESTORE_NEEDS_INDIVIDUALIZATION
            
             MessageText:
            
             License restore requires machine to be individualized.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_S_PROTECTION_NOT_REQUIRED">
            
             MessageId: MF_S_PROTECTION_NOT_REQUIRED
            
             MessageText:
            
             Protection for stream is not required.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_COMPONENT_REVOKED">
            
             MessageId: MF_E_COMPONENT_REVOKED
            
             MessageText:
            
             Component is revoked.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TRUST_DISABLED">
            
             MessageId: MF_E_TRUST_DISABLED
            
             MessageText:
            
             Trusted functionality is currently disabled on this component.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_WMDRMOTA_NO_ACTION">
            
             MessageId: MF_E_WMDRMOTA_NO_ACTION
            
             MessageText:
            
             No Action is set on WMDRM Output Trust Authority.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_WMDRMOTA_ACTION_ALREADY_SET">
            
             MessageId: MF_E_WMDRMOTA_ACTION_ALREADY_SET
            
             MessageText:
            
             Action is already set on WMDRM Output Trust Authority.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_WMDRMOTA_DRM_HEADER_NOT_AVAILABLE">
            
             MessageId: MF_E_WMDRMOTA_DRM_HEADER_NOT_AVAILABLE
            
             MessageText:
            
             DRM Heaader is not available.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_WMDRMOTA_DRM_ENCRYPTION_SCHEME_NOT_SUPPORTED">
            
             MessageId: MF_E_WMDRMOTA_DRM_ENCRYPTION_SCHEME_NOT_SUPPORTED
            
             MessageText:
            
             Current encryption scheme is not supported.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_WMDRMOTA_ACTION_MISMATCH">
            
             MessageId: MF_E_WMDRMOTA_ACTION_MISMATCH
            
             MessageText:
            
             Action does not match with current configuration.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_WMDRMOTA_INVALID_POLICY">
            
             MessageId: MF_E_WMDRMOTA_INVALID_POLICY
            
             MessageText:
            
             Invalid policy for WMDRM Output Trust Authority.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_POLICY_UNSUPPORTED">
            
             MessageId: MF_E_POLICY_UNSUPPORTED
            
             MessageText:
            
             The policies that the Input Trust Authority requires to be enforced are unsupported by the outputs.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_OPL_NOT_SUPPORTED">
            
             MessageId: MF_E_OPL_NOT_SUPPORTED
            
             MessageText:
            
             The OPL that the license requires to be enforced are not supported by the Input Trust Authority.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TOPOLOGY_VERIFICATION_FAILED">
            
             MessageId: MF_E_TOPOLOGY_VERIFICATION_FAILED
            
             MessageText:
            
             The topology could not be successfully verified.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_SIGNATURE_VERIFICATION_FAILED">
            
             MessageId: MF_E_SIGNATURE_VERIFICATION_FAILED
            
             MessageText:
            
             Signature verification could not be completed successfully for this component.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_DEBUGGING_NOT_ALLOWED">
            
             MessageId: MF_E_DEBUGGING_NOT_ALLOWED
            
             MessageText:
            
             Running this process under a debugger while using protected content is not allowed.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_CODE_EXPIRED">
            
             MessageId: MF_E_CODE_EXPIRED
            
             MessageText:
            
             MF component has expired.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_GRL_VERSION_TOO_LOW">
            
             MessageId: MF_E_GRL_VERSION_TOO_LOW
            
             MessageText:
            
             The current GRL on the machine does not meet the minimum version requirements.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_GRL_RENEWAL_NOT_FOUND">
            
             MessageId: MF_E_GRL_RENEWAL_NOT_FOUND
            
             MessageText:
            
             The current GRL on the machine does not contain any renewal entries for the specified revocation.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_GRL_EXTENSIBLE_ENTRY_NOT_FOUND">
            
             MessageId: MF_E_GRL_EXTENSIBLE_ENTRY_NOT_FOUND
            
             MessageText:
            
             The current GRL on the machine does not contain any extensible entries for the specified extension GUID.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_KERNEL_UNTRUSTED">
            
             MessageId: MF_E_KERNEL_UNTRUSTED
            
             MessageText:
            
             The kernel isn't secure for high security level content.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_PEAUTH_UNTRUSTED">
            
             MessageId: MF_E_PEAUTH_UNTRUSTED
            
             MessageText:
            
             The response from protected environment driver isn't valid.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NON_PE_PROCESS">
            
             MessageId: MF_E_NON_PE_PROCESS
            
             MessageText:
            
             A non-PE process tried to talk to PEAuth.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_REBOOT_REQUIRED">
            
             MessageId: MF_E_REBOOT_REQUIRED
            
             MessageText:
            
             We need to reboot the machine.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_S_WAIT_FOR_POLICY_SET">
            
             MessageId: MF_S_WAIT_FOR_POLICY_SET
            
             MessageText:
            
             Protection for this stream is not guaranteed to be enforced until the MEPolicySet event is fired.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_S_VIDEO_DISABLED_WITH_UNKNOWN_SOFTWARE_OUTPUT">
            
             MessageId: MF_S_VIDEO_DISABLED_WITH_UNKNOWN_SOFTWARE_OUTPUT
            
             MessageText:
            
             This video stream is disabled because it is being sent to an unknown software output.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_GRL_INVALID_FORMAT">
            
             MessageId: MF_E_GRL_INVALID_FORMAT
            
             MessageText:
            
             The GRL file is not correctly formed, it may have been corrupted or overwritten.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_GRL_UNRECOGNIZED_FORMAT">
            
             MessageId: MF_E_GRL_UNRECOGNIZED_FORMAT
            
             MessageText:
            
             The GRL file is in a format newer than those recognized by this GRL Reader.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_ALL_PROCESS_RESTART_REQUIRED">
            
             MessageId: MF_E_ALL_PROCESS_RESTART_REQUIRED
            
             MessageText:
            
             The GRL was reloaded and required all processes that can run protected media to restart.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_PROCESS_RESTART_REQUIRED">
            
             MessageId: MF_E_PROCESS_RESTART_REQUIRED
            
             MessageText:
            
             The GRL was reloaded and the current process needs to restart.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_USERMODE_UNTRUSTED">
            
             MessageId: MF_E_USERMODE_UNTRUSTED
            
             MessageText:
            
             The user space is untrusted for protected content play.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_PEAUTH_SESSION_NOT_STARTED">
            
             MessageId: MF_E_PEAUTH_SESSION_NOT_STARTED
            
             MessageText:
            
             PEAuth communication session hasn't been started.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_PEAUTH_PUBLICKEY_REVOKED">
            
             MessageId: MF_E_PEAUTH_PUBLICKEY_REVOKED
            
             MessageText:
            
             PEAuth's public key is revoked.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_GRL_ABSENT">
            
             MessageId: MF_E_GRL_ABSENT
            
             MessageText:
            
             The GRL is absent.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_S_PE_TRUSTED">
            
             MessageId: MF_S_PE_TRUSTED
            
             MessageText:
            
             The Protected Environment is trusted.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_PE_UNTRUSTED">
            
             MessageId: MF_E_PE_UNTRUSTED
            
             MessageText:
            
             The Protected Environment is untrusted.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_PEAUTH_NOT_STARTED">
            
             MessageId: MF_E_PEAUTH_NOT_STARTED
            
             MessageText:
            
             The Protected Environment Authorization service (PEAUTH) has not been started.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_INCOMPATIBLE_SAMPLE_PROTECTION">
            
             MessageId: MF_E_INCOMPATIBLE_SAMPLE_PROTECTION
            
             MessageText:
            
             The sample protection algorithms supported by components are not compatible.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_PE_SESSIONS_MAXED">
            
             MessageId: MF_E_PE_SESSIONS_MAXED
            
             MessageText:
            
             No more protected environment sessions can be supported.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_HIGH_SECURITY_LEVEL_CONTENT_NOT_ALLOWED">
            
             MessageId: MF_E_HIGH_SECURITY_LEVEL_CONTENT_NOT_ALLOWED
            
             MessageText:
            
             WMDRM ITA does not allow protected content with high security level for this release.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TEST_SIGNED_COMPONENTS_NOT_ALLOWED">
            
             MessageId: MF_E_TEST_SIGNED_COMPONENTS_NOT_ALLOWED
            
             MessageText:
            
             WMDRM ITA cannot allow the requested action for the content as one or more components is not properly signed.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_ITA_UNSUPPORTED_ACTION">
            
             MessageId: MF_E_ITA_UNSUPPORTED_ACTION
            
             MessageText:
            
             WMDRM ITA does not support the requested action.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_ITA_ERROR_PARSING_SAP_PARAMETERS">
            
             MessageId: MF_E_ITA_ERROR_PARSING_SAP_PARAMETERS
            
             MessageText:
            
             WMDRM ITA encountered an error in parsing the Secure Audio Path parameters.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_POLICY_MGR_ACTION_OUTOFBOUNDS">
            
             MessageId: MF_E_POLICY_MGR_ACTION_OUTOFBOUNDS
            
             MessageText:
            
             The Policy Manager action passed in is invalid.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_BAD_OPL_STRUCTURE_FORMAT">
            
             MessageId: MF_E_BAD_OPL_STRUCTURE_FORMAT
            
             MessageText:
            
             The structure specifying Output Protection Level is not the correct format.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_PROTECTION_GUID">
            
             MessageId: MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_PROTECTION_GUID
            
             MessageText:
            
             WMDRM ITA does not recognize the Explicite Analog Video Output Protection guid specified in the license.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NO_PMP_HOST">
            
             MessageId: MF_E_NO_PMP_HOST
            
             MessageText:
            
             IMFPMPHost object not available.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_ITA_OPL_DATA_NOT_INITIALIZED">
            
             MessageId: MF_E_ITA_OPL_DATA_NOT_INITIALIZED
            
             MessageText:
            
             WMDRM ITA could not initialize the Output Protection Level data.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_OUTPUT">
            
             MessageId: MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_OUTPUT
            
             MessageText:
            
             WMDRM ITA does not recognize the Analog Video Output specified by the OTA.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_ITA_UNRECOGNIZED_DIGITAL_VIDEO_OUTPUT">
            
             MessageId: MF_E_ITA_UNRECOGNIZED_DIGITAL_VIDEO_OUTPUT
            
             MessageText:
            
             WMDRM ITA does not recognize the Digital Video Output specified by the OTA.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_CLOCK_INVALID_CONTINUITY_KEY">
            
             MessageId: MF_E_CLOCK_INVALID_CONTINUITY_KEY
            
             MessageText:
            
             The continuity key supplied is not currently valid.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_CLOCK_NO_TIME_SOURCE">
            
             MessageId: MF_E_CLOCK_NO_TIME_SOURCE
            
             MessageText:
            
             No Presentation Time Source has been specified.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_CLOCK_STATE_ALREADY_SET">
            
             MessageId: MF_E_CLOCK_STATE_ALREADY_SET
            
             MessageText:
            
             The clock is already in the requested state.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_CLOCK_NOT_SIMPLE">
            
             MessageId: MF_E_CLOCK_NOT_SIMPLE
            
             MessageText:
            
             The clock has too many advanced features to carry out the request.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_S_CLOCK_STOPPED">
            
             MessageId: MF_S_CLOCK_STOPPED
            
             MessageText:
            
             Timer::SetTimer returns this success code if called happened while timer is stopped. Timer is not going to be dispatched until clock is running%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NO_MORE_DROP_MODES">
            
             MessageId: MF_E_NO_MORE_DROP_MODES
            
             MessageText:
            
             The component does not support any more drop modes.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_NO_MORE_QUALITY_LEVELS">
            
             MessageId: MF_E_NO_MORE_QUALITY_LEVELS
            
             MessageText:
            
             The component does not support any more quality levels.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_DROPTIME_NOT_SUPPORTED">
            
             MessageId: MF_E_DROPTIME_NOT_SUPPORTED
            
             MessageText:
            
             The component does not support drop time functionality.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_QUALITYKNOB_WAIT_LONGER">
            
             MessageId: MF_E_QUALITYKNOB_WAIT_LONGER
            
             MessageText:
            
             Quality Manager needs to wait longer before bumping the Quality Level up.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_QM_INVALIDSTATE">
            
             MessageId: MF_E_QM_INVALIDSTATE
            
             MessageText:
            
             Quality Manager is in an invalid state. Quality Management is off at this moment.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TRANSCODE_NO_CONTAINERTYPE">
            
             MessageId: MF_E_TRANSCODE_NO_CONTAINERTYPE
            
             MessageText:
            
             No transcode output container type is specified.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TRANSCODE_PROFILE_NO_MATCHING_STREAMS">
            
             MessageId: MF_E_TRANSCODE_PROFILE_NO_MATCHING_STREAMS
            
             MessageText:
            
             The profile does not have a media type configuration for any selected source streams.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_TRANSCODE_NO_MATCHING_ENCODER">
            
             MessageId: MF_E_TRANSCODE_NO_MATCHING_ENCODER
            
             MessageText:
            
             Cannot find an encoder MFT that accepts the user preferred output type.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_ALLOCATOR_NOT_INITIALIZED">
            
             MessageId: MF_E_ALLOCATOR_NOT_INITIALIZED
            
             MessageText:
            
             Memory allocator is not initialized.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_ALLOCATOR_NOT_COMMITED">
            
             MessageId: MF_E_ALLOCATOR_NOT_COMMITED
            
             MessageText:
            
             Memory allocator is not committed yet.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_ALLOCATOR_ALREADY_COMMITED">
            
             MessageId: MF_E_ALLOCATOR_ALREADY_COMMITED
            
             MessageText:
            
             Memory allocator has already been committed.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_STREAM_ERROR">
            
             MessageId: MF_E_STREAM_ERROR
            
             MessageText:
            
             An error occurred in media stream.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_INVALID_STREAM_STATE">
            
             MessageId: MF_E_INVALID_STREAM_STATE
            
             MessageText:
            
             Stream is not in a state to handle the request.%0
            
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationErrors.MF_E_HW_STREAM_NOT_CONNECTED">
            
             MessageId: MF_E_HW_STREAM_NOT_CONNECTED
            
             MessageText:
            
             Hardware stream is not connected yet.%0
            
        </member>
        <member name="T:NAudio.MediaFoundation.MediaFoundationApi">
            <summary>
            Main interface for using Media Foundation with NAudio
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationApi.Startup">
            <summary>
            initializes MediaFoundation - only needs to be called once per process
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationApi.EnumerateTransforms(System.Guid)">
            <summary>
            Enumerate the installed MediaFoundation transforms in the specified category
            </summary>
            <param name="category">A category from MediaFoundationTransformCategories</param>
            <returns></returns>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationApi.Shutdown">
            <summary>
            uninitializes MediaFoundation
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationApi.CreateMediaType">
            <summary>
            Creates a Media type
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationApi.CreateMediaTypeFromWaveFormat(NAudio.Wave.WaveFormat)">
            <summary>
            Creates a media type from a WaveFormat
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationApi.CreateMemoryBuffer(System.Int32)">
            <summary>
            Creates a memory buffer of the specified size
            </summary>
            <param name="bufferSize">Memory buffer size in bytes</param>
            <returns>The memory buffer</returns>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationApi.CreateSample">
            <summary>
            Creates a sample object
            </summary>
            <returns>The sample object</returns>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationApi.CreateAttributes(System.Int32)">
            <summary>
            Creates a new attributes store
            </summary>
            <param name="initialSize">Initial size</param>
            <returns>The attributes store</returns>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationApi.CreateByteStream(System.Object)">
            <summary>
            Creates a media foundation byte stream based on a stream object
            (usable with WinRT streams)
            </summary>
            <param name="stream">The input stream</param>
            <returns>A media foundation byte stream</returns>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationApi.CreateSourceReaderFromByteStream(NAudio.MediaFoundation.IMFByteStream)">
            <summary>
            Creates a source reader based on a byte stream
            </summary>
            <param name="byteStream">The byte stream</param>
            <returns>A media foundation source reader</returns>
        </member>
        <member name="T:NAudio.MediaFoundation.MediaFoundationInterop">
            <summary>
            Interop definitions for MediaFoundation
            thanks to Lucian Wischik for the initial work on many of these definitions (also various interfaces)
            n.b. the goal is to make as much of this internal as possible, and provide
            better .NET APIs using the MediaFoundationApi class instead
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationInterop.MFStartup(System.Int32,System.Int32)">
            <summary>
            Initializes Microsoft Media Foundation.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationInterop.MFShutdown">
            <summary>
            Shuts down the Microsoft Media Foundation platform
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationInterop.MFCreateMediaType(NAudio.MediaFoundation.IMFMediaType@)">
            <summary>
            Creates an empty media type.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationInterop.MFInitMediaTypeFromWaveFormatEx(NAudio.MediaFoundation.IMFMediaType,NAudio.Wave.WaveFormat,System.Int32)">
            <summary>
            Initializes a media type from a WAVEFORMATEX structure. 
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationInterop.MFCreateWaveFormatExFromMFMediaType(NAudio.MediaFoundation.IMFMediaType,System.IntPtr@,System.Int32@,System.Int32)">
            <summary>
            Converts a Media Foundation audio media type to a WAVEFORMATEX structure.
            </summary>
            TODO: try making second parameter out WaveFormatExtraData
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationInterop.MFCreateSourceReaderFromURL(System.String,NAudio.MediaFoundation.IMFAttributes,NAudio.MediaFoundation.IMFSourceReader@)">
            <summary>
            Creates the source reader from a URL.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationInterop.MFCreateSourceReaderFromByteStream(NAudio.MediaFoundation.IMFByteStream,NAudio.MediaFoundation.IMFAttributes,NAudio.MediaFoundation.IMFSourceReader@)">
            <summary>
            Creates the source reader from a byte stream.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationInterop.MFCreateSinkWriterFromURL(System.String,NAudio.MediaFoundation.IMFByteStream,NAudio.MediaFoundation.IMFAttributes,NAudio.MediaFoundation.IMFSinkWriter@)">
            <summary>
            Creates the sink writer from a URL or byte stream.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationInterop.MFCreateMFByteStreamOnStreamEx(System.Object,NAudio.MediaFoundation.IMFByteStream@)">
            <summary>
            Creates a Microsoft Media Foundation byte stream that wraps an IRandomAccessStream object.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationInterop.MFCreateMFByteStreamOnStream(System.Runtime.InteropServices.ComTypes.IStream,NAudio.MediaFoundation.IMFByteStream@)">
            <summary>
            Creates a Microsoft Media Foundation byte stream that wraps an IRandomAccessStream object.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationInterop.MFTEnumEx(System.Guid,NAudio.MediaFoundation._MFT_ENUM_FLAG,NAudio.MediaFoundation.MFT_REGISTER_TYPE_INFO,NAudio.MediaFoundation.MFT_REGISTER_TYPE_INFO,System.IntPtr@,System.Int32@)">
            <summary>
            Gets a list of Microsoft Media Foundation transforms (MFTs) that match specified search criteria. 
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationInterop.MFCreateSample(NAudio.MediaFoundation.IMFSample@)">
            <summary>
            Creates an empty media sample.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationInterop.MFCreateMemoryBuffer(System.Int32,NAudio.MediaFoundation.IMFMediaBuffer@)">
            <summary>
            Allocates system memory and creates a media buffer to manage it.
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationInterop.MFCreateAttributes(NAudio.MediaFoundation.IMFAttributes@,System.Int32)">
            <summary>
            Creates an empty attribute store. 
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationInterop.MFTranscodeGetAudioOutputAvailableTypes(System.Guid,NAudio.MediaFoundation._MFT_ENUM_FLAG,NAudio.MediaFoundation.IMFAttributes,NAudio.MediaFoundation.IMFCollection@)">
            <summary>
            Gets a list of output formats from an audio encoder.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationInterop.MF_SOURCE_READER_ALL_STREAMS">
            <summary>
            All streams
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationInterop.MF_SOURCE_READER_FIRST_AUDIO_STREAM">
            <summary>
            First audio stream
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationInterop.MF_SOURCE_READER_FIRST_VIDEO_STREAM">
            <summary>
            First video stream
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationInterop.MF_SOURCE_READER_MEDIASOURCE">
            <summary>
            Media source
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationInterop.MF_SDK_VERSION">
            <summary>
            Media Foundation SDK Version
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationInterop.MF_API_VERSION">
            <summary>
            Media Foundation API Version
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationInterop.MF_VERSION">
            <summary>
            Media Foundation Version
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.MediaFoundationTransform">
            <summary>
            An abstract base class for simplifying working with Media Foundation Transforms
            You need to override the method that actually creates and configures the transform
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationTransform.sourceProvider">
            <summary>
            The Source Provider
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationTransform.outputWaveFormat">
            <summary>
            The Output WaveFormat
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationTransform.#ctor(NAudio.Wave.IWaveProvider,NAudio.Wave.WaveFormat)">
            <summary>
            Constructs a new MediaFoundationTransform wrapper
            Will read one second at a time
            </summary>
            <param name="sourceProvider">The source provider for input data to the transform</param>
            <param name="outputFormat">The desired output format</param>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationTransform.CreateTransform">
            <summary>
            To be implemented by overriding classes. Create the transform object, set up its input and output types,
            and configure any custom properties in here
            </summary>
            <returns>An object implementing IMFTrasform</returns>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationTransform.Dispose(System.Boolean)">
            <summary>
            Disposes this MediaFoundation transform
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationTransform.Dispose">
            <summary>
            Disposes this Media Foundation Transform
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationTransform.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NAudio.MediaFoundation.MediaFoundationTransform.WaveFormat">
            <summary>
            The output WaveFormat of this Media Foundation Transform
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationTransform.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data out of the source, passing it through the transform
            </summary>
            <param name="buffer">Output buffer</param>
            <param name="offset">Offset within buffer to write to</param>
            <param name="count">Desired byte count</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationTransform.ReadFromTransform">
            <summary>
            Attempts to read from the transform
            Some useful info here:
            http://msdn.microsoft.com/en-gb/library/windows/desktop/aa965264%28v=vs.85%29.aspx#process_data
            </summary>
            <returns></returns>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaFoundationTransform.Reposition">
            <summary>
            Indicate that the source has been repositioned and completely drain out the transforms buffers
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.MediaFoundationTransformCategories">
            <summary>
            Media Foundation Transform Categories
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationTransformCategories.VideoDecoder">
            <summary>
            MFT_CATEGORY_VIDEO_DECODER
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationTransformCategories.VideoEncoder">
            <summary>
            MFT_CATEGORY_VIDEO_ENCODER
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationTransformCategories.VideoEffect">
            <summary>
            MFT_CATEGORY_VIDEO_EFFECT
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationTransformCategories.Multiplexer">
            <summary>
            MFT_CATEGORY_MULTIPLEXER
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationTransformCategories.Demultiplexer">
            <summary>
            MFT_CATEGORY_DEMULTIPLEXER
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationTransformCategories.AudioDecoder">
            <summary>
            MFT_CATEGORY_AUDIO_DECODER
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationTransformCategories.AudioEncoder">
            <summary>
            MFT_CATEGORY_AUDIO_ENCODER
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationTransformCategories.AudioEffect">
            <summary>
            MFT_CATEGORY_AUDIO_EFFECT
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationTransformCategories.VideoProcessor">
            <summary>
            MFT_CATEGORY_VIDEO_PROCESSOR
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaFoundationTransformCategories.Other">
            <summary>
            MFT_CATEGORY_OTHER
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.MediaType">
            <summary>
            Media Type helper class, simplifying working with IMFMediaType
            (will probably change in the future, to inherit from an attributes class)
            Currently does not release the COM object, so you must do that yourself
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaType.#ctor(NAudio.MediaFoundation.IMFMediaType)">
            <summary>
            Wraps an existing IMFMediaType object
            </summary>
            <param name="mediaType">The IMFMediaType object</param>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaType.#ctor">
            <summary>
            Creates and wraps a new IMFMediaType object
            </summary>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaType.#ctor(NAudio.Wave.WaveFormat)">
            <summary>
            Creates and wraps a new IMFMediaType object based on a WaveFormat
            </summary>
            <param name="waveFormat">WaveFormat</param>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaType.TryGetUInt32(System.Guid,System.Int32)">
            <summary>
            Tries to get a UINT32 value, returning a default value if it doesn't exist
            </summary>
            <param name="key">Attribute key</param>
            <param name="defaultValue">Default value</param>
            <returns>Value or default if key doesn't exist</returns>
        </member>
        <member name="M:NAudio.MediaFoundation.MediaType.SetUInt32(System.Guid,System.Int32)">
            <summary>
            Sets a UINT32 attribute on this media type
            </summary>
            <param name="key">Attribute key</param>
            <param name="value">Attribute value (e.g. 1 for TRUE)</param>
        </member>
        <member name="P:NAudio.MediaFoundation.MediaType.SampleRate">
            <summary>
            The Sample Rate (valid for audio media types)
            </summary>
        </member>
        <member name="P:NAudio.MediaFoundation.MediaType.ChannelCount">
            <summary>
            The number of Channels (valid for audio media types)
            </summary>
        </member>
        <member name="P:NAudio.MediaFoundation.MediaType.BitsPerSample">
            <summary>
            The number of bits per sample (n.b. not always valid for compressed audio types)
            </summary>
        </member>
        <member name="P:NAudio.MediaFoundation.MediaType.AverageBytesPerSecond">
            <summary>
            The average bytes per second (valid for audio media types)
            </summary>
        </member>
        <member name="P:NAudio.MediaFoundation.MediaType.SubType">
            <summary>
            The Media Subtype. For audio, is a value from the AudioSubtypes class
            </summary>
        </member>
        <member name="P:NAudio.MediaFoundation.MediaType.MajorType">
            <summary>
            The Major type, e.g. audio or video (from the MediaTypes class)
            </summary>
        </member>
        <member name="P:NAudio.MediaFoundation.MediaType.MediaFoundationObject">
            <summary>
            Access to the actual IMFMediaType object
            Use to pass to MF APIs or Marshal.ReleaseComObject when you are finished with it
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.MediaTypes">
            <summary>
            Major Media Types
            http://msdn.microsoft.com/en-us/library/windows/desktop/aa367377%28v=vs.85%29.aspx
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaTypes.MFMediaType_Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaTypes.MFMediaType_Audio">
            <summary>
            Audio
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaTypes.MFMediaType_Video">
            <summary>
            Video
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaTypes.MFMediaType_Protected">
            <summary>
            Protected Media
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaTypes.MFMediaType_SAMI">
            <summary>
            Synchronized Accessible Media Interchange (SAMI) captions.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaTypes.MFMediaType_Script">
            <summary>
            Script stream
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaTypes.MFMediaType_Image">
            <summary>
            Still image stream.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaTypes.MFMediaType_HTML">
            <summary>
            HTML stream.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaTypes.MFMediaType_Binary">
            <summary>
            Binary stream.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MediaTypes.MFMediaType_FileTransfer">
            <summary>
            A stream that contains data files.
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.MFT_INPUT_STREAM_INFO">
            <summary>
            Contains information about an input stream on a Media Foundation transform (MFT)
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MFT_INPUT_STREAM_INFO.hnsMaxLatency">
            <summary>
            Maximum amount of time between an input sample and the corresponding output sample, in 100-nanosecond units.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MFT_INPUT_STREAM_INFO.dwFlags">
            <summary>
            Bitwise OR of zero or more flags from the _MFT_INPUT_STREAM_INFO_FLAGS enumeration.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MFT_INPUT_STREAM_INFO.cbSize">
            <summary>
            The minimum size of each input buffer, in bytes.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MFT_INPUT_STREAM_INFO.cbMaxLookahead">
            <summary>
            Maximum amount of input data, in bytes, that the MFT holds to perform lookahead.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MFT_INPUT_STREAM_INFO.cbAlignment">
            <summary>
            The memory alignment required for input buffers. If the MFT does not require a specific alignment, the value is zero.
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.MFT_MESSAGE_TYPE">
            <summary>
            Defines messages for a Media Foundation transform (MFT).
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MFT_MESSAGE_TYPE.MFT_MESSAGE_COMMAND_FLUSH">
            <summary>
            Requests the MFT to flush all stored data. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MFT_MESSAGE_TYPE.MFT_MESSAGE_COMMAND_DRAIN">
            <summary>
            Requests the MFT to drain any stored data.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MFT_MESSAGE_TYPE.MFT_MESSAGE_SET_D3D_MANAGER">
            <summary>
            Sets or clears the Direct3D Device Manager for DirectX Video Accereration (DXVA). 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MFT_MESSAGE_TYPE.MFT_MESSAGE_DROP_SAMPLES">
            <summary>
            Drop samples - requires Windows 7
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MFT_MESSAGE_TYPE.MFT_MESSAGE_COMMAND_TICK">
            <summary>
            Command Tick - requires Windows 8
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MFT_MESSAGE_TYPE.MFT_MESSAGE_NOTIFY_BEGIN_STREAMING">
            <summary>
            Notifies the MFT that streaming is about to begin. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MFT_MESSAGE_TYPE.MFT_MESSAGE_NOTIFY_END_STREAMING">
            <summary>
            Notifies the MFT that streaming is about to end. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MFT_MESSAGE_TYPE.MFT_MESSAGE_NOTIFY_END_OF_STREAM">
            <summary>
            Notifies the MFT that an input stream has ended. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MFT_MESSAGE_TYPE.MFT_MESSAGE_NOTIFY_START_OF_STREAM">
            <summary>
            Notifies the MFT that the first sample is about to be processed. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MFT_MESSAGE_TYPE.MFT_MESSAGE_COMMAND_MARKER">
            <summary>
            Marks a point in the stream. This message applies only to asynchronous MFTs. Requires Windows 7 
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.MFT_OUTPUT_DATA_BUFFER">
            <summary>
            Contains information about an output buffer for a Media Foundation transform. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MFT_OUTPUT_DATA_BUFFER.dwStreamID">
            <summary>
            Output stream identifier.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MFT_OUTPUT_DATA_BUFFER.pSample">
            <summary>
            Pointer to the IMFSample interface. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MFT_OUTPUT_DATA_BUFFER.dwStatus">
            <summary>
            Before calling ProcessOutput, set this member to zero.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MFT_OUTPUT_DATA_BUFFER.pEvents">
            <summary>
            Before calling ProcessOutput, set this member to NULL.
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.MFT_OUTPUT_STREAM_INFO">
            <summary>
            Contains information about an output stream on a Media Foundation transform (MFT).
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MFT_OUTPUT_STREAM_INFO.dwFlags">
            <summary>
            Bitwise OR of zero or more flags from the _MFT_OUTPUT_STREAM_INFO_FLAGS enumeration.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MFT_OUTPUT_STREAM_INFO.cbSize">
            <summary>
            Minimum size of each output buffer, in bytes.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MFT_OUTPUT_STREAM_INFO.cbAlignment">
            <summary>
            The memory alignment required for output buffers.
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.MFT_REGISTER_TYPE_INFO">
            <summary>
            Contains media type information for registering a Media Foundation transform (MFT). 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MFT_REGISTER_TYPE_INFO.guidMajorType">
            <summary>
            The major media type.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MFT_REGISTER_TYPE_INFO.guidSubtype">
            <summary>
            The Media Subtype
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.MF_SINK_WRITER_STATISTICS">
            <summary>
            Contains statistics about the performance of the sink writer.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MF_SINK_WRITER_STATISTICS.cb">
            <summary>
            The size of the structure, in bytes.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MF_SINK_WRITER_STATISTICS.llLastTimestampReceived">
            <summary>
            The time stamp of the most recent sample given to the sink writer.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MF_SINK_WRITER_STATISTICS.llLastTimestampEncoded">
            <summary>
            The time stamp of the most recent sample to be encoded.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MF_SINK_WRITER_STATISTICS.llLastTimestampProcessed">
            <summary>
            The time stamp of the most recent sample given to the media sink.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MF_SINK_WRITER_STATISTICS.llLastStreamTickReceived">
            <summary>
            The time stamp of the most recent stream tick. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MF_SINK_WRITER_STATISTICS.llLastSinkSampleRequest">
            <summary>
            The system time of the most recent sample request from the media sink. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MF_SINK_WRITER_STATISTICS.qwNumSamplesReceived">
            <summary>
            The number of samples received.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MF_SINK_WRITER_STATISTICS.qwNumSamplesEncoded">
            <summary>
            The number of samples encoded.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MF_SINK_WRITER_STATISTICS.qwNumSamplesProcessed">
            <summary>
            The number of samples given to the media sink.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MF_SINK_WRITER_STATISTICS.qwNumStreamTicksReceived">
            <summary>
            The number of stream ticks received.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MF_SINK_WRITER_STATISTICS.dwByteCountQueued">
            <summary>
            The amount of data, in bytes, currently waiting to be processed. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MF_SINK_WRITER_STATISTICS.qwByteCountProcessed">
            <summary>
            The total amount of data, in bytes, that has been sent to the media sink.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MF_SINK_WRITER_STATISTICS.dwNumOutstandingSinkSampleRequests">
            <summary>
            The number of pending sample requests.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MF_SINK_WRITER_STATISTICS.dwAverageSampleRateReceived">
            <summary>
            The average rate, in media samples per 100-nanoseconds, at which the application sent samples to the sink writer.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MF_SINK_WRITER_STATISTICS.dwAverageSampleRateEncoded">
            <summary>
            The average rate, in media samples per 100-nanoseconds, at which the sink writer sent samples to the encoder
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.MF_SINK_WRITER_STATISTICS.dwAverageSampleRateProcessed">
            <summary>
            The average rate, in media samples per 100-nanoseconds, at which the sink writer sent samples to the media sink.
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation.TranscodeContainerTypes">
            <summary>
            https://docs.microsoft.com/en-us/windows/win32/medfound/mf-transcode-containertype
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.TranscodeContainerTypes.MFTranscodeContainerType_ASF">
            <summary>
            ASF
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.TranscodeContainerTypes.MFTranscodeContainerType_MPEG4">
            <summary>
            MPEG4
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.TranscodeContainerTypes.MFTranscodeContainerType_MP3">
            <summary>
            MP3
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.TranscodeContainerTypes.MFTranscodeContainerType_3GP">
            <summary>
            3GP
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.TranscodeContainerTypes.MFTranscodeContainerType_AC3">
            <summary>
            AC3
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.TranscodeContainerTypes.MFTranscodeContainerType_ADTS">
            <summary>
            ADTS
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.TranscodeContainerTypes.MFTranscodeContainerType_MPEG2">
            <summary>
            MPEG2
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.TranscodeContainerTypes.MFTranscodeContainerType_FMPEG4">
            <summary>
            FMPEG4
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.TranscodeContainerTypes.MFTranscodeContainerType_WAVE">
            <summary>
            WAVE
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.TranscodeContainerTypes.MFTranscodeContainerType_AVI">
            <summary>
            AVI
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation.TranscodeContainerTypes.MFTranscodeContainerType_AMR">
            <summary>
            AMR
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation._MFT_ENUM_FLAG">
            <summary>
            Contains flags for registering and enumeration Media Foundation transforms (MFTs).
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_ENUM_FLAG.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_ENUM_FLAG.MFT_ENUM_FLAG_SYNCMFT">
            <summary>
            The MFT performs synchronous data processing in software. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_ENUM_FLAG.MFT_ENUM_FLAG_ASYNCMFT">
            <summary>
            The MFT performs asynchronous data processing in software.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_ENUM_FLAG.MFT_ENUM_FLAG_HARDWARE">
            <summary>
            The MFT performs hardware-based data processing, using either the AVStream driver or a GPU-based proxy MFT. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_ENUM_FLAG.MFT_ENUM_FLAG_FIELDOFUSE">
            <summary>
            The MFT that must be unlocked by the application before use.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_ENUM_FLAG.MFT_ENUM_FLAG_LOCALMFT">
            <summary>
            For enumeration, include MFTs that were registered in the caller's process.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_ENUM_FLAG.MFT_ENUM_FLAG_TRANSCODE_ONLY">
            <summary>
            The MFT is optimized for transcoding rather than playback.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_ENUM_FLAG.MFT_ENUM_FLAG_SORTANDFILTER">
            <summary>
            For enumeration, sort and filter the results.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_ENUM_FLAG.MFT_ENUM_FLAG_ALL">
            <summary>
            Bitwise OR of all the flags, excluding MFT_ENUM_FLAG_SORTANDFILTER.
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation._MFT_INPUT_STATUS_FLAGS">
            <summary>
            Indicates the status of an input stream on a Media Foundation transform (MFT).
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_INPUT_STATUS_FLAGS.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_INPUT_STATUS_FLAGS.MFT_INPUT_STATUS_ACCEPT_DATA">
            <summary>
            The input stream can receive more data at this time.
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation._MFT_INPUT_STREAM_INFO_FLAGS">
            <summary>
            Describes an input stream on a Media Foundation transform (MFT).
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_INPUT_STREAM_INFO_FLAGS.None">
            <summary>
            No flags set
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_INPUT_STREAM_INFO_FLAGS.MFT_INPUT_STREAM_WHOLE_SAMPLES">
            <summary>
            Each media sample (IMFSample interface) of input data must contain complete, unbroken units of data. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_INPUT_STREAM_INFO_FLAGS.MFT_INPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER">
            <summary>
            Each media sample that the client provides as input must contain exactly one unit of data, as defined for the MFT_INPUT_STREAM_WHOLE_SAMPLES flag.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_INPUT_STREAM_INFO_FLAGS.MFT_INPUT_STREAM_FIXED_SAMPLE_SIZE">
            <summary>
            All input samples must be the same size.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_INPUT_STREAM_INFO_FLAGS.MFT_INPUT_STREAM_HOLDS_BUFFERS">
            <summary>
            MTF Input Stream Holds buffers
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_INPUT_STREAM_INFO_FLAGS.MFT_INPUT_STREAM_DOES_NOT_ADDREF">
            <summary>
            The MFT does not hold input samples after the IMFTransform::ProcessInput method returns.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_INPUT_STREAM_INFO_FLAGS.MFT_INPUT_STREAM_REMOVABLE">
            <summary>
            This input stream can be removed by calling IMFTransform::DeleteInputStream.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_INPUT_STREAM_INFO_FLAGS.MFT_INPUT_STREAM_OPTIONAL">
            <summary>
            This input stream is optional. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_INPUT_STREAM_INFO_FLAGS.MFT_INPUT_STREAM_PROCESSES_IN_PLACE">
            <summary>
            The MFT can perform in-place processing.
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation._MFT_OUTPUT_DATA_BUFFER_FLAGS">
            <summary>
            Defines flags for the IMFTransform::ProcessOutput method. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_OUTPUT_DATA_BUFFER_FLAGS.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_OUTPUT_DATA_BUFFER_FLAGS.MFT_OUTPUT_DATA_BUFFER_INCOMPLETE">
            <summary>
            The MFT can still generate output from this stream without receiving any more input. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_OUTPUT_DATA_BUFFER_FLAGS.MFT_OUTPUT_DATA_BUFFER_FORMAT_CHANGE">
            <summary>
            The format has changed on this output stream, or there is a new preferred format for this stream. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_OUTPUT_DATA_BUFFER_FLAGS.MFT_OUTPUT_DATA_BUFFER_STREAM_END">
            <summary>
            The MFT has removed this output stream. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_OUTPUT_DATA_BUFFER_FLAGS.MFT_OUTPUT_DATA_BUFFER_NO_SAMPLE">
            <summary>
            There is no sample ready for this stream.
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation._MFT_OUTPUT_STATUS_FLAGS">
            <summary>
            Indicates whether a Media Foundation transform (MFT) can produce output data.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_OUTPUT_STATUS_FLAGS.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_OUTPUT_STATUS_FLAGS.MFT_OUTPUT_STATUS_SAMPLE_READY">
            <summary>
            There is a sample available for at least one output stream.
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation._MFT_OUTPUT_STREAM_INFO_FLAGS">
            <summary>
            Describes an output stream on a Media Foundation transform (MFT).
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_OUTPUT_STREAM_INFO_FLAGS.None">
            <summary>
            No flags set
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_OUTPUT_STREAM_INFO_FLAGS.MFT_OUTPUT_STREAM_WHOLE_SAMPLES">
            <summary>
            Each media sample (IMFSample interface) of output data from the MFT contains complete, unbroken units of data.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_OUTPUT_STREAM_INFO_FLAGS.MFT_OUTPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER">
            <summary>
            Each output sample contains exactly one unit of data, as defined for the MFT_OUTPUT_STREAM_WHOLE_SAMPLES flag.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_OUTPUT_STREAM_INFO_FLAGS.MFT_OUTPUT_STREAM_FIXED_SAMPLE_SIZE">
            <summary>
            All output samples are the same size.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_OUTPUT_STREAM_INFO_FLAGS.MFT_OUTPUT_STREAM_DISCARDABLE">
            <summary>
            The MFT can discard the output data from this output stream, if requested by the client.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_OUTPUT_STREAM_INFO_FLAGS.MFT_OUTPUT_STREAM_OPTIONAL">
            <summary>
            This output stream is optional.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_OUTPUT_STREAM_INFO_FLAGS.MFT_OUTPUT_STREAM_PROVIDES_SAMPLES">
            <summary>
            The MFT provides the output samples for this stream, either by allocating them internally or by operating directly on the input samples.
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_OUTPUT_STREAM_INFO_FLAGS.MFT_OUTPUT_STREAM_CAN_PROVIDE_SAMPLES">
            <summary>
            The MFT can either provide output samples for this stream or it can use samples that the client allocates. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_OUTPUT_STREAM_INFO_FLAGS.MFT_OUTPUT_STREAM_LAZY_READ">
            <summary>
            The MFT does not require the client to process the output for this stream. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_OUTPUT_STREAM_INFO_FLAGS.MFT_OUTPUT_STREAM_REMOVABLE">
            <summary>
            The MFT might remove this output stream during streaming.
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation._MFT_PROCESS_OUTPUT_FLAGS">
            <summary>
            Defines flags for processing output samples in a Media Foundation transform (MFT).
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_PROCESS_OUTPUT_FLAGS.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_PROCESS_OUTPUT_FLAGS.MFT_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER">
            <summary>
            Do not produce output for streams in which the pSample member of the MFT_OUTPUT_DATA_BUFFER structure is NULL. 
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_PROCESS_OUTPUT_FLAGS.MFT_PROCESS_OUTPUT_REGENERATE_LAST_OUTPUT">
            <summary>
            Regenerates the last output sample.
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation._MFT_PROCESS_OUTPUT_STATUS">
            <summary>
            Process Output Status flags
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_PROCESS_OUTPUT_STATUS.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_PROCESS_OUTPUT_STATUS.MFT_PROCESS_OUTPUT_STATUS_NEW_STREAMS">
            <summary>
            The Media Foundation transform (MFT) has created one or more new output streams.
            </summary>
        </member>
        <member name="T:NAudio.MediaFoundation._MFT_SET_TYPE_FLAGS">
            <summary>
            Defines flags for the setting or testing the media type on a Media Foundation transform (MFT).
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_SET_TYPE_FLAGS.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:NAudio.MediaFoundation._MFT_SET_TYPE_FLAGS.MFT_SET_TYPE_TEST_ONLY">
            <summary>
            Test the proposed media type, but do not set it.
            </summary>
        </member>
    </members>
</doc>
